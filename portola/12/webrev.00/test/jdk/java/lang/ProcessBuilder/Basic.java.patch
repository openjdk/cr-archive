diff a/test/jdk/java/lang/ProcessBuilder/Basic.java b/test/jdk/java/lang/ProcessBuilder/Basic.java
--- a/test/jdk/java/lang/ProcessBuilder/Basic.java
+++ b/test/jdk/java/lang/ProcessBuilder/Basic.java
@@ -29,19 +29,21 @@
  *      4947220 7018606 7034570 4244896 5049299 8003488 8054494 8058464
  *      8067796 8224905
  * @key intermittent
  * @summary Basic tests for Process and Environment Variable code
  * @modules java.base/java.lang:open
+ * @library /test/lib
  * @run main/othervm/timeout=300 Basic
  * @run main/othervm/timeout=300 -Djdk.lang.Process.launchMechanism=fork Basic
  * @author Martin Buchholz
  */
 
 /*
  * @test
  * @modules java.base/java.lang:open
  * @requires (os.family == "linux")
+ * @library /test/lib
  * @run main/othervm/timeout=300 -Djdk.lang.Process.launchMechanism=posix_spawn Basic
  */
 
 import java.lang.ProcessBuilder.Redirect;
 import java.lang.ProcessHandle;
@@ -61,10 +63,12 @@
 import static java.lang.System.getenv;
 import static java.lang.System.out;
 import static java.lang.Boolean.TRUE;
 import static java.util.AbstractMap.SimpleImmutableEntry;
 
+import jdk.test.lib.Platform;
+
 public class Basic {
 
     /* used for Windows only */
     static final String systemRoot = System.getenv("SystemRoot");
 
@@ -622,17 +626,10 @@
              new File("/bin/sh").exists() &&
              new File("/bin/true").exists() &&
              new File("/bin/false").exists());
     }
 
-    static class BusyBox {
-        public static boolean is() { return is; }
-        private static final boolean is =
-            (! Windows.is() &&
-             new File("/bin/busybox").exists());
-    }
-
     static class UnicodeOS {
         public static boolean is() { return is; }
         private static final String osName = System.getProperty("os.name");
         private static final boolean is =
             // MacOS X would probably also qualify
@@ -667,22 +664,22 @@
                 }
             } catch (Throwable t) { unexpected(t); return -1; }
         }
     }
 
-    // On alpine linux, /bin/true and /bin/false are just links to /bin/busybox.
+    // On Alpine Linux, /bin/true and /bin/false are just links to /bin/busybox.
     // Some tests copy /bin/true and /bin/false to files with a different filename.
     // However, copying the busbox executable into a file with a different name
     // won't result in the expected return codes. As workaround, we create
-    // executable files that can be copied and produce the exepected return
-    // values. We use this workaround, if we find the busybox executable.
+    // executable files that can be copied and produce the expected return
+    // values.
 
     private static class TrueExe {
         public static String path() { return path; }
         private static final String path = path0();
         private static String path0(){
-            if (!BusyBox.is()) {
+            if (!Platform.isBusybox("/bin/true")) {
                 return "/bin/true";
             }
             else {
                 File trueExe = new File("true");
                 setFileContents(trueExe, "#!/bin/true\n");
@@ -694,11 +691,11 @@
 
     private static class FalseExe {
         public static String path() { return path; }
         private static final String path = path0();
         private static String path0(){
-            if (!BusyBox.is()) {
+            if (!Platform.isBusybox("/bin/false")) {
                 return "/bin/false";
             }
             else {
                 File falseExe = new File("false");
                 setFileContents(falseExe, "#!/bin/false\n");
