diff a/test/hotspot/jtreg/runtime/StackGuardPages/exeinvoke.c b/test/hotspot/jtreg/runtime/StackGuardPages/exeinvoke.c
--- a/test/hotspot/jtreg/runtime/StackGuardPages/exeinvoke.c
+++ b/test/hotspot/jtreg/runtime/StackGuardPages/exeinvoke.c
@@ -90,15 +90,16 @@
     fprintf(stderr, "Test ERROR. Can't set sigaction (%d)\n", errno);
     exit(7);
   }
 }
 
-int get_java_stacksize () {
-  size_t stacksize;
+size_t get_java_stacksize () {
   pthread_attr_t attr;
   JDK1_1InitArgs jdk_args;
 
+  memset(&jdk_args, 0, (sizeof jdk_args));
+
   jdk_args.version = JNI_VERSION_1_1;
   JNI_GetDefaultJavaVMInitArgs(&jdk_args);
   if (jdk_args.javaStackSize <= 0) {
     fprintf(stderr, "Test ERROR. Can't get a valid value for the default stacksize.\n");
     exit(7);
@@ -271,11 +272,11 @@
   if (JNI_CreateJavaVM (&_jvm, (void **)&env, &vm_args) < 0 ) {
     fprintf(stderr, "Test ERROR. Can't create JavaVM\n");
     exit(7);
   }
 
-  int stack_size = get_java_stacksize();
+  size_t stack_size = get_java_stacksize();
   pthread_t thr;
   pthread_attr_t thread_attr;
 
   pthread_attr_init(&thread_attr);
   pthread_attr_setstacksize(&thread_attr, stack_size);
@@ -283,12 +284,12 @@
   if (argc > 1 && strcmp(argv[1], "test_java_overflow") == 0) {
     printf("\nTesting JAVA_OVERFLOW\n");
 
     printf("Testing stack guard page behaviour for other thread\n");
 
-    pthread_create (&thr, &thread_attr, run_java_overflow, NULL);
-    pthread_join (thr, NULL);
+    pthread_create(&thr, &thread_attr, run_java_overflow, NULL);
+    pthread_join(thr, NULL);
 
     printf("Testing stack guard page behaviour for initial thread\n");
     run_java_overflow(NULL);
     // This test crash on error
     exit(0);
@@ -296,12 +297,12 @@
 
   if (argc > 1 && strcmp(argv[1], "test_native_overflow") == 0) {
     printf("\nTesting NATIVE_OVERFLOW\n");
 
     printf("Testing stack guard page behaviour for other thread\n");
-    pthread_create (&thr, &thread_attr, run_native_overflow, NULL);
-    pthread_join (thr, NULL);
+    pthread_create(&thr, &thread_attr, run_native_overflow, NULL);
+    pthread_join(thr, NULL);
 
     printf("Testing stack guard page behaviour for initial thread\n");
     run_native_overflow(NULL);
 
     exit((_failures > 0) ? 1 : 0);
