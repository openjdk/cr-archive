diff a/test/jdk/tools/launcher/Test7029048.java b/test/jdk/tools/launcher/Test7029048.java
--- a/test/jdk/tools/launcher/Test7029048.java
+++ b/test/jdk/tools/launcher/Test7029048.java
@@ -39,13 +39,10 @@
 import java.util.List;
 import java.util.Map;
 
 public class Test7029048 extends TestHelper {
 
-    static int passes = 0;
-    static int errors = 0;
-
     private static final String LIBJVM = ExecutionEnvironment.LIBJVM;
     private static final String LD_LIBRARY_PATH =
             ExecutionEnvironment.LD_LIBRARY_PATH;
     private static final String LD_LIBRARY_PATH_64 =
             ExecutionEnvironment.LD_LIBRARY_PATH_64;
@@ -60,57 +57,59 @@
     private static final File dstServerLibjvm = new File(dstServerDir, LIBJVM);
 
     private static final File dstClientDir = new File(dstLibDir, "client");
     private static final File dstClientLibjvm = new File(dstClientDir, LIBJVM);
 
-    private static final Map<String, String> env = new HashMap<>();
-
     static String getValue(String name, List<String> in) {
         for (String x : in) {
             String[] s = x.split("=");
             if (name.equals(s[0].trim())) {
                 return s[1].trim();
             }
         }
         return null;
     }
 
-    static void run(Map<String, String> env,
-            int nLLPComponents, String caseID) {
+    static boolean run(int nLLPComponents, File variantDir, String caseID) {
+
+        Map<String, String> env = new HashMap<>();
+        env.put(LD_LIBRARY_PATH, variantDir.getAbsolutePath());
         env.put(ExecutionEnvironment.JLDEBUG_KEY, "true");
         List<String> cmdsList = new ArrayList<>();
         cmdsList.add(javaCmd);
         cmdsList.add("-server");
         cmdsList.add("-jar");
         cmdsList.add(ExecutionEnvironment.testJarFile.getAbsolutePath());
         String[] cmds = new String[cmdsList.size()];
         TestResult tr = doExec(env, cmdsList.toArray(cmds));
         System.out.println(tr);
-        analyze(tr, nLLPComponents, caseID);
+        int len = getLLPComponents(tr);
+        if (len == nLLPComponents) {
+            System.out.printf("Test7029048 OK %s%n", caseID);
+            return true;
+        } else {
+            System.out.printf("Test7029048 FAIL %s: expected %d but got %d%n",
+                    caseID, nLLPComponents, len);
+            return false;
+        }
     }
 
-    static void analyze(TestResult tr, int nLLPComponents, String caseID) {
+    static int getLLPComponents(TestResult tr) {
         String envValue = getValue(LD_LIBRARY_PATH, tr.testOutput);
        /*
         * the envValue can never be null, since the test code should always
         * print a "null" string.
         */
         if (envValue == null) {
             throw new RuntimeException("NPE, likely a program crash ??");
         }
-        int len = (envValue.equals("null")
-                   ? 0 : envValue.split(File.pathSeparator).length);
-        if (len == nLLPComponents) {
-            System.out.println(caseID + ": OK");
-            passes++;
-        } else {
-            System.out.println("FAIL: test7029048, " + caseID);
-            System.out.println(" expected " + nLLPComponents
-                               + " but got " + len);
-            System.out.println(envValue);
-            errors++;
+
+        if (envValue.equals("null")) {
+            return 0;
         }
+
+        return envValue.split(File.pathSeparator).length;
     }
 
     /*
      * Describe the cases that we test.  Each case sets the environment
      * variable LD_LIBRARY_PATH to a different value.  The value associated
@@ -128,12 +127,13 @@
     }
 
     /*
      * test for 7029048
      */
-    static void test7029048() throws IOException {
+    static boolean runTest() throws IOException {
         String desc = null;
+        boolean pass = true;
         for (TestCase v : TestCase.values()) {
             switch (v) {
                 case LIBJVM:
                     // copy the files into the directory structures
                     copyFile(srcLibjvmSo, dstServerLibjvm);
@@ -154,49 +154,49 @@
                         Files.deleteIfExists(dstServerLibjvm.toPath());
                     }
 
                     desc = "LD_LIBRARY_PATH should not be set (no libjvm.so)";
                     if (TestHelper.isExpandedSharedLibraryPath) {
-                        System.out.println("Skipping test case \"" + desc +
-                                           "\" because the Aix and Musl launchers add the paths in any case.");
+                        printSkipMessage(desc);
                         continue;
                     }
                     break;
                 case NO_DIR:
                     if (dstLibDir.exists()) {
                         recursiveDelete(dstLibDir);
                     }
                     desc = "LD_LIBRARY_PATH should not be set (no directory)";
                     if (TestHelper.isExpandedSharedLibraryPath) {
-                        System.out.println("Skipping test case \"" + desc +
-                                           "\" because the Aix and Musl launchers add the paths in any case.");
+                        printSkipMessage(desc);
                         continue;
                     }
                     break;
                 default:
                     throw new RuntimeException("unknown case");
             }
 
+            // Add one to account for our setting
+            int nLLPComponents = v.value + 1;
+
             /*
              * Case 1: set the server path
              */
-            env.clear();
-            env.put(LD_LIBRARY_PATH, dstServerDir.getAbsolutePath());
-            run(env,
-                v.value + 1,            // Add one to account for our setting
-                "Case 1: " + desc);
+            boolean pass1 = run(nLLPComponents, dstServerDir, "Case 1: " + desc);
 
             /*
              * Case 2: repeat with client path
              */
-            env.clear();
-            env.put(LD_LIBRARY_PATH, dstClientDir.getAbsolutePath());
-            run(env,
-                v.value + 1,            // Add one to account for our setting
-                "Case 2: " + desc);
+            boolean pass2 = run(nLLPComponents, dstClientDir, "Case 2: " + desc);
+
+            pass &= pass1 && pass2;
         }
-        return;
+        return pass;
+    }
+
+    private static void printSkipMessage(String description) {
+        System.out.printf("Skipping test case '%s' because the Aix launcher" +
+                          " adds the paths in any case.%n", description);
     }
 
     public static void main(String... args) throws Exception {
         if (TestHelper.isWindows || TestHelper.isMacOSX) {
             System.out.println("Note: applicable on neither Windows nor MacOSX");
@@ -207,21 +207,10 @@
             return;
         }
         // create our test jar first
         ExecutionEnvironment.createTestJar();
 
-        // run the tests
-        test7029048();
-
-        int passesLinux = TestHelper.isMusl ? 2 : 6;
-
-        if (errors > 0) {
-            throw new Exception("Test7029048: FAIL: with "
-                    + errors + " errors and passes " + passes);
-        } else if (isLinux && passes < passesLinux) {
-             throw new Exception("Test7029048: FAIL: " +
-                    "all tests did not run, expected " + passesLinux + " got " + passes);
-        } else {
-            System.out.println("Test7029048: PASS " + passes);
+        if (!runTest()) {
+            throw new Exception("Test7029048 fails");
         }
     }
 }
