diff a/test/hotspot/jtreg/runtime/TLS/exestack-tls.c b/test/hotspot/jtreg/runtime/TLS/exestack-tls.c
--- a/test/hotspot/jtreg/runtime/TLS/exestack-tls.c
+++ b/test/hotspot/jtreg/runtime/TLS/exestack-tls.c
@@ -24,11 +24,14 @@
 
 #include <jni.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+
+#ifdef __GLIBC__
 #include <gnu/libc-version.h>
+#endif
 
 // Declare the thread local variable(s) in the main executable. This can be
 // used to demonstrate the issues associated with the on-stack static TLS blocks
 // that may cause insufficient stack space. The dynamic TLS blocks for shared
 // objects (such as a JNI library) loaded via dlopen are not allocated on stack.
@@ -52,10 +55,11 @@
     rv = JNI_CreateJavaVM(jvm, (void**)&env, &args);
     if (rv < 0) return NULL;
     return env;
 }
 
+#if defined(__GLIBC)
 // glibc 2.15 introduced __pthread_get_minstack
 int glibc_has_pthread_get_minstack() {
   const char* glibc_vers = gnu_get_libc_version();
   const int glibc_vers_major = atoi(glibc_vers);
   const int glibc_vers_minor = atoi(strchr(glibc_vers, '.') + 1);;
@@ -64,10 +68,15 @@
     return 1;
   }
   printf("This version does not provide __pthread_get_minstack\n");
   return 0;
 }
+#else
+int glibc_has_pthread_get_minstack() {
+  return 0;
+}
+#endif
 
 int run(jboolean addTLS) {
     JavaVM *jvm;
     jclass testClass;
     jmethodID runMethod;
