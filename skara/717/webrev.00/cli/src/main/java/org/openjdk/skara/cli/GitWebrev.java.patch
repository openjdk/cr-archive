diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -133,10 +133,14 @@
                   .optional(),
             Switch.shortcut("m")
                   .fullname("mercurial")
                   .helptext("Deprecated: force use of mercurial")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("json")
+                  .helptext("Generate a JSON description instead of HTML")
+                  .optional(),
             Switch.shortcut("C")
                   .fullname("no-comments")
                   .helptext("Don't show comments")
                   .optional(),
             Switch.shortcut("N")
@@ -183,34 +187,48 @@
             System.exit(1);
         }
         var repo = repository.get();
         var isMercurial = arguments.contains("mercurial");
 
+
+        URI upstreamPullPath = null;
+        URI originPullPath = null;
+        var remotes = repo.remotes();
+        if (remotes.contains("upstream")) {
+            upstreamPullPath = Remote.toWebURI(repo.pullPath("upstream"));
+        }
+        if (remotes.contains("origin") || remotes.contains("default")) {
+            var remote = isMercurial ? "default" : "origin";
+            originPullPath = Remote.toWebURI(repo.pullPath(remote));
+        }
+
+        if (arguments.contains("json") &&
+            (upstreamPullPath == null || originPullPath == null)) {
+            System.err.println("error: --json requires remotes 'upstream' and 'origin' to be present");
+            System.exit(1);
+        }
+
         var upstream = arg("upstream", arguments, repo);
         if (upstream == null) {
-            var remotes = repo.remotes();
-            if (remotes.contains("upstream")) {
-                var pullPath = Remote.toWebURI(repo.pullPath("upstream"));
-                var host = pullPath.getHost();
+            if (upstreamPullPath != null) {
+                var host = upstreamPullPath.getHost();
                 if (host != null && host.endsWith("openjdk.java.net")) {
-                    upstream = pullPath.toString();
+                    upstream = upstreamPullPath.toString();
                 } else if (host != null && host.equals("github.com")) {
-                    var path = pullPath.getPath();
+                    var path = upstreamPullPath.getPath();
                     if (path != null && path.startsWith("/openjdk/")) {
-                        upstream = pullPath.toString();
+                        upstream = upstreamPullPath.toString();
                     }
                 }
-            } else if (remotes.contains("origin") || remotes.contains("default")) {
-                var remote = isMercurial ? "default" : "origin";
-                var pullPath = Remote.toWebURI(repo.pullPath(remote));
-                var host = pullPath.getHost();
+            } else if (originPullPath != null) {
+                var host = originPullPath.getHost();
                 if (host != null && host.endsWith("openjdk.java.net")) {
-                    upstream = pullPath.toString();
+                    upstream = originPullPath.toString();
                 } else if (host != null && host.equals("github.com")) {
-                    var path = pullPath.getPath();
+                    var path = originPullPath.getPath();
                     if (path != null && path.startsWith("/openjdk/")) {
-                        upstream = pullPath.toString();
+                        upstream = originPullPath.toString();
                     }
                 }
             }
         }
         var upstreamURL = upstream;
@@ -242,11 +260,10 @@
                     if (currentUpstreamBranch.isPresent()) {
                         rev = resolve(repo, currentUpstreamBranch.get());
                     } else {
                         String remote = arg("remote", arguments, repo);
                         if (remote == null) {
-                            var remotes = repo.remotes();
                             if (remotes.size() == 0) {
                                 System.err.println("error: no remotes present, cannot figure out outgoing changes");
                                 System.err.println("       Use --rev to specify revision to compare against");
                                 System.exit(1);
                             } else if (remotes.size() == 1) {
@@ -354,21 +371,31 @@
 
         var jbs = "https://bugs.openjdk.java.net/browse/";
         var issueParts = issue != null ? issue.split("-") : new String[0];
         var jbsProject = issueParts.length == 2 && KNOWN_JBS_PROJECTS.contains(issueParts[0])?
             issueParts[0] : "JDK";
-        Webrev.repository(repo)
-              .output(output)
-              .title(title)
-              .upstream(upstream)
-              .username(author.name())
-              .commitLinker(hash -> upstreamURL == null ? null : upstreamURL + "/commit/" + hash)
-              .issueLinker(id -> jbs + (isDigit(id.charAt(0)) ? jbsProject + "-" : "") + id)
-              .issue(issue)
-              .version(version)
-              .files(files)
-              .generate(rev);
+        if (arguments.contains("json")) {
+            var upstreamName = upstreamPullPath.getPath().substring(1);
+            var originName = originPullPath.getPath().substring(1);
+            Webrev.repository(repo)
+                  .output(output)
+                  .upstream(upstreamPullPath, upstreamName)
+                  .fork(originPullPath, originName)
+                  .generateJSON(rev, repo.head());
+        } else {
+            Webrev.repository(repo)
+                  .output(output)
+                  .title(title)
+                  .upstream(upstream)
+                  .username(author.name())
+                  .commitLinker(hash -> upstreamURL == null ? null : upstreamURL + "/commit/" + hash)
+                  .issueLinker(id -> jbs + (isDigit(id.charAt(0)) ? jbsProject + "-" : "") + id)
+                  .issue(issue)
+                  .version(version)
+                  .files(files)
+                  .generate(rev);
+        }
     }
 
     private static void apply(String[] args) throws Exception {
         var inputs = List.of(
             Input.position(0)
