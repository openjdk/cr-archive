diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
@@ -77,11 +77,12 @@
                                       .collect(Collectors.toSet());
         var listArchive = URIBuilder.base(specific.get("server").get("archive").asString()).build();
         var listSmtp = specific.get("server").get("smtp").asString();
         var interval = specific.get("server").contains("interval") ? Duration.parse(specific.get("server").get("interval").asString()) : Duration.ofSeconds(1);
 
-        var webrevRepo = configuration.repository(specific.get("webrevs").get("repository").asString());
+        var webrevHTMLRepo = configuration.repository(specific.get("webrevs").get("repository").get("html").asString());
+        var webrevJSONRepo = configuration.repository(specific.get("webrevs").get("repository").get("json").asString());
         var webrevRef = configuration.repositoryRef(specific.get("webrevs").get("repository").asString());
         var webrevWeb = specific.get("webrevs").get("web").asString();
 
         var archiveRepo = configuration.repository(specific.get("archive").asString());
         var archiveRef = configuration.repositoryRef(specific.get("archive").asString());
@@ -108,10 +109,21 @@
                     repoConfig.get("headers").fields().stream()
                               .collect(Collectors.toMap(JSONObject.Field::name, field -> field.value().asString())) :
                     Map.of();
             var lists = parseLists(repoConfig.get("lists"));
             var folder = repoConfig.contains("folder") ? repoConfig.get("folder").asString() : configuration.repositoryName(repo);
+
+            var webrevGenerateHTML = true;
+            if (repoConfig.contains("webrev") &&
+                repoConfig.get("webrev").contains("html") &&
+                repoConfig.get("webrev").get("html").asBoolean() == false) {
+                webrevGenerateHTML = false;
+            }
+            var webrevGenerateJSON = repoConfig.contains("webrev") &&
+                                     repoConfig.get("webrev").contains("json") &&
+                                     repoConfig.get("webrev").get("json").asBoolean();
+
             var botBuilder = MailingListBridgeBot.newBuilder().from(from)
                                                  .repo(configuration.repository(repo))
                                                  .archive(archiveRepo)
                                                  .archiveRef(archiveRef)
                                                  .censusRepo(censusRepo)
@@ -119,14 +131,17 @@
                                                  .lists(lists)
                                                  .ignoredUsers(ignoredUsers)
                                                  .ignoredComments(ignoredComments)
                                                  .listArchive(listArchive)
                                                  .smtpServer(listSmtp)
-                                                 .webrevStorageRepository(webrevRepo)
+                                                 .webrevStorageHTMLRepository(webrevHTMLRepo)
+                                                 .webrevStorageJSONRepository(webrevJSONRepo)
                                                  .webrevStorageRef(webrevRef)
                                                  .webrevStorageBase(Path.of(folder))
                                                  .webrevStorageBaseUri(URIBuilder.base(webrevWeb).build())
+                                                 .webrevGenerateHTML(webrevGenerateHTML)
+                                                 .webrevGenerateJSON(webrevGenerateJSON)
                                                  .readyLabels(readyLabels)
                                                  .readyComments(readyComments)
                                                  .issueTracker(issueTracker)
                                                  .headers(headers)
                                                  .sendInterval(interval)
