diff a/cli/build.gradle b/cli/build.gradle
--- a/cli/build.gradle
+++ b/cli/build.gradle
@@ -60,11 +60,12 @@
         'hg-openjdk-import': 'org.openjdk.skara.cli/org.openjdk.skara.cli.HgOpenJDKImport',
         'git-sync': 'org.openjdk.skara.cli/org.openjdk.skara.cli.GitSync',
         'git-publish': 'org.openjdk.skara.cli/org.openjdk.skara.cli.GitPublish',
         'git-proxy': 'org.openjdk.skara.cli/org.openjdk.skara.cli.GitProxy',
         'git-trees': 'org.openjdk.skara.cli/org.openjdk.skara.cli.GitTrees',
-        'git-expand': 'org.openjdk.skara.cli/org.openjdk.skara.cli.GitExpand'
+        'git-expand': 'org.openjdk.skara.cli/org.openjdk.skara.cli.GitExpand',
+        'git-hg-export': 'org.openjdk.skara.cli/org.openjdk.skara.cli.GitHgExport'
     ]
 
     ext.modules = ['jdk.crypto.ec']
 
     windows_x64 {
diff a/cli/src/main/java/org/openjdk/skara/cli/GitHgExport.java b/cli/src/main/java/org/openjdk/skara/cli/GitHgExport.java
--- /dev/null
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitHgExport.java
@@ -0,0 +1,124 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.cli;
+
+import org.openjdk.skara.args.*;
+import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.*;
+import org.openjdk.skara.version.Version;
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.logging.Level;
+import java.time.format.DateTimeFormatter;
+
+public class GitHgExport {
+    private static void die(String msg) {
+        System.err.println("error: " + msg);
+        System.exit(1);
+    }
+
+    public static void main(String[] args) throws IOException, InterruptedException {
+        var flags = List.of(
+            Switch.shortcut("")
+                  .fullname("verbose")
+                  .helptext("Turn on verbose output")
+                  .optional(),
+            Switch.shortcut("")
+                  .fullname("debug")
+                  .helptext("Turn on debugging output")
+                  .optional(),
+            Switch.shortcut("")
+                  .fullname("version")
+                  .helptext("Print the version of this tool")
+                  .optional());
+
+        var inputs = List.of(
+            Input.position(0)
+                 .describe("REV")
+                 .singular()
+                 .required()
+        );
+
+        var parser = new ArgumentParser("git-hg-export", flags, inputs);
+        var arguments = parser.parse(args);
+
+        if (arguments.contains("version")) {
+            System.out.println("git-hg-export version: " + Version.fromManifest().orElse("unknown"));
+            System.exit(0);
+        }
+
+        if (arguments.contains("verbose") || arguments.contains("debug")) {
+            var level = arguments.contains("debug") ? Level.FINER : Level.FINE;
+            Logging.setup(level);
+        }
+
+        var ref = arguments.at(0).orString("HEAD");
+        var cwd = Path.of("").toAbsolutePath();
+        var repo = ReadOnlyRepository.get(cwd);
+        if (repo.isEmpty()) {
+            die("no repository present at: " + cwd);
+        }
+        var hash = repo.get().resolve(ref);
+        if (hash.isEmpty()) {
+            die(ref + " does not refer to a commit");
+        }
+        var commit = repo.get().lookup(hash.get());
+        if (commit.isEmpty()) {
+            die("internal error - could not lookup " + hash.get());
+        }
+
+        var c = commit.get();
+        var committer = c.committer();
+        if (committer.email() == null || !committer.email().endsWith("@openjdk.org")) {
+            die("commiter is not an OpenJDK committer");
+        }
+        var username = committer.email().split("@")[0];
+        var date = c.committed();
+        var dateFormatter = DateTimeFormatter.ofPattern("EE MMM HH:mm:ss yyyy xx");
+
+        System.out.println("# HG changeset patch");
+        System.out.println("# User " + username);
+        System.out.println("# Date " + date.toEpochSecond() + " " + (-1 * date.getOffset().getTotalSeconds()));
+        System.out.println("#      " + date.format(dateFormatter));
+
+        var message = CommitMessageParsers.v1.parse(c);
+        if (!c.author().equals(committer)) {
+            message.addContributor(c.author());
+        }
+        for (var line : CommitMessageFormatters.v0.format(message)) {
+            System.out.println(line);
+        }
+        System.out.println("");
+        var pb = new ProcessBuilder("git", "diff", "--patch",
+                                                   "--binary",
+                                                   "--no-color",
+                                                   "--find-renames=99%",
+                                                   "--find-copies=99%",
+                                                   "--find-copies-harder",
+                                                   repo.get().range(c.hash()));
+        pb.inheritIO();
+        System.exit(pb.start().waitFor());
+    }
+}
diff a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
@@ -198,10 +198,11 @@
         commands.put("translate", GitTranslate::main);
         commands.put("sync", GitSync::main);
         commands.put("publish", GitPublish::main);
         commands.put("proxy", GitProxy::main);
         commands.put("trees", GitTrees::main);
+        commands.put("hg-export", GitHgExport::main);
 
         commands.put("update", GitSkara::update);
         commands.put("help", GitSkara::usage);
         commands.put("version", GitSkara::version);
 
diff a/skara.gitconfig b/skara.gitconfig
--- a/skara.gitconfig
+++ b/skara.gitconfig
@@ -33,10 +33,11 @@
         translate = ! git skara translate
         sync = ! git skara sync
         publish = ! git skara publish
         proxy = ! git skara proxy
         trees = ! git skara trees
+        hg-export = ! git skara hg-export
 
         tcommit = trees commit
         tconfig = trees config
         tdiff = trees diff
         tlog = trees log
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessage.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessage.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessage.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessage.java
@@ -62,10 +62,14 @@
 
     public List<Author> contributors() {
         return contributors;
     }
 
+    public void addContributor(Author contributor) {
+        contributors.add(contributor);
+    }
+
     public List<String> summaries() {
         return summaries;
     }
 
     public List<String> additional() {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java
@@ -28,13 +28,10 @@
 import java.util.stream.Collectors;
 
 public class CommitMessageFormatters {
     public static class V0 implements CommitMessageFormatter {
         public List<String> format(CommitMessage message) {
-            if (message.title() != null) {
-                throw new IllegalArgumentException("Can't format title, must use issues as title");
-            }
             if (message.issues().isEmpty()) {
                 throw new IllegalArgumentException("Must supply at least one issue");
             }
 
             var lines = new ArrayList<String>();
