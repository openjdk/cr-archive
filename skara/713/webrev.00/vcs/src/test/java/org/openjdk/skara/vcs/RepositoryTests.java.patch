diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -288,13 +288,14 @@
 
             var diff = diffs.get(0);
             assertEquals(Hash.zero(), diff.from());
             assertEquals(hash, diff.to());
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(1, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(1, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -366,13 +367,14 @@
 
             var diff = diffs.get(0);
             assertEquals(hash1, diff.from());
             assertEquals(hash2, diff.to());
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(1, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(1, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -444,13 +446,14 @@
 
             var diff = diffs.get(0);
             assertEquals(hash1, diff.from());
             assertEquals(head.hash(), diff.to());
 
-            assertEquals(2, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(0, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(2, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(0, stats.added());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -498,13 +501,14 @@
 
             var diff = diffs.get(0);
             assertEquals(hash1, diff.from());
             assertEquals(head.hash(), diff.to());
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(2, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(2, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -605,13 +609,14 @@
 
             var diffs = head.parentDiffs();
             assertEquals(1, diffs.size());
             var diff = diffs.get(0);
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(1, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(1, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
             var patch = patches.get(0).asTextualPatch();
             assertEquals(Path.of("CONTRIBUTING"), patch.target().path().get());
@@ -897,13 +902,14 @@
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("One more line"), hunk.target().lines());
 
-            assertEquals(1, hunk.added());
-            assertEquals(0, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(1, stats.added());
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1014,26 +1020,28 @@
 
             assertEquals(1, hunk1.target().range().start());
             assertEquals(2, hunk1.target().range().count());
             assertLinesEquals(List.of("1", "2"), hunk1.target().lines());
 
-            assertEquals(1, hunk1.added());
-            assertEquals(0, hunk1.removed());
-            assertEquals(1, hunk1.modified());
+            var stats1 = hunk1.stats();
+            assertEquals(1, stats1.added());
+            assertEquals(0, stats1.removed());
+            assertEquals(1, stats1.modified());
 
             var hunk2 = hunks.get(1);
             assertEquals(3, hunk2.source().range().start());
             assertEquals(1, hunk2.source().range().count());
             assertLinesEquals(List.of("C"), hunk2.source().lines());
 
             assertEquals(4, hunk2.target().range().start());
             assertEquals(1, hunk2.target().range().count());
             assertLinesEquals(List.of("3"), hunk2.target().lines());
 
-            assertEquals(0, hunk2.added());
-            assertEquals(0, hunk2.removed());
-            assertEquals(1, hunk2.modified());
+            var stats2 = hunk2.stats();
+            assertEquals(0, stats2.added());
+            assertEquals(0, stats2.removed());
+            assertEquals(1, stats2.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1075,13 +1083,14 @@
 
             assertEquals(0, hunk.target().range().start());
             assertEquals(0, hunk.target().range().count());
             assertLinesEquals(List.of(), hunk.target().lines());
 
-            assertEquals(0, hunk.added());
-            assertEquals(1, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(0, stats.added());
+            assertEquals(1, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1124,13 +1133,14 @@
 
             assertEquals(1, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("make"), hunk.target().lines());
 
-            assertEquals(1, hunk.added());
-            assertEquals(0, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(1, stats.added());
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1170,13 +1180,14 @@
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("One more line"), hunk.target().lines());
 
-            assertEquals(1, hunk.added());
-            assertEquals(0, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(1, stats.added());
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1783,11 +1794,11 @@
             assertEquals(1, commits.size());
 
             var commit = commits.get(0);
             var diffs = commit.parentDiffs();
             var diff = diffs.get(0);
-            assertEquals(2, diff.added());
+            assertEquals(2, diff.totalStats().added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -2024,13 +2035,14 @@
             var first = repo.commit("Added README and CONTRIBUTE", "duke", "duke@openjdk.org");
             Files.writeString(readme, "World\n", WRITE, APPEND);
             Files.writeString(contribute, "2. Run git commit", WRITE, APPEND);
 
             var diff = repo.diff(first, List.of(Path.of("README")));
-            assertEquals(1, diff.added());
-            assertEquals(0, diff.modified());
-            assertEquals(0, diff.removed());
+            var diffStats = diff.totalStats();
+            assertEquals(1, diffStats.added());
+            assertEquals(0, diffStats.modified());
+            assertEquals(0, diffStats.removed());
             var patches = diff.patches();
             assertEquals(1, patches.size());
             var patch = patches.get(0);
             assertTrue(patch.isTextual());
             assertTrue(patch.status().isModified());
@@ -2040,13 +2052,14 @@
             repo.add(readme);
             repo.add(contribute);
             var second = repo.commit("Updates to both README and CONTRIBUTE", "duke", "duke@openjdk.org");
 
             diff = repo.diff(first, second, List.of(Path.of("CONTRIBUTE")));
-            assertEquals(1, diff.added());
-            assertEquals(0, diff.modified());
-            assertEquals(0, diff.removed());
+            diffStats = diff.totalStats();
+            assertEquals(1, diffStats.added());
+            assertEquals(0, diffStats.modified());
+            assertEquals(0, diffStats.removed());
             patches = diff.patches();
             assertEquals(1, patches.size());
             patch = patches.get(0);
             assertTrue(patch.isTextual());
             assertTrue(patch.status().isModified());
