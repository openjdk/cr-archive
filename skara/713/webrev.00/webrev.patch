diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -139,13 +139,14 @@
     }
 
     private static String stats(Repository localRepo, Hash base, Hash head) {
         try {
             var diff = localRepo.diff(base, head);
-            var inserted = diff.added();
-            var deleted = diff.removed();
-            var modified = diff.modified();
+            var diffStats = diff.totalStats();
+            var inserted = diffStats.added();
+            var deleted = diffStats.removed();
+            var modified = diffStats.modified();
             var linesChanged = inserted + deleted + modified;
             var filesChanged = diff.patches().size();
             return String.format("%d line%s in %d file%s changed: %d ins; %d del; %d mod",
                                  linesChanged,
                                  linesChanged == 1 ? "" : "s",
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Diff.java b/vcs/src/main/java/org/openjdk/skara/vcs/Diff.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Diff.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Diff.java
@@ -54,28 +54,23 @@
 
     public List<Patch> patches() {
         return patches;
     }
 
-    public List<PatchStats> stats() {
+    public List<WebrevStats> stats() {
         return patches().stream()
                         .filter(Patch::isTextual)
                         .map(Patch::asTextualPatch)
                         .map(TextualPatch::stats)
                         .collect(Collectors.toList());
     }
 
-    public int added() {
-        return stats().stream().mapToInt(PatchStats::added).sum();
-    }
-
-    public int modified() {
-        return stats().stream().mapToInt(PatchStats::modified).sum();
-    }
-
-    public int removed() {
-        return stats().stream().mapToInt(PatchStats::removed).sum();
+    public WebrevStats totalStats() {
+        var added = stats().stream().mapToInt(WebrevStats::added).sum();
+        var removed = stats().stream().mapToInt(WebrevStats::removed).sum();
+        var modified = stats().stream().mapToInt(WebrevStats::modified).sum();
+        return new WebrevStats(added, removed, modified);
     }
 
     public void write(BufferedWriter w) throws IOException {
         for (var patch : patches()) {
             patch.write(w);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Hunk.java b/vcs/src/main/java/org/openjdk/skara/vcs/Hunk.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Hunk.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Hunk.java
@@ -71,21 +71,18 @@
 
     public Info target() {
         return target;
     }
 
-    public int modified() {
-        return Math.min(source.lines().size(), target.lines().size());
+    public WebrevStats stats() {
+        var modified = Math.min(source.lines().size(), target.lines().size());
+        var added = target.lines().size() - modified;
+        var removed = source.lines().size() - modified;
+        return new WebrevStats(added, removed, modified);
     }
 
-    public int added() {
-        return target.lines().size() - modified();
-    }
 
-    public int removed() {
-        return source.lines().size() - modified();
-    }
 
     public void write(BufferedWriter w) throws IOException {
         w.append("@@ -");
         w.append(source.range().toString());
         w.append(" +");
diff a/vcs/src/main/java/org/openjdk/skara/vcs/PatchStats.java b/vcs/src/main/java/org/openjdk/skara/vcs/PatchStats.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/PatchStats.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.vcs;
-
-import java.nio.file.Path;
-import java.util.Objects;
-
-public class PatchStats {
-    private final Path path;
-    private final int added;
-    private final int removed;
-    private final int modified;
-
-    public PatchStats(Path path, int added, int removed, int modified) {
-        this.path = path;
-        this.added = added;
-        this.removed = removed;
-        this.modified = modified;
-    }
-
-    public Path path() {
-        return path;
-    }
-
-    public int added() {
-        return added;
-    }
-
-    public int removed() {
-        return removed;
-    }
-
-    public int modified() {
-        return modified;
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(path, added, removed, modified);
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        if (other == this) {
-            return true;
-        }
-
-        if (!(other instanceof PatchStats)) {
-            return false;
-        }
-
-        var o = (PatchStats) other;
-        return Objects.equals(path, o.path) &&
-               Objects.equals(added, o.added) &&
-               Objects.equals(removed, o.removed) &&
-               Objects.equals(modified, o.modified);
-    }
-}
diff a/vcs/src/main/java/org/openjdk/skara/vcs/TextualPatch.java b/vcs/src/main/java/org/openjdk/skara/vcs/TextualPatch.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/TextualPatch.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/TextualPatch.java
@@ -47,20 +47,20 @@
     @Override
     public boolean isEmpty() {
         return hunks.isEmpty();
     }
 
-    public PatchStats stats() {
+    public WebrevStats stats() {
         int added = 0;
         int removed = 0;
         int modified = 0;
 
         for (var hunk : hunks()) {
-            added += hunk.added();
-            removed += hunk.removed();
-            modified += hunk.modified();
+            var stats = hunk.stats();
+            added += stats.added();
+            removed += stats.removed();
+            modified += stats.modified();
         }
 
-        var path = target().path().isPresent() ? target().path().get() : source().path().get();
-        return new PatchStats(path, added, removed, modified);
+        return new WebrevStats(added, removed, modified);
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/WebrevStats.java b/vcs/src/main/java/org/openjdk/skara/vcs/WebrevStats.java
--- /dev/null
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/WebrevStats.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.vcs;
+
+import java.nio.file.Path;
+import java.util.Objects;
+import java.util.Optional;
+
+public class WebrevStats {
+    private final int added;
+    private final int removed;
+    private final int modified;
+
+    public WebrevStats(int added, int removed, int modified) {
+        this.added = added;
+        this.removed = removed;
+        this.modified = modified;
+    }
+
+    public int added() {
+        return added;
+    }
+
+    public int removed() {
+        return removed;
+    }
+
+    public int modified() {
+        return modified;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(added, removed, modified);
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        if (other == this) {
+            return true;
+        }
+
+        if (!(other instanceof WebrevStats)) {
+            return false;
+        }
+
+        var o = (WebrevStats) other;
+        return Objects.equals(added, o.added) &&
+               Objects.equals(removed, o.removed) &&
+               Objects.equals(modified, o.modified);
+    }
+}
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -288,13 +288,14 @@
 
             var diff = diffs.get(0);
             assertEquals(Hash.zero(), diff.from());
             assertEquals(hash, diff.to());
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(1, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(1, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -366,13 +367,14 @@
 
             var diff = diffs.get(0);
             assertEquals(hash1, diff.from());
             assertEquals(hash2, diff.to());
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(1, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(1, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -444,13 +446,14 @@
 
             var diff = diffs.get(0);
             assertEquals(hash1, diff.from());
             assertEquals(head.hash(), diff.to());
 
-            assertEquals(2, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(0, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(2, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(0, stats.added());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -498,13 +501,14 @@
 
             var diff = diffs.get(0);
             assertEquals(hash1, diff.from());
             assertEquals(head.hash(), diff.to());
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(2, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(2, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -605,13 +609,14 @@
 
             var diffs = head.parentDiffs();
             assertEquals(1, diffs.size());
             var diff = diffs.get(0);
 
-            assertEquals(0, diff.removed());
-            assertEquals(0, diff.modified());
-            assertEquals(1, diff.added());
+            var stats = diff.totalStats();
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
+            assertEquals(1, stats.added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
             var patch = patches.get(0).asTextualPatch();
             assertEquals(Path.of("CONTRIBUTING"), patch.target().path().get());
@@ -897,13 +902,14 @@
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("One more line"), hunk.target().lines());
 
-            assertEquals(1, hunk.added());
-            assertEquals(0, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(1, stats.added());
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1014,26 +1020,28 @@
 
             assertEquals(1, hunk1.target().range().start());
             assertEquals(2, hunk1.target().range().count());
             assertLinesEquals(List.of("1", "2"), hunk1.target().lines());
 
-            assertEquals(1, hunk1.added());
-            assertEquals(0, hunk1.removed());
-            assertEquals(1, hunk1.modified());
+            var stats1 = hunk1.stats();
+            assertEquals(1, stats1.added());
+            assertEquals(0, stats1.removed());
+            assertEquals(1, stats1.modified());
 
             var hunk2 = hunks.get(1);
             assertEquals(3, hunk2.source().range().start());
             assertEquals(1, hunk2.source().range().count());
             assertLinesEquals(List.of("C"), hunk2.source().lines());
 
             assertEquals(4, hunk2.target().range().start());
             assertEquals(1, hunk2.target().range().count());
             assertLinesEquals(List.of("3"), hunk2.target().lines());
 
-            assertEquals(0, hunk2.added());
-            assertEquals(0, hunk2.removed());
-            assertEquals(1, hunk2.modified());
+            var stats2 = hunk2.stats();
+            assertEquals(0, stats2.added());
+            assertEquals(0, stats2.removed());
+            assertEquals(1, stats2.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1075,13 +1083,14 @@
 
             assertEquals(0, hunk.target().range().start());
             assertEquals(0, hunk.target().range().count());
             assertLinesEquals(List.of(), hunk.target().lines());
 
-            assertEquals(0, hunk.added());
-            assertEquals(1, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(0, stats.added());
+            assertEquals(1, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1124,13 +1133,14 @@
 
             assertEquals(1, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("make"), hunk.target().lines());
 
-            assertEquals(1, hunk.added());
-            assertEquals(0, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(1, stats.added());
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1170,13 +1180,14 @@
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("One more line"), hunk.target().lines());
 
-            assertEquals(1, hunk.added());
-            assertEquals(0, hunk.removed());
-            assertEquals(0, hunk.modified());
+            var stats = hunk.stats();
+            assertEquals(1, stats.added());
+            assertEquals(0, stats.removed());
+            assertEquals(0, stats.modified());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1783,11 +1794,11 @@
             assertEquals(1, commits.size());
 
             var commit = commits.get(0);
             var diffs = commit.parentDiffs();
             var diff = diffs.get(0);
-            assertEquals(2, diff.added());
+            assertEquals(2, diff.totalStats().added());
 
             var patches = diff.patches();
             assertEquals(1, patches.size());
 
             var patch = patches.get(0).asTextualPatch();
@@ -2024,13 +2035,14 @@
             var first = repo.commit("Added README and CONTRIBUTE", "duke", "duke@openjdk.org");
             Files.writeString(readme, "World\n", WRITE, APPEND);
             Files.writeString(contribute, "2. Run git commit", WRITE, APPEND);
 
             var diff = repo.diff(first, List.of(Path.of("README")));
-            assertEquals(1, diff.added());
-            assertEquals(0, diff.modified());
-            assertEquals(0, diff.removed());
+            var diffStats = diff.totalStats();
+            assertEquals(1, diffStats.added());
+            assertEquals(0, diffStats.modified());
+            assertEquals(0, diffStats.removed());
             var patches = diff.patches();
             assertEquals(1, patches.size());
             var patch = patches.get(0);
             assertTrue(patch.isTextual());
             assertTrue(patch.status().isModified());
@@ -2040,13 +2052,14 @@
             repo.add(readme);
             repo.add(contribute);
             var second = repo.commit("Updates to both README and CONTRIBUTE", "duke", "duke@openjdk.org");
 
             diff = repo.diff(first, second, List.of(Path.of("CONTRIBUTE")));
-            assertEquals(1, diff.added());
-            assertEquals(0, diff.modified());
-            assertEquals(0, diff.removed());
+            diffStats = diff.totalStats();
+            assertEquals(1, diffStats.added());
+            assertEquals(0, diffStats.modified());
+            assertEquals(0, diffStats.removed());
             patches = diff.patches();
             assertEquals(1, patches.size());
             patch = patches.get(0);
             assertTrue(patch.isTextual());
             assertTrue(patch.status().isModified());
diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
@@ -82,13 +82,15 @@
                         assertEquals(gitHunk.source().lines(), hgHunk.source().lines());
 
                         assertEquals(gitHunk.target().range(), hgHunk.target().range());
                         assertEquals(gitHunk.target().lines(), hgHunk.target().lines());
 
-                        assertEquals(gitHunk.added(), hgHunk.added());
-                        assertEquals(gitHunk.removed(), hgHunk.removed());
-                        assertEquals(gitHunk.modified(), hgHunk.modified());
+                        var hgStats = hgHunk.stats();
+                        var gitStats = gitHunk.stats();
+                        assertEquals(gitStats.added(), hgStats.added());
+                        assertEquals(gitStats.removed(), hgStats.removed());
+                        assertEquals(gitStats.modified(), hgStats.modified());
                     }
                 }
             }
         }
     }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
@@ -106,13 +106,15 @@
             assertEquals(hgHunk.source().lines(), gitHunk.source().lines());
 
             assertEquals(hgHunk.target().range(), gitHunk.target().range());
             assertEquals(hgHunk.target().lines(), gitHunk.target().lines());
 
-            assertEquals(hgHunk.added(), gitHunk.added());
-            assertEquals(hgHunk.removed(), gitHunk.removed());
-            assertEquals(hgHunk.modified(), gitHunk.modified());
+            var hgStats = hgHunk.stats();
+            var gitStats = gitHunk.stats();
+            assertEquals(hgStats.added(), gitStats.added());
+            assertEquals(hgStats.removed(), gitStats.removed());
+            assertEquals(hgStats.modified(), gitStats.modified());
         }
     }
 
     @Test
     void convertOneSponsoredCommit() throws IOException {
diff a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
@@ -36,11 +36,11 @@
     private final Path out;
     private final List<CommitMetadata> commits;
     private final MetadataFormatter formatter;
     private final List<String> newContent;
     private final byte[] binaryContent;
-    private final WebrevStats stats;
+    private final Stats stats;
 
     public AddedFileView(ReadOnlyRepository repo, Hash base, Hash head, List<CommitMetadata> commits, MetadataFormatter formatter, Patch patch, Path out) throws IOException {
         this.patch = patch;
         this.out = out;
         this.commits = commits;
@@ -64,24 +64,24 @@
                 }
                 newContent = lines;
             } else {
                 newContent = repo.lines(path, head).orElseThrow(IllegalArgumentException::new);
             }
-            stats = new WebrevStats(patch.asTextualPatch().stats(), newContent.size());
+            stats = new Stats(patch.asTextualPatch().stats(), newContent.size());
         } else {
             newContent = null;
             if (head == null) {
                 binaryContent = Files.readAllBytes(pathInRepo);
             } else {
                 binaryContent = repo.show(path, head).orElseThrow(IllegalArgumentException::new);
             }
-            stats = WebrevStats.empty();
+            stats = Stats.empty();
         }
     }
 
     @Override
-    public WebrevStats stats() {
+    public Stats stats() {
         return stats;
     }
 
 
     @Override
diff a/webrev/src/main/java/org/openjdk/skara/webrev/FileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/FileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/FileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/FileView.java
@@ -21,9 +21,9 @@
  * questions.
  */
 package org.openjdk.skara.webrev;
 
 interface FileView extends View {
-    WebrevStats stats();
+    Stats stats();
 }
 
 
diff a/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java b/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java
@@ -152,11 +152,11 @@
                      String issue,
                      String version,
                      Hash revision,
                      String revisionURL,
                      Path patchFile,
-                     WebrevStats stats) {
+                     Stats stats) {
         this.files = files;
         map = new HashMap<String, String>(); 
 
         if (user != null) {
             map.put("${USER}", user);
diff a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
@@ -38,11 +38,11 @@
     private final List<CommitMetadata> commits;
     private final MetadataFormatter formatter;
     private final List<String> oldContent;
     private final List<String> newContent;
     private final byte[] binaryContent;
-    private final WebrevStats stats;
+    private final Stats stats;
 
     public ModifiedFileView(ReadOnlyRepository repo, Hash base, Hash head, List<CommitMetadata> commits, MetadataFormatter formatter, Patch patch, Path out, Navigation navigation) throws IOException {
         this.patch = patch;
         this.out = out;
         this.navigation = navigation;
@@ -90,11 +90,11 @@
                     new IllegalArgumentException("Could not get content for file " +
                                                        patch.target().path().get() +
                                                        " at revision " + head)
                 );
             }
-            stats = new WebrevStats(patch.asTextualPatch().stats(), newContent.size());
+            stats = new Stats(patch.asTextualPatch().stats(), newContent.size());
         } else {
             oldContent = null;
             newContent = null;
             if (head == null) {
                 binaryContent = Files.readAllBytes(repo.root().resolve(patch.target().path().get()));
@@ -103,16 +103,16 @@
                     new IllegalArgumentException("Could not get content for file " +
                                                        patch.target().path().get() +
                                                        " at revision " + head)
                 );
             }
-            stats = WebrevStats.empty();
+            stats = Stats.empty();
         }
     }
 
     @Override
-    public WebrevStats stats() {
+    public Stats stats() {
         return stats;
     }
 
     private void renderTextual(Writer w) throws IOException {
         var targetPath = patch.target().path().get();
diff a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
@@ -34,30 +34,30 @@
     private final Path out;
     private final List<CommitMetadata> commits;
     private final MetadataFormatter formatter;
     private final List<String> oldContent;
     private final byte[] binaryContent;
-    private final WebrevStats stats;
+    private final Stats stats;
 
     public RemovedFileView(ReadOnlyRepository repo, Hash base, Hash head, List<CommitMetadata> commits, MetadataFormatter formatter, Patch patch, Path out) throws IOException {
         this.patch = patch;
         this.out = out;
         this.commits = commits;
         this.formatter = formatter;
         if (patch.isTextual()) {
             binaryContent = null;
             oldContent = repo.lines(patch.source().path().get(), base).orElseThrow(IllegalArgumentException::new);
-            stats = new WebrevStats(patch.asTextualPatch().stats(), oldContent.size());
+            stats = new Stats(patch.asTextualPatch().stats(), oldContent.size());
         } else {
             oldContent = null;
             binaryContent = repo.show(patch.source().path().get(), base).orElseThrow(IllegalArgumentException::new);
-            stats = WebrevStats.empty();
+            stats = Stats.empty();
         }
     }
 
     @Override
-    public WebrevStats stats() {
+    public Stats stats() {
         return stats;
     }
 
     @Override
     public void render(Writer w) throws IOException {
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Stats.java b/webrev/src/main/java/org/openjdk/skara/webrev/Stats.java
--- /dev/null
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Stats.java
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.webrev;
+
+import org.openjdk.skara.vcs.WebrevStats;
+
+class Stats {
+    private final int added;
+    private final int removed;
+    private final int modified;
+    private final int total;
+
+    public Stats(WebrevStats stats, int total) {
+        this.added = stats.added();
+        this.removed = stats.removed();
+        this.modified = stats.modified();
+        this.total = total;
+    }
+
+    public Stats(int added, int removed, int modified, int total) {
+        this.added = added;
+        this.removed = removed;
+        this.modified = modified;
+        this.total = total;
+    }
+
+    public static Stats empty() {
+        return new Stats(0, 0, 0, 0);
+    }
+
+    public int added() {
+        return added;
+    }
+
+    public int removed() {
+        return removed;
+    }
+
+    public int modified() {
+        return modified;
+    }
+
+    public int changed() {
+        return added() + removed() + modified();
+    }
+
+    public int unchanged() {
+        return total() - changed();
+    }
+
+    public int total() {
+        return total;
+    }
+
+    @Override
+    public String toString() {
+        return String.format("%d lines changed; %d ins; %d del; %d mod; %d unchg",
+                             changed(), added(), removed(), modified(), unchanged());
+    }
+}
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -223,12 +223,12 @@
                 } else if (status.isDeleted()) {
                     fileViews.add(new RemovedFileView(repository, tailEnd, head, commits, formatter, patch, output));
                 }
             }
 
-            var total = fileViews.stream().map(FileView::stats).mapToInt(WebrevStats::total).sum();
-            var stats = new WebrevStats(diff.added(), diff.removed(), diff.modified(), total);
+            var total = fileViews.stream().map(FileView::stats).mapToInt(Stats::total).sum();
+            var stats = new Stats(diff.totalStats(), total);
 
             var issueForWebrev = issue != null && issueLinker != null ? issueLinker.apply(issue) : null;
             var tailEndURL = commitLinker != null ? commitLinker.apply(tailEnd.hex()) : null;
             try (var w = Files.newBufferedWriter(output.resolve(INDEX))) {
                 var index = new IndexView(fileViews,
diff a/webrev/src/main/java/org/openjdk/skara/webrev/WebrevStats.java b/webrev/src/main/java/org/openjdk/skara/webrev/WebrevStats.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/WebrevStats.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.webrev;
-
-import org.openjdk.skara.vcs.PatchStats;
-
-class WebrevStats {
-    private final int added;
-    private final int removed;
-    private final int modified;
-    private final int total;
-
-    public WebrevStats(PatchStats stats, int total) {
-        this.added = stats.added();
-        this.removed = stats.removed();
-        this.modified = stats.modified();
-        this.total = total;
-    }
-
-    public WebrevStats(int added, int removed, int modified, int total) {
-        this.added = added;
-        this.removed = removed;
-        this.modified = modified;
-        this.total = total;
-    }
-
-    public static WebrevStats empty() {
-        return new WebrevStats(0, 0, 0, 0);
-    }
-
-    public int added() {
-        return added;
-    }
-
-    public int removed() {
-        return removed;
-    }
-
-    public int modified() {
-        return modified;
-    }
-
-    public int changed() {
-        return added() + removed() + modified();
-    }
-
-    public int unchanged() {
-        return total() - changed();
-    }
-
-    public int total() {
-        return total;
-    }
-
-    @Override
-    public String toString() {
-        return String.format("%d lines changed; %d ins; %d del; %d mod; %d unchg",
-                             changed(), added(), removed(), modified(), unchanged());
-    }
-}
