diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -192,11 +192,11 @@
             assertTrue(archiveContains(archiveFolder.path(), "This should now be ready"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch:"));
             assertTrue(archiveContains(archiveFolder.path(), "Changes:"));
             assertTrue(archiveContains(archiveFolder.path(), "Webrev:"));
             assertTrue(archiveContains(archiveFolder.path(), webrevServer.uri().toString()));
-            assertTrue(archiveContains(archiveFolder.path(), "webrev.00"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/00"));
             assertTrue(archiveContains(archiveFolder.path(), "Issue:"));
             assertTrue(archiveContains(archiveFolder.path(), "http://issues.test/browse/TSTPRJ-1234"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch:"));
             assertTrue(archiveContains(archiveFolder.path(), "^ - Change msg"));
             assertFalse(archiveContains(archiveFolder.path(), "With several lines"));
@@ -1551,12 +1551,12 @@
             listServer.processIncoming();
 
             // The archive should reference the updated push
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertTrue(archiveContains(archiveFolder.path(), "has updated the pull request incrementally"));
-            assertTrue(archiveContains(archiveFolder.path(), "full.*/" + pr.id() + "/webrev.01"));
-            assertTrue(archiveContains(archiveFolder.path(), "inc.*/" + pr.id() + "/webrev.00-01"));
+            assertTrue(archiveContains(archiveFolder.path(), "full.*/" + pr.id() + "/01"));
+            assertTrue(archiveContains(archiveFolder.path(), "inc.*/" + pr.id() + "/00-01"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fixing"));
 
             // The webrev comment should be updated
@@ -1680,11 +1680,11 @@
             listServer.processIncoming();
 
             // The archive should reference the rebased push
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertTrue(archiveContains(archiveFolder.path(), "has updated the pull request with a new target base"));
-            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.01"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/01"));
             assertFalse(archiveContains(archiveFolder.path(), "Incremental"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch"));
             assertTrue(archiveContains(archiveFolder.path(), "Original msg"));
             assertTrue(archiveContains(archiveFolder.path(), "Replaced msg"));
@@ -1792,12 +1792,12 @@
 
             // The archive should reference the rebased push
             Repository.materialize(archiveFolder.path(), archive.url(), "archive");
             assertTrue(archiveContains(archiveFolder.path(), "has updated the pull request with a new target base"));
             assertTrue(archiveContains(archiveFolder.path(), "excludes"));
-            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.01"));
-            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00-01"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/01"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/00-01"));
             assertTrue(archiveContains(archiveFolder.path(), "Original msg"));
             assertTrue(archiveContains(archiveFolder.path(), "More updates"));
         }
     }
 
@@ -1874,11 +1874,11 @@
             listServer.processIncoming();
 
             // The archive should contain a merge style webrev
             Repository.materialize(archiveFolder.path(), archive.url(), "archive");
             assertTrue(archiveContains(archiveFolder.path(), "The webrevs contain the adjustments done while merging with regards to each parent branch:"));
-            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00.0"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/00.0"));
             assertTrue(archiveContains(archiveFolder.path(), "3 lines in 2 files changed: 1 ins; 1 del; 1 mod"));
 
             // The PR should contain a webrev comment
             assertEquals(1, pr.comments().size());
             var webrevComment = pr.comments().get(0);
@@ -1947,11 +1947,11 @@
             listServer.processIncoming();
 
             // The archive should contain a merge style webrev
             Repository.materialize(archiveFolder.path(), archive.url(), "archive");
             assertTrue(archiveContains(archiveFolder.path(), "The webrev contains the conflicts with master:"));
-            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00.conflicts"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/00.conflicts"));
             assertTrue(archiveContains(archiveFolder.path(), "2 lines in 2 files changed: 2 ins; 0 del; 0 mod"));
 
             // The PR should contain a webrev comment
             assertEquals(1, pr.comments().size());
             var webrevComment = pr.comments().get(0);
@@ -2088,11 +2088,11 @@
                                          .filter(comment -> comment.author().equals(author.forge().currentUser()))
                                          .filter(comment -> comment.body().contains("webrev"))
                                          .filter(comment -> comment.body().contains(editHash.hex()))
                                          .collect(Collectors.toList());
             assertEquals(1, webrevComments.size());
-            assertEquals(1, countSubstrings(webrevComments.get(0).body(), "webrev.00"));
+            assertEquals(1, countSubstrings(webrevComments.get(0).body(), pr.id() + "/00"));
 
             // Pretend the archive didn't work out
             archiveRepo.push(masterHash, archive.url(), "master", true);
 
             // Run another archive pass
@@ -2104,11 +2104,11 @@
                                      .filter(comment -> comment.author().equals(author.forge().currentUser()))
                                      .filter(comment -> comment.body().contains("webrev"))
                                      .filter(comment -> comment.body().contains(editHash.hex()))
                                      .collect(Collectors.toList());
             assertEquals(1, webrevComments.size());
-            assertEquals(1, countSubstrings(webrevComments.get(0).body(), "webrev.00"));
+            assertEquals(1, countSubstrings(webrevComments.get(0).body(), pr.id() + "/00"));
         }
     }
 
     @Test
     void notifyReviewVerdicts(TestInfo testInfo) throws IOException {
@@ -2452,11 +2452,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // Check the archive
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
-            assertTrue(archiveContains(archiveFolder.path(), "webrev.01"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/01"));
         }
     }
 
     @Test
     void retryAfterCooldown(TestInfo testInfo) throws IOException, InterruptedException {
