diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLVertexCache.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLVertexCache.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLVertexCache.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLVertexCache.m
@@ -258,12 +258,11 @@
 MTLVertexCache_AddMaskQuad(MTLContext *mtlc,
                            jint srcx, jint srcy,
                            jint dstx, jint dsty,
                            jint width, jint height,
                            jint maskscan, void *mask,
-                           BMTLSDOps *dstOps,
-                           jint fullwidth)
+                           BMTLSDOps *dstOps)
 {
     jfloat tx1, ty1, tx2, ty2;
     jfloat dx1, dy1, dx2, dy2;
 
     J2dTraceLn1(J2D_TRACE_INFO, "MTLVertexCache_AddMaskQuad: %d",
@@ -284,12 +283,12 @@
     if (mask != NULL) {
         jint texx = MTLVC_MASK_CACHE_TILE_WIDTH *
                     (maskCacheIndex % MTLVC_MASK_CACHE_WIDTH_IN_TILES);
         jint texy = MTLVC_MASK_CACHE_TILE_HEIGHT *
                     (maskCacheIndex / MTLVC_MASK_CACHE_WIDTH_IN_TILES);
-        J2dTraceLn5(J2D_TRACE_INFO, "texx = %d texy = %d width = %d height = %d fullwidth = %d", texx, texy, width,
-                    height, fullwidth);
+        J2dTraceLn5(J2D_TRACE_INFO, "texx = %d texy = %d width = %d height = %d maskscan = %d", texx, texy, width,
+                    height, maskscan);
         NSUInteger bytesPerRow = 1 * width;
         NSUInteger slice = bytesPerRow * srcy + srcx;
         MTLRegion region = {
                 {texx,  texy,   0},
                 {width, height, 1}
@@ -303,11 +302,11 @@
         // stride into destination using memcpy. In case of OpenGL we
         // can update source pointers, in case of D3D we ar doing memcpy.
         // We can use MTLBuffer and then copy source subtexture but that
         // adds extra blitting logic.
         // TODO : Research more and try removing memcpy logic.
-        if (fullwidth <= width) {
+        if (maskscan <= width) {
             int height_offset = bytesPerRow * srcy;
             [maskCacheTex.texture replaceRegion:region
                             mipmapLevel:0
                               withBytes:mask + height_offset
                             bytesPerRow:bytesPerRow];
@@ -316,11 +315,11 @@
             int size = 1 * width * height;
             char tile[size];
             dst_offset = 0;
             for (int i = srcy; i < srcy + height; i++) {
                 J2dTraceLn2(J2D_TRACE_INFO, "srcx = %d srcy = %d", srcx, srcy);
-                src_offset = fullwidth * i + srcx;
+                src_offset = maskscan * i + srcx;
                 J2dTraceLn2(J2D_TRACE_INFO, "src_offset = %d dst_offset = %d", src_offset, dst_offset);
                 memcpy(tile + dst_offset, mask + src_offset, width);
                 dst_offset = dst_offset + width;
             }
             [maskCacheTex.texture replaceRegion:region
