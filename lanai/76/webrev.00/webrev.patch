diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
@@ -694,10 +694,11 @@
         return;
     }
 
     SurfaceData_IntersectBoundsXYXY(&srcInfo.bounds,
                                     0, 0, srcOps->width, srcOps->height);
+
     SurfaceData_IntersectBlitBounds(&dstInfo.bounds, &srcInfo.bounds,
                                     srcx - dstx, srcy - dsty);
 
     if (srcInfo.bounds.x2 > srcInfo.bounds.x1 &&
         srcInfo.bounds.y2 > srcInfo.bounds.y1)
@@ -719,19 +720,10 @@
             // Metal texture is (0,0) at left-top
             srcx = srcOps->xOffset + srcx;
             srcy = srcOps->yOffset + srcy;
             const int srcLength = width * height * 4; // NOTE: assume that src format is MTLPixelFormatBGRA8Unorm
 
-#ifdef DEBUG
-            void *pDstEnd = dstInfo.rasBase + (height - 1)*dstInfo.scanStride + width*dstInfo.pixelStride;
-            if (pDst + srcLength > pDstEnd) {
-                J2dTraceLn6(J2D_TRACE_ERROR, "MTLBlitLoops_SurfaceToSwBlit: length mismatch: dstx=%d, dsty=%d, w=%d, h=%d, pixStride=%d, scanStride=%d",
-                        dstx, dsty, width, height, dstInfo.pixelStride, dstInfo.scanStride);
-                return;
-            }
-#endif //DEBUG
-
             // Create MTLBuffer (or use static)
             MTLRasterFormatInfo rfi = RasterFormatInfos[dsttype];
             const jboolean directCopy = rfi.permuteMap == NULL;
 
             id<MTLBuffer> mtlbuf;
@@ -787,11 +779,25 @@
             [cb commit];
             [cb waitUntilCompleted];
 
             // Perform conversion if necessary
             if (directCopy) {
-                memcpy(pDst, mtlbuf.contents, srcLength);
+                if ((dstInfo.scanStride == width * dstInfo.pixelStride) &&
+                    (height == (dstInfo.bounds.y2 - dstInfo.bounds.y1))) {
+                    // mtlbuf.contents have same dimensions as of pDst
+                    memcpy(pDst, mtlbuf.contents, srcLength);
+                } else {
+                    // mtlbuf.contents have smaller dimensions than pDst
+                    // copy each row from mtlbuf.contents at appropriate position in pDst
+                    // Note : pDst is already addjusted for offsets using PtrAddBytes above
+
+                    int rowSize = width * dstInfo.pixelStride;
+                    for (int y = 0; y < height; y++) {
+                        memcpy(pDst, mtlbuf.contents + (y * rowSize), rowSize);
+                        pDst = PtrAddBytes(pDst, dstInfo.scanStride);
+                    }
+                }
             } else {
                 J2dTraceLn6(J2D_TRACE_VERBOSE,"MTLBlitLoops_SurfaceToSwBlit: dsttype=%d, raster conversion will be performed, dest rfi: %d, %d, %d, %d, hasA=%d",
                             dsttype, rfi.permuteMap[0], rfi.permuteMap[1], rfi.permuteMap[2], rfi.permuteMap[3], rfi.hasAlpha);
 
                 // perform raster conversion: mtlIntermediateBuffer(8888) -> pDst(rfi)
