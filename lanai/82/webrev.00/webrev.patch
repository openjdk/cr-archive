diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h b/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h
@@ -52,10 +52,11 @@
 
 struct GradFrameUniforms {
     vector_float3 params;
     vector_float4 color1;
     vector_float4 color2;
+    int isCyclic;
 };
 
 struct Vertex {
     float position[2];
 };
diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
@@ -204,10 +204,18 @@
 
     float4 renderColor = renderTexture.sample(textureSampler, in.texCoords);
 
     float3 v = float3(in.position.x, in.position.y, 1);
     float  a = (dot(v,uniforms.params)-0.25)*2.0;
+    int fa = floor(a);
+    if (uniforms.isCyclic) {
+        if (fa%2) {
+            a = 1.0 + fa - a;
+        } else {
+            a = a - fa;
+        }
+    }
     float4 c = mix(uniforms.color1, uniforms.color2, a);
     return half4(c.r*renderColor.a,
                  c.g*renderColor.a,
                  c.b*renderColor.a,
                  renderColor.a);
@@ -350,10 +358,18 @@
 
 fragment half4 frag_grad(GradShaderInOut in [[stage_in]],
                          constant GradFrameUniforms& uniforms [[buffer(0)]]) {
     float3 v = float3(in.position.x, in.position.y, 1);
     float  a = (dot(v,uniforms.params)-0.25)*2.0;
+    int fa = floor(a);
+    if (uniforms.isCyclic) {
+        if (fa%2) {
+            a = 1.0 + fa - a;
+        } else {
+            a = a - fa;
+        }
+    }
     float4 c = mix(uniforms.color1, uniforms.color2, a);
     return half4(c);
 }
 
 
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
@@ -418,11 +418,12 @@
             vertShader = @"vert_txt_grad";
             fragShader = @"frag_txt_grad";
             struct GradFrameUniforms uf = {
                     {_p0, _p1, _p3},
                     RGBA_TO_V4(_pixel1),
-                    RGBA_TO_V4(_pixel2)};
+                    RGBA_TO_V4(_pixel2),
+                    _cyclic};
             [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:0];
 
         } else {
             vertShader = @"vert_txt";
             fragShader = @"frag_txt";
@@ -449,11 +450,13 @@
             fragShader = @"frag_grad";
 
             struct GradFrameUniforms uf = {
                     {_p0, _p1, _p3},
                     RGBA_TO_V4(_pixel1),
-                    RGBA_TO_V4(_pixel2)};
+                    RGBA_TO_V4(_pixel2),
+                    _cyclic
+            };
             [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:0];
         } else if (_paintState == sun_java2d_SunGraphics2D_PAINT_TEXTURE) {
             vertShader = @"vert_tp";
             fragShader = @"frag_tp";
 
@@ -523,11 +526,13 @@
             rpDesc = templateRenderPipelineDesc;
 
             struct GradFrameUniforms uf = {
                         {_p0, _p1, _p3},
                         RGBA_TO_V4(_pixel1 ^ xorColor),
-                        RGBA_TO_V4(_pixel2 ^ xorColor)};
+                        RGBA_TO_V4(_pixel2 ^ xorColor),
+                        _cyclic
+            };
 
             [encoder setFragmentBytes: &uf length:sizeof(uf) atIndex:0];
             BMTLSDOps *dstOps = MTLRenderQueue_GetCurrentDestination();
             [encoder setFragmentTexture:dstOps->pTexture atIndex:0];
 
