diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
@@ -220,11 +220,10 @@
                                                             width:MTLTR_CACHE_WIDTH
                                                             height:MTLTR_CACHE_HEIGHT
                                                             mipmapped:NO];
 
     gcinfo->texture = [mtlc.device newTextureWithDescriptor:textureDescriptor];
-    [textureDescriptor release];
 
     if (lcdCache) {
         glyphCacheLCD = gcinfo;
     } else {
         glyphCacheAA = gcinfo;
@@ -334,11 +333,10 @@
                              bytesPerRow:bytesPerRow];
         }
     }
 }
 
-static MTLRenderPipelineDescriptor * templateRenderPipelineDesc = nil;
 static MTLRenderPipelineDescriptor * templateLCDPipelineDesc = nil;
 
 /**
  * Enables the LCD text shader and updates any related state, such as the
  * gamma lookup table textures.
@@ -358,11 +356,11 @@
         vertDesc.attributes[VertexAttributePosition].bufferIndex = MeshVertexBuffer;
         vertDesc.layouts[MeshVertexBuffer].stride = sizeof(struct Vertex);
         vertDesc.layouts[MeshVertexBuffer].stepRate = 1;
         vertDesc.layouts[MeshVertexBuffer].stepFunction = MTLVertexStepFunctionPerVertex;
 
-        templateLCDPipelineDesc = [[MTLRenderPipelineDescriptor new] autorelease];
+        templateLCDPipelineDesc = [MTLRenderPipelineDescriptor new];
         templateLCDPipelineDesc.sampleCount = 1;
         templateLCDPipelineDesc.vertexDescriptor = vertDesc;
         templateLCDPipelineDesc.colorAttachments[0].pixelFormat = MTLPixelFormatBGRA8Unorm;
         templateLCDPipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].format = MTLVertexFormatFloat2;
         templateLCDPipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].offset = 2*sizeof(float);
@@ -421,11 +419,11 @@
         vertDesc.attributes[VertexAttributePosition].bufferIndex = MeshVertexBuffer;
         vertDesc.layouts[MeshVertexBuffer].stride = sizeof(struct Vertex);
         vertDesc.layouts[MeshVertexBuffer].stepRate = 1;
         vertDesc.layouts[MeshVertexBuffer].stepFunction = MTLVertexStepFunctionPerVertex;
 
-        templateLCDPipelineDesc = [[MTLRenderPipelineDescriptor new] autorelease];
+        templateLCDPipelineDesc = [MTLRenderPipelineDescriptor new];
         templateLCDPipelineDesc.sampleCount = 1;
         templateLCDPipelineDesc.vertexDescriptor = vertDesc;
         templateLCDPipelineDesc.colorAttachments[0].pixelFormat = MTLPixelFormatBGRA8Unorm;
         templateLCDPipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].format = MTLVertexFormatFloat2;
         templateLCDPipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].offset = 2*sizeof(float);
