diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
@@ -67,26 +67,26 @@
     vertDesc.attributes[VertexAttributePosition].bufferIndex = MeshVertexBuffer;
     vertDesc.layouts[MeshVertexBuffer].stride = sizeof(struct Vertex);
     vertDesc.layouts[MeshVertexBuffer].stepRate = 1;
     vertDesc.layouts[MeshVertexBuffer].stepFunction = MTLVertexStepFunctionPerVertex;
 
-    templateRenderPipelineDesc = [[MTLRenderPipelineDescriptor new] autorelease];
+    templateRenderPipelineDesc = [MTLRenderPipelineDescriptor new];
     templateRenderPipelineDesc.sampleCount = 1;
     templateRenderPipelineDesc.vertexDescriptor = vertDesc;
     templateRenderPipelineDesc.colorAttachments[0].pixelFormat = MTLPixelFormatBGRA8Unorm;
     templateRenderPipelineDesc.label = @"template_render";
 
-    templateTexturePipelineDesc = [[templateRenderPipelineDesc copy] autorelease];
+    templateTexturePipelineDesc = [templateRenderPipelineDesc copy];
     templateTexturePipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].format = MTLVertexFormatFloat2;
     templateTexturePipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].offset = 2*sizeof(float);
     templateTexturePipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].bufferIndex = MeshVertexBuffer;
     templateTexturePipelineDesc.vertexDescriptor.layouts[MeshVertexBuffer].stride = sizeof(struct TxtVertex);
     templateTexturePipelineDesc.vertexDescriptor.layouts[MeshVertexBuffer].stepRate = 1;
     templateTexturePipelineDesc.vertexDescriptor.layouts[MeshVertexBuffer].stepFunction = MTLVertexStepFunctionPerVertex;
     templateTexturePipelineDesc.label = @"template_texture";
 
-    templateAATexturePipelineDesc = [[templateTexturePipelineDesc copy] autorelease];
+    templateAATexturePipelineDesc = [templateTexturePipelineDesc copy];
     templateAATexturePipelineDesc.colorAttachments[0].sourceRGBBlendFactor = MTLBlendFactorOne;
     templateAATexturePipelineDesc.colorAttachments[0].sourceAlphaBlendFactor = MTLBlendFactorOne;
     templateAATexturePipelineDesc.colorAttachments[0].destinationRGBBlendFactor = MTLBlendFactorOneMinusSourceAlpha;
     templateAATexturePipelineDesc.colorAttachments[0].destinationAlphaBlendFactor = MTLBlendFactorOneMinusSourceAlpha;
     templateAATexturePipelineDesc.label = @"template_aa_texture";
@@ -361,11 +361,11 @@
 {
     initTemplatePipelineDescriptors();
 
     NSString * vertShader = @"vert_txt";
     NSString * fragShader = @"frag_txt";
-    MTLRenderPipelineDescriptor * rpDesc = templateTexturePipelineDesc;
+    MTLRenderPipelineDescriptor * rpDesc = [[templateTexturePipelineDesc copy] autorelease];
 
     if (renderOptions->isTexture) {
         NSObject *bufImgOp = [mtlc getBufImgOp];
         if (bufImgOp != nil) {
             if ([bufImgOp isKindOfClass:[MTLRescaleOp class]]) {
@@ -485,11 +485,11 @@
 
     jint xorColor = (jint) [mtlc.composite getXorColor];
 
     NSString * vertShader = @"vert_txt_xorMode";
     NSString * fragShader = @"frag_txt_xorMode";
-    MTLRenderPipelineDescriptor * rpDesc = templateTexturePipelineDesc;
+    MTLRenderPipelineDescriptor * rpDesc = [[templateTexturePipelineDesc copy] autorelease];
 
     if (renderOptions->isTexture) {
         const int col = _paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR ? _color ^ xorColor : 0 ^ xorColor;
         setTxtUniforms(encoder, col, _paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR ? 1 : 0,
                        renderOptions->interpolation, NO, [mtlc.composite getExtraAlpha],
