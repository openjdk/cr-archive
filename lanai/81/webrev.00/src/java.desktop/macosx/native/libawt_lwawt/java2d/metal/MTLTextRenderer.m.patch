diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
@@ -372,11 +372,11 @@
     }
 
     id<MTLRenderPipelineState> pipelineState =
                 [mtlc.pipelineStateStorage
                     getPipelineState:templateLCDPipelineDesc
-                    vertexShaderId:@"vert_txt"
+                    vertexShaderId:@"vert_txt_lcd"
                     fragmentShaderId:@"lcd_color"
                    ];
 
     [encoder setRenderPipelineState:pipelineState];
 
@@ -435,11 +435,11 @@
     }
 
     id<MTLRenderPipelineState> pipelineState =
                 [mtlc.pipelineStateStorage
                     getPipelineState:templateLCDPipelineDesc
-                    vertexShaderId:@"vert_txt"
+                    vertexShaderId:@"vert_txt_lcd"
                     fragmentShaderId:@"lcd_color"
                    ];
 
     [lcdCacheEncoder setRenderPipelineState:pipelineState];
     return JNI_TRUE;
@@ -874,10 +874,11 @@
     }
 
     glyphMode = MODE_NOT_INITED;
     isCachedDestValid = JNI_FALSE;
     J2dTraceLn1(J2D_TRACE_INFO, "totalGlyphs = %d", totalGlyphs);
+    jboolean flushBeforeLCD = JNI_FALSE;
 
     for (glyphCounter = 0; glyphCounter < totalGlyphs; glyphCounter++) {
         J2dTraceLn(J2D_TRACE_INFO, "Entered for loop for glyph list");
         jint x, y;
         jfloat glyphx, glyphy;
@@ -926,10 +927,22 @@
             } else {
                 J2dTraceLn(J2D_TRACE_INFO, "MTLTR_DrawGlyphList Grayscale no cache");
                 ok = MTLTR_DrawGrayscaleGlyphNoCache(mtlc, ginfo, x, y, dstOps);
             }
         } else {
+            if (!flushBeforeLCD) {
+                [mtlc.encoderManager endEncoder];
+                MTLCommandBufferWrapper* cbwrapper = [mtlc pullCommandBufferWrapper];
+
+                id<MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
+                [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
+                    [cbwrapper release];
+                }];
+
+                [commandbuf commit];
+                flushBeforeLCD = JNI_TRUE;
+            }
             void* dstTexture = dstOps->textureLCD;
 
             // LCD-optimized glyph data
             jint rowBytesOffset = 0;
 
