diff a/application/org.openjdk.jmc.flightrecorder.pde/templates_3.4/simpleruletemplate/java/$className$.java b/application/org.openjdk.jmc.flightrecorder.pde/templates_3.4/simpleruletemplate/java/$className$.java
--- a/application/org.openjdk.jmc.flightrecorder.pde/templates_3.4/simpleruletemplate/java/$className$.java
+++ b/application/org.openjdk.jmc.flightrecorder.pde/templates_3.4/simpleruletemplate/java/$className$.java
@@ -122,8 +122,8 @@
 		return "$ruleName$";
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.ENVIRONMENT_VARIABLES_TOPIC;
+		return JfrRuleTopics.ENVIRONMENT_VARIABLES;
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java
@@ -116,11 +116,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_CLASSLOADING);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.CLASS_LOADING_TOPIC};
+			return new String[] {JfrRuleTopics.CLASS_LOADING};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new ClassLoadingPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CodeCachePage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CodeCachePage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CodeCachePage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CodeCachePage.java
@@ -130,11 +130,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_COMPILATIONS);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.CODE_CACHE_TOPIC};
+			return new String[] {JfrRuleTopics.CODE_CACHE};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition definition, StreamModel items, IPageContainer editor) {
 			return new CodeCachePage(definition, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CompilationsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CompilationsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CompilationsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/CompilationsPage.java
@@ -123,11 +123,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_COMPILATIONS);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.COMPILATIONS_TOPIC};
+			return new String[] {JfrRuleTopics.COMPILATIONS};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new CompilationsPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EnvironmentVariablesPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EnvironmentVariablesPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EnvironmentVariablesPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EnvironmentVariablesPage.java
@@ -63,11 +63,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_ENVIRONMENT_VARIABLES);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.ENVIRONMENT_VARIABLES_TOPIC};
+			return new String[] {JfrRuleTopics.ENVIRONMENT_VARIABLES};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new EnvironmentVariablesPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ExceptionsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ExceptionsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ExceptionsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ExceptionsPage.java
@@ -127,11 +127,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_EXCEPTIONS);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.EXCEPTIONS_TOPIC};
+			return new String[] {JfrRuleTopics.EXCEPTIONS};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new ExceptionsPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/FileIOPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/FileIOPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/FileIOPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/FileIOPage.java
@@ -114,11 +114,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_IO);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.FILE_IO_TOPIC};
+			return new String[] {JfrRuleTopics.FILE_IO};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new FileIOPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GCConfigurationPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GCConfigurationPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GCConfigurationPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GCConfigurationPage.java
@@ -73,11 +73,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_GC_CONFIGURATION);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.GC_CONFIGURATION_TOPIC};
+			return new String[] {JfrRuleTopics.GC_CONFIGURATION};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new GCConfigurationPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java
@@ -149,11 +149,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_GC);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.GARBAGE_COLLECTION_TOPIC};
+			return new String[] {JfrRuleTopics.GARBAGE_COLLECTION};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new GarbageCollectionsPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
@@ -108,11 +108,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_HEAP);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.HEAP_TOPIC};
+			return new String[] {JfrRuleTopics.HEAP};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new HeapPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JVMInformationPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JVMInformationPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JVMInformationPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JVMInformationPage.java
@@ -95,11 +95,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_JVM_INTERNALS);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.JVM_INFORMATION_TOPIC};
+			return new String[] {JfrRuleTopics.JVM_INFORMATION};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new JVMInformationPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java
@@ -113,11 +113,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_JAVA_APPLICATION);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.JAVA_APPLICATION_TOPIC, JfrRuleTopics.METHOD_PROFILING_TOPIC};
+			return new String[] {JfrRuleTopics.JAVA_APPLICATION, JfrRuleTopics.METHOD_PROFILING};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new JavaApplicationPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/LockInstancesPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/LockInstancesPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/LockInstancesPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/LockInstancesPage.java
@@ -105,11 +105,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_LOCKINSTANCES);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.LOCK_INSTANCES_TOPIC};
+			return new String[] {JfrRuleTopics.LOCK_INSTANCES};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new LockInstancesPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MemoryLeakPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MemoryLeakPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MemoryLeakPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MemoryLeakPage.java
@@ -122,11 +122,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_HEAP);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.MEMORY_LEAK_TOPIC};
+			return new String[] {JfrRuleTopics.MEMORY_LEAK};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition definition, StreamModel items, IPageContainer editor) {
 			return new MemoryLeakPage(definition, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MethodProfilingPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MethodProfilingPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MethodProfilingPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/MethodProfilingPage.java
@@ -90,11 +90,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_METHOD);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.METHOD_PROFILING_TOPIC};
+			return new String[] {JfrRuleTopics.METHOD_PROFILING};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new MethodProfilingPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/NativeLibraryPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/NativeLibraryPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/NativeLibraryPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/NativeLibraryPage.java
@@ -62,11 +62,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_NATIVE_LIBRARY);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.NATIVE_LIBRARY_TOPIC};
+			return new String[] {JfrRuleTopics.NATIVE_LIBRARY};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new NativeLibraryPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ProcessesPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ProcessesPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ProcessesPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ProcessesPage.java
@@ -100,11 +100,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_PROCESSES);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.PROCESSES_TOPIC};
+			return new String[] {JfrRuleTopics.PROCESSES};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new ProcessesPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/RecordingPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/RecordingPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/RecordingPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/RecordingPage.java
@@ -95,11 +95,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_RECORDING);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.RECORDING_TOPIC};
+			return new String[] {JfrRuleTopics.RECORDING};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new RecordingPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SocketIOPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SocketIOPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SocketIOPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SocketIOPage.java
@@ -131,11 +131,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_IO);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.SOCKET_IO_TOPIC};
+			return new String[] {JfrRuleTopics.SOCKET_IO};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new SocketIOPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPage.java
@@ -69,11 +69,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_ENVIRONMENT);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.SYSTEM_INFORMATION_TOPIC};
+			return new String[] {JfrRuleTopics.SYSTEM_INFORMATION};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new SystemPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPropertiesPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPropertiesPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPropertiesPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/SystemPropertiesPage.java
@@ -62,11 +62,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_SYSTEM_PROPERTIES);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.SYSTEM_PROPERTIES_TOPIC};
+			return new String[] {JfrRuleTopics.SYSTEM_PROPERTIES};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new SystemPropertiesPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadDumpsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadDumpsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadDumpsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadDumpsPage.java
@@ -119,11 +119,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_THREAD_DUMPS);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.THREAD_DUMPS_TOPIC};
+			return new String[] {JfrRuleTopics.THREAD_DUMPS};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new ThreadDumpsPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
@@ -96,11 +96,11 @@
 			return Messages.ThreadsPage_NAME;
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.THREADS_TOPIC};
+			return new String[] {JfrRuleTopics.THREADS};
 		}
 
 		@Override
 		public ImageDescriptor getImageDescriptor(IState state) {
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_THREADS);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
@@ -92,11 +92,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_TLAB_ALLOCATIONS);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.TLAB_TOPIC};
+			return new String[] {JfrRuleTopics.TLAB};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new TlabPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/VMOperationPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/VMOperationPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/VMOperationPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/VMOperationPage.java
@@ -133,11 +133,11 @@
 			return FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_JVM_INTERNALS);
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
-			return new String[] {JfrRuleTopics.VM_OPERATIONS_TOPIC};
+			return new String[] {JfrRuleTopics.VM_OPERATIONS};
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new VMOperationPage(dpd, items, editor);
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/compilation/CodeCacheRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/compilation/CodeCacheRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/compilation/CodeCacheRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/compilation/CodeCacheRule.java
@@ -284,8 +284,8 @@
 		return Messages.getString(Messages.CodeCacheRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.CODE_CACHE_TOPIC;
+		return JfrRuleTopics.CODE_CACHE;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/CompareCpuRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/CompareCpuRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/CompareCpuRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/CompareCpuRule.java
@@ -68,11 +68,11 @@
 			Messages.getString(Messages.CompareCpuRule_INFO_LIMIT),
 			Messages.getString(Messages.CompareCpuRule_INFO_LIMIT_LONG), UnitLookup.PERCENTAGE,
 			UnitLookup.PERCENT.quantity(20));
 
 	public CompareCpuRule() {
-		super("CompareCpu", Messages.getString(Messages.CompareCpuRule_RULE_NAME), JfrRuleTopics.PROCESSES_TOPIC, //$NON-NLS-1$
+		super("CompareCpu", Messages.getString(Messages.CompareCpuRule_RULE_NAME), JfrRuleTopics.PROCESSES, //$NON-NLS-1$
 				OTHER_CPU_INFO_LIMIT, OTHER_CPU_WARNING_LIMIT);
 	}
 
 	@Override
 	protected Result getResult(IItemCollection items, IPreferenceValueProvider vp) {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/HighJvmCpuRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/HighJvmCpuRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/HighJvmCpuRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/HighJvmCpuRule.java
@@ -180,8 +180,8 @@
 		return Messages.getString(Messages.HighJvmCpuRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JAVA_APPLICATION_TOPIC;
+		return JfrRuleTopics.JAVA_APPLICATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/ManyRunningProcessesRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/ManyRunningProcessesRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/ManyRunningProcessesRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/cpu/ManyRunningProcessesRule.java
@@ -117,8 +117,8 @@
 		return Messages.getString(Messages.ManyRunningProcessesRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.PROCESSES_TOPIC;
+		return JfrRuleTopics.PROCESSES;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ErrorRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ErrorRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ErrorRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ErrorRule.java
@@ -199,8 +199,8 @@
 		return Messages.getString(Messages.ErrorRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.EXCEPTIONS_TOPIC;
+		return JfrRuleTopics.EXCEPTIONS;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ExceptionRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ExceptionRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ExceptionRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/ExceptionRule.java
@@ -140,8 +140,8 @@
 		return Messages.getString(Messages.ExceptionRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.EXCEPTIONS_TOPIC;
+		return JfrRuleTopics.EXCEPTIONS;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/FatalErrorRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/FatalErrorRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/FatalErrorRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/FatalErrorRule.java
@@ -112,8 +112,8 @@
 		return Messages.getString(Messages.FatalErrorRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java
@@ -117,9 +117,9 @@
 		return Messages.getString(Messages.LuceneVersionRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.EXCEPTIONS_TOPIC;
+		return JfrRuleTopics.EXCEPTIONS;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/BufferLostRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/BufferLostRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/BufferLostRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/BufferLostRule.java
@@ -125,8 +125,8 @@
 		return Messages.getString(Messages.BufferLostRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.RECORDING_TOPIC;
+		return JfrRuleTopics.RECORDING;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
@@ -231,9 +231,9 @@
 		return Messages.getString(Messages.ClassLeakingRule_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.CLASS_LOADING_TOPIC;
+		return JfrRuleTopics.CLASS_LOADING;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java
@@ -134,9 +134,9 @@
 		return Messages.getString(Messages.ClassLoadingRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.CLASS_LOADING_TOPIC;
+		return JfrRuleTopics.CLASS_LOADING;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DebugNonSafepointsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DebugNonSafepointsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DebugNonSafepointsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DebugNonSafepointsRule.java
@@ -112,8 +112,8 @@
 		return Messages.getString(Messages.DebugNonSafepointsRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedGcOptionsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedGcOptionsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedGcOptionsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedGcOptionsRule.java
@@ -126,8 +126,8 @@
 		return Messages.getString(Messages.DiscouragedGcOptionsRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedVmOptionsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedVmOptionsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedVmOptionsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DiscouragedVmOptionsRule.java
@@ -106,8 +106,8 @@
 		return Messages.getString(Messages.DiscouragedVmOptionsRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
@@ -148,8 +148,8 @@
 		return Messages.getString(Messages.DumpReason_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.RECORDING_TOPIC;
+		return JfrRuleTopics.RECORDING;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DuplicateFlagsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DuplicateFlagsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DuplicateFlagsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DuplicateFlagsRule.java
@@ -122,8 +122,8 @@
 		return Messages.getString(Messages.DuplicateFlagsRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FewSampledThreadsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FewSampledThreadsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FewSampledThreadsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FewSampledThreadsRule.java
@@ -118,12 +118,12 @@
 			Messages.getString(Messages.FewSampledThreadsRule_MIN_SAMPLE_COUNT_PER_THREAD_LONG), NUMBER,
 			NUMBER_UNITY.quantity(4));
 
 	public FewSampledThreadsRule() {
 		super("FewSampledThreads", Messages.getString(Messages.FewSampledThreadsRule_RULE_NAME), //$NON-NLS-1$
-				JfrRuleTopics.JAVA_APPLICATION_TOPIC, SAMPLED_THREADS_RATIO_LIMIT, MIN_CPU_RATIO_LIMIT,
-				SHORT_RECORDING_LIMIT, CPU_WINDOW_SIZE, MIN_SAMPLE_COUNT, MIN_SAMPLE_COUNT_PER_THREAD);
+				JfrRuleTopics.JAVA_APPLICATION, SAMPLED_THREADS_RATIO_LIMIT, MIN_CPU_RATIO_LIMIT, SHORT_RECORDING_LIMIT,
+				CPU_WINDOW_SIZE, MIN_SAMPLE_COUNT, MIN_SAMPLE_COUNT_PER_THREAD);
 	}
 
 	@Override
 	protected Result getResult(IItemCollection items, IPreferenceValueProvider vp) {
 
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
@@ -113,11 +113,11 @@
 		return Messages.getString(Messages.FlightRecordingSupportRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 
 	private Result getVersionResult(String versionString) {
 		JavaVersion usedVersion = RulesToolkit.getJavaVersion(versionString);
 
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ManagementAgentRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ManagementAgentRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ManagementAgentRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ManagementAgentRule.java
@@ -136,8 +136,8 @@
 		return Messages.getString(Messages.ManagmentAgentRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/OptionsCheckRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/OptionsCheckRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/OptionsCheckRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/OptionsCheckRule.java
@@ -605,8 +605,8 @@
 		return Messages.getString(Messages.OptionsCheckRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInArgumentsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInArgumentsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInArgumentsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInArgumentsRule.java
@@ -118,8 +118,8 @@
 		return Messages.getString(Messages.PasswordsInArgsRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInEnvironmentRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInEnvironmentRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInEnvironmentRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInEnvironmentRule.java
@@ -109,8 +109,8 @@
 		return Messages.getString(Messages.PasswordsInEnvironmentRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.ENVIRONMENT_VARIABLES_TOPIC;
+		return JfrRuleTopics.ENVIRONMENT_VARIABLES;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInSystemPropertiesRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInSystemPropertiesRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInSystemPropertiesRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/PasswordsInSystemPropertiesRule.java
@@ -110,8 +110,8 @@
 		return Messages.getString(Messages.PasswordsInSystemPropertiesRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.SYSTEM_PROPERTIES_TOPIC;
+		return JfrRuleTopics.SYSTEM_PROPERTIES;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/RecordingSettingsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/RecordingSettingsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/RecordingSettingsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/RecordingSettingsRule.java
@@ -101,8 +101,8 @@
 		return Messages.getString(Messages.OverAggressiveRecordingSettingRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.RECORDING_TOPIC;
+		return JfrRuleTopics.RECORDING;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/StackDepthSettingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/StackDepthSettingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/StackDepthSettingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/StackDepthSettingRule.java
@@ -160,8 +160,8 @@
 		return Messages.getString(Messages.StackdepthSettingRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/VerifyNoneRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/VerifyNoneRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/VerifyNoneRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/VerifyNoneRule.java
@@ -105,8 +105,8 @@
 		return Messages.getString(Messages.VerifyNoneRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JVM_INFORMATION_TOPIC;
+		return JfrRuleTopics.JVM_INFORMATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileReadRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileReadRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileReadRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileReadRule.java
@@ -144,8 +144,8 @@
 		return Messages.getString(Messages.FileReadRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.FILE_IO_TOPIC;
+		return JfrRuleTopics.FILE_IO;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileWriteRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileWriteRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileWriteRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/FileWriteRule.java
@@ -136,9 +136,9 @@
 		return Messages.getString(Messages.FileWriteRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.FILE_IO_TOPIC;
+		return JfrRuleTopics.FILE_IO;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketReadRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketReadRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketReadRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketReadRule.java
@@ -159,9 +159,9 @@
 		return Encode.forHtml(address);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.SOCKET_IO_TOPIC;
+		return JfrRuleTopics.SOCKET_IO;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketWriteRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketWriteRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketWriteRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/io/SocketWriteRule.java
@@ -145,8 +145,8 @@
 		return Messages.getString(Messages.SocketWriteRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.SOCKET_IO_TOPIC;
+		return JfrRuleTopics.SOCKET_IO;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationPauseRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationPauseRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationPauseRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationPauseRule.java
@@ -122,9 +122,9 @@
 		return Messages.getString(Messages.BiasedLockingRevocationPauseRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.VM_OPERATIONS_TOPIC;
+		return JfrRuleTopics.VM_OPERATIONS;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
@@ -318,8 +318,8 @@
 		return Messages.getString(Messages.BiasedLockingRevocationRule_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.BIASED_LOCKING_TOPIC;
+		return JfrRuleTopics.BIASED_LOCKING;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/ContextSwitchRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/ContextSwitchRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/ContextSwitchRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/ContextSwitchRule.java
@@ -142,8 +142,8 @@
 		return Messages.getString(Messages.ContextSwitchRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.LOCK_INSTANCES_TOPIC;
+		return JfrRuleTopics.LOCK_INSTANCES;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
@@ -187,8 +187,8 @@
 		return Messages.getString(Messages.JavaBlocking_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.LOCK_INSTANCES_TOPIC;
+		return JfrRuleTopics.LOCK_INSTANCES;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
@@ -566,9 +566,9 @@
 		return Messages.getString(Messages.MethodProfilingRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.METHOD_PROFILING_TOPIC;
+		return JfrRuleTopics.METHOD_PROFILING;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
@@ -219,8 +219,8 @@
 		return Messages.getString(Messages.VMOperations_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.VM_OPERATIONS_TOPIC;
+		return JfrRuleTopics.VM_OPERATIONS;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByClassRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByClassRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByClassRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByClassRule.java
@@ -134,8 +134,8 @@
 		return Messages.getString(Messages.AllocationByClassRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.HEAP_TOPIC;
+		return JfrRuleTopics.HEAP;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByThreadRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByThreadRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByThreadRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AllocationByThreadRule.java
@@ -132,8 +132,8 @@
 		return Messages.getString(Messages.AllocationByThreadRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.JAVA_APPLICATION_TOPIC;
+		return JfrRuleTopics.JAVA_APPLICATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/ApplicationHaltsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/ApplicationHaltsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/ApplicationHaltsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/ApplicationHaltsRule.java
@@ -70,11 +70,11 @@
 			Messages.getString(Messages.ApplicationHaltsRule_HALTS_WINDOW_SIZE_DESC), UnitLookup.TIMESPAN,
 			UnitLookup.SECOND.quantity(60));
 
 	public ApplicationHaltsRule() {
 		super("ApplicationHalts", Messages.getString(Messages.ApplicationHaltsRule_RULE_NAME), //$NON-NLS-1$
-				JfrRuleTopics.JAVA_APPLICATION_TOPIC, APP_HALTS_INFO_LIMIT, APP_HALTS_WARNING_LIMIT, WINDOW_SIZE);
+				JfrRuleTopics.JAVA_APPLICATION, APP_HALTS_INFO_LIMIT, APP_HALTS_WARNING_LIMIT, WINDOW_SIZE);
 	}
 
 	@Override
 	protected Result getResult(IItemCollection items, IPreferenceValueProvider vp) {
 		String[] requiredTypes = new String[] {JdkTypeIDs.GC_PAUSE, JdkTypeIDs.VM_OPERATIONS};
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
@@ -118,11 +118,11 @@
 			Messages.getString(Messages.AutoboxingRule_AUTOBOXING_RATIO_WARNING_LIMIT_DESC), UnitLookup.PERCENTAGE,
 			UnitLookup.PERCENT.quantity(80));
 
 	public AutoBoxingRule() {
 		super("PrimitiveToObjectConversion", Messages.getString(Messages.AutoboxingRule_RULE_NAME), //$NON-NLS-1$
-				JfrRuleTopics.HEAP_TOPIC, AUTOBOXING_RATIO_INFO_LIMIT, AUTOBOXING_RATIO_WARNING_LIMIT);
+				JfrRuleTopics.HEAP, AUTOBOXING_RATIO_INFO_LIMIT, AUTOBOXING_RATIO_WARNING_LIMIT);
 	}
 
 	@Override
 	protected Result getResult(IItemCollection items, IPreferenceValueProvider vp) {
 		EventAvailability allocAvail = RulesToolkit.getEventAvailability(items, JdkTypeIDs.ALLOC_INSIDE_TLAB,
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/CompressedOopsRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/CompressedOopsRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/CompressedOopsRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/CompressedOopsRule.java
@@ -109,8 +109,8 @@
 		return Messages.getString(Messages.CompressedOopsRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GC_CONFIGURATION_TOPIC;
+		return JfrRuleTopics.GC_CONFIGURATION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/FullGcRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/FullGcRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/FullGcRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/FullGcRule.java
@@ -127,11 +127,11 @@
 		return Messages.getString(Messages.FullGcRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 
 	private static class G1Aggregator extends MergingAggregator<G1FullGCInfo, G1FullGCInfo> {
 		static final String[] EVENT_TYPES = new String[] {JdkTypeIDs.GARBAGE_COLLECTION};
 
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
@@ -89,11 +89,11 @@
 			Messages.getString(Messages.GcFreedRatioRule_FEW_GCS_LIMIT),
 			Messages.getString(Messages.GcFreedRatioRule_FEW_GCS_LIMIT_DESC), UnitLookup.NUMBER,
 			UnitLookup.NUMBER_UNITY.quantity(10));
 
 	public GcFreedRatioRule() {
-		super("GcFreedRatio", Messages.getString(Messages.GcFreedRatioRule_RULE_NAME), JfrRuleTopics.HEAP_TOPIC, //$NON-NLS-1$
+		super("GcFreedRatio", Messages.getString(Messages.GcFreedRatioRule_RULE_NAME), JfrRuleTopics.HEAP, //$NON-NLS-1$
 				GC_FREED_PER_SECOND_TO_LIVESET_RATIO_INFO_LIMIT, WINDOW_SIZE, FEW_GCS_LIMIT, SHORT_RECORDING_LIMIT);
 	}
 
 	@Override
 	protected Result getResult(IItemCollection items, IPreferenceValueProvider vp) {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcLockerRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcLockerRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcLockerRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcLockerRule.java
@@ -123,8 +123,8 @@
 		return Messages.getString(Messages.GcLockerRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcPauseRatioRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcPauseRatioRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcPauseRatioRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcPauseRatioRule.java
@@ -67,11 +67,11 @@
 			Messages.getString(Messages.GcPauseRatioRule_WINDOW_SIZE_DESC), UnitLookup.TIMESPAN,
 			UnitLookup.SECOND.quantity(60));
 
 	public GcPauseRatioRule() {
 		super("GcPauseRatio", Messages.getString(Messages.GcPauseRatioRule_RULE_NAME), //$NON-NLS-1$
-				JfrRuleTopics.GARBAGE_COLLECTION_TOPIC, INFO_LIMIT, WARNING_LIMIT, WINDOW_SIZE);
+				JfrRuleTopics.GARBAGE_COLLECTION, INFO_LIMIT, WARNING_LIMIT, WINDOW_SIZE);
 	}
 
 	@Override
 	protected Result getResult(IItemCollection items, IPreferenceValueProvider vp) {
 		String[] requiredTypes = new String[] {JdkTypeIDs.GC_PAUSE};
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java
@@ -119,8 +119,8 @@
 		return Messages.getString(Messages.GcStallRule_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapContentRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapContentRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapContentRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapContentRule.java
@@ -130,8 +130,8 @@
 		return Messages.getString(Messages.HeapContentRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.HEAP_TOPIC;
+		return JfrRuleTopics.HEAP;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapInspectionRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapInspectionRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapInspectionRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HeapInspectionRule.java
@@ -117,8 +117,8 @@
 		return Messages.getString(Messages.HeapInspectionGcRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HighGcRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HighGcRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HighGcRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/HighGcRule.java
@@ -124,8 +124,8 @@
 		return Messages.getString(Messages.HighGcRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.HEAP_TOPIC;
+		return JfrRuleTopics.HEAP;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java
@@ -295,8 +295,8 @@
 		return Messages.getString(Messages.IncreasingLiveSetRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.MEMORY_LEAK_TOPIC;
+		return JfrRuleTopics.MEMORY_LEAK;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingMetaspaceLiveSetRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingMetaspaceLiveSetRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingMetaspaceLiveSetRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingMetaspaceLiveSetRule.java
@@ -122,8 +122,8 @@
 		return Messages.getString(Messages.IncreasingMetaspaceLiveSetRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LongGcPauseRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LongGcPauseRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LongGcPauseRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LongGcPauseRule.java
@@ -170,8 +170,8 @@
 		return Messages.getString(Messages.LongGcPauseRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LowOnPhysicalMemoryRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LowOnPhysicalMemoryRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LowOnPhysicalMemoryRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/LowOnPhysicalMemoryRule.java
@@ -112,8 +112,8 @@
 		return Messages.getString(Messages.LowOnPhysicalMemoryFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.HEAP_TOPIC;
+		return JfrRuleTopics.HEAP;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/MetaspaceOomRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/MetaspaceOomRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/MetaspaceOomRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/MetaspaceOomRule.java
@@ -102,8 +102,8 @@
 		return Messages.getString(Messages.MetaspaceOomRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java
@@ -105,11 +105,11 @@
 	// FIXME: Does it make more sense to have individual liveset/allocation ratio limit and heap usage limits?
 	// FIXME: Add a physical memory limit
 
 	public StringDeduplicationRule() {
 		super("StringDeduplication", Messages.getString(Messages.StringDeduplicationRule_RULE_NAME), //$NON-NLS-1$
-				JfrRuleTopics.HEAP_TOPIC, STRING_ARRAY_LIVESET_RATIO_AND_HEAP_USAGE_LIMIT,
+				JfrRuleTopics.HEAP, STRING_ARRAY_LIVESET_RATIO_AND_HEAP_USAGE_LIMIT,
 				STRING_ARRAY_ALLOCATION_RATIO_AND_HEAP_USAGE_LIMIT, STRING_ARRAY_ALLOCATION_FRAMES);
 	}
 
 	@Override
 	protected Result getResult(IItemCollection items, IPreferenceValueProvider vp) {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/SystemGcRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/SystemGcRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/SystemGcRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/SystemGcRule.java
@@ -114,8 +114,8 @@
 		return Messages.getString(Messages.SystemGcRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.GARBAGE_COLLECTION_TOPIC;
+		return JfrRuleTopics.GARBAGE_COLLECTION;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/TlabAllocationRatioRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/TlabAllocationRatioRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/TlabAllocationRatioRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/TlabAllocationRatioRule.java
@@ -122,9 +122,9 @@
 		return Messages.getString(Messages.TlabAllocationRatioRuleFactory_RULE_NAME);
 	}
 
 	@Override
 	public String getTopic() {
-		return JfrRuleTopics.TLAB_TOPIC;
+		return JfrRuleTopics.TLAB;
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/JfrRuleTopics.java b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/JfrRuleTopics.java
--- a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/JfrRuleTopics.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/JfrRuleTopics.java
@@ -33,38 +33,33 @@
 package org.openjdk.jmc.flightrecorder.rules.util;
 
 /**
  * A number of constant strings that are used as topics by JMC rules and pages. These are only used
  * as a convenience, you are by no means limited to these strings.
- * <p>
- * NOTE: If we want the word TOPIC in these constants, it should be the first word. Let's consider
- * this for 8.0.0. See JMC-6487.
  */
 public final class JfrRuleTopics {
-	public static final String CLASS_LOADING_TOPIC = "classloading"; //$NON-NLS-1$
-	public static final String CODE_CACHE_TOPIC = "code_cache"; //$NON-NLS-1$
-	public static final String COMPILATIONS_TOPIC = "compilations"; //$NON-NLS-1$
-	public static final String ENVIRONMENT_VARIABLES_TOPIC = "environment_variables"; //$NON-NLS-1$
-	public static final String EXCEPTIONS_TOPIC = "exceptions"; //$NON-NLS-1$
-	public static final String FILE_IO_TOPIC = "file_io"; //$NON-NLS-1$
-	public static final String SOCKET_IO_TOPIC = "socket_io"; //$NON-NLS-1$
-	public static final String GARBAGE_COLLECTION_TOPIC = "garbage_collection"; //$NON-NLS-1$
-	public static final String GC_CONFIGURATION_TOPIC = "gc_configuration"; //$NON-NLS-1$
-	public static final String TLAB_TOPIC = "tlab"; //$NON-NLS-1$
-	public static final String HEAP_TOPIC = "heap"; //$NON-NLS-1$
-	public static final String LOCK_INSTANCES_TOPIC = "lock_instances"; //$NON-NLS-1$
-	public static final String JAVA_APPLICATION_TOPIC = "java_application"; //$NON-NLS-1$
-	public static final String METHOD_PROFILING_TOPIC = "method_profiling"; //$NON-NLS-1$
-	public static final String JVM_INFORMATION_TOPIC = "jvm_information"; //$NON-NLS-1$
-	public static final String SYSTEM_PROPERTIES_TOPIC = "system_properties"; //$NON-NLS-1$
-	public static final String SYSTEM_INFORMATION_TOPIC = "system_information"; //$NON-NLS-1$
-	public static final String PROCESSES_TOPIC = "processes"; //$NON-NLS-1$
-	public static final String RECORDING_TOPIC = "recording"; //$NON-NLS-1$
-	public static final String THREAD_DUMPS_TOPIC = "thread_dumps"; //$NON-NLS-1$
-	public static final String THREADS_TOPIC = "threads"; //$NON-NLS-1$
-	public static final String VM_OPERATIONS_TOPIC = "vm_operations"; //$NON-NLS-1$
-	public static final String MEMORY_LEAK_TOPIC = "memoryleak"; //$NON-NLS-1$
-	public static final String BIASED_LOCKING_TOPIC = "biased_locking"; //$NON-NLS-1$
-	public static final String NATIVE_LIBRARY_TOPIC = "native_library"; //$NON-NLS-1$
-	@Deprecated
 	public static final String BIASED_LOCKING = "biased_locking"; //$NON-NLS-1$
+	public static final String CLASS_LOADING = "classloading"; //$NON-NLS-1$
+	public static final String CODE_CACHE = "code_cache"; //$NON-NLS-1$
+	public static final String COMPILATIONS = "compilations"; //$NON-NLS-1$
+	public static final String ENVIRONMENT_VARIABLES = "environment_variables"; //$NON-NLS-1$
+	public static final String EXCEPTIONS = "exceptions"; //$NON-NLS-1$
+	public static final String FILE_IO = "file_io"; //$NON-NLS-1$
+	public static final String GARBAGE_COLLECTION = "garbage_collection"; //$NON-NLS-1$
+	public static final String GC_CONFIGURATION = "gc_configuration"; //$NON-NLS-1$
+	public static final String HEAP = "heap"; //$NON-NLS-1$
+	public static final String JAVA_APPLICATION = "java_application"; //$NON-NLS-1$
+	public static final String JVM_INFORMATION = "jvm_information"; //$NON-NLS-1$
+	public static final String LOCK_INSTANCES = "lock_instances"; //$NON-NLS-1$
+	public static final String MEMORY_LEAK = "memoryleak"; //$NON-NLS-1$
+	public static final String METHOD_PROFILING = "method_profiling"; //$NON-NLS-1$
+	public static final String NATIVE_LIBRARY = "native_library"; //$NON-NLS-1$
+	public static final String PROCESSES = "processes"; //$NON-NLS-1$
+	public static final String RECORDING = "recording"; //$NON-NLS-1$
+	public static final String SOCKET_IO = "socket_io"; //$NON-NLS-1$
+	public static final String SYSTEM_INFORMATION = "system_information"; //$NON-NLS-1$
+	public static final String SYSTEM_PROPERTIES = "system_properties"; //$NON-NLS-1$
+	public static final String THREAD_DUMPS = "thread_dumps"; //$NON-NLS-1$
+	public static final String THREADS = "threads"; //$NON-NLS-1$
+	public static final String TLAB = "tlab"; //$NON-NLS-1$
+	public static final String VM_OPERATIONS = "vm_operations"; //$NON-NLS-1$
 }
