diff a/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java b/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java
@@ -42,10 +42,12 @@
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 import org.openjdk.jmc.agent.util.InspectionClassLoader;
 import org.openjdk.jmc.agent.util.TypeUtils;
+import org.openjdk.jmc.agent.Agent;
+
 
 public class JFRNextClassVisitor extends ClassVisitor {
 	private final JFRTransformDescriptor transformDescriptor;
 	private final ClassLoader definingClassLoader;
 	private final Class<?> inspectionClass;
@@ -72,23 +74,28 @@
 	@Override
 	public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
 		MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);
 		if (name.equals(transformDescriptor.getMethod().getName())
 				&& desc.equals(transformDescriptor.getMethod().getSignature())) {
+			transformDescriptor.matchFound(true);
 			return new JFRNextMethodAdvisor(transformDescriptor, inspectionClass, Opcodes.ASM8, mv, access, name, desc);
 		}
 		return mv;
 	}
 
 	@Override
 	public void visitEnd() {
 		try {
 			reflectiveRegister(generateEventClass());
 		} catch (Exception e) {
-			Logger.getLogger(JFRNextClassVisitor.class.getName()).log(Level.SEVERE,
+			Agent.getLogger().log(Level.SEVERE,
 					"Failed to generate event class for " + transformDescriptor.toString(), e); //$NON-NLS-1$
 		}
+		if (!transformDescriptor.isMatchFound()) {
+			 Agent.getLogger().warning("Method " + transformDescriptor.getMethod().getName() + " "
+			 + transformDescriptor.getMethod().getSignature() + " not found."); // $NON-NLS-1$
+		}
 		super.visitEnd();
 	}
 
 	// NOTE: multi-release jars should let us compile against jdk9 and do a direct call here
 	private void reflectiveRegister(Class<?> generateEventClass) throws Exception {
