diff a/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java b/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java
@@ -71,10 +71,11 @@
 	@Override
 	public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
 		MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);
 		if (name.equals(transformDescriptor.getMethod().getName())
 				&& desc.equals(transformDescriptor.getMethod().getSignature())) {
+			transformDescriptor.matchFound(true);
 			return new JFRMethodAdvisor(transformDescriptor, inspectionClass, Opcodes.ASM8, mv, access, name, desc);
 		}
 		return mv;
 	}
 
@@ -85,10 +86,15 @@
 			Agent.getLogger().log(Level.FINE, "Generated " + c);
 		} catch (Throwable t) {
 			Agent.getLogger().log(Level.SEVERE, "Failed to generate event class for " + transformDescriptor.toString(), //$NON-NLS-1$
 					t);
 		}
+		if (!transformDescriptor.isMatchFound()) {
+			Agent.getLogger().warning("Method " + transformDescriptor.getMethod().getName() + " "
+					 + transformDescriptor.getMethod().getSignature() + " not found."); // $NON-NLS-1$
+		}
+
 		super.visitEnd();
 	}
 
 	private Class<?> generateEventClass() throws Exception {
 		byte[] eventClass = JFREventClassGenerator.generateEventClass(transformDescriptor, inspectionClass);
