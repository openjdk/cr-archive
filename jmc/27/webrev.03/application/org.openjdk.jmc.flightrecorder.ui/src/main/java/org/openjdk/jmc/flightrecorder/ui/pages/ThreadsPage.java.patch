diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
@@ -39,15 +39,22 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
+import org.eclipse.jface.action.GroupMarker;
 import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.action.IToolBarManager;
 import org.eclipse.jface.action.Separator;
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.viewers.TableViewer;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Item;
+import org.eclipse.swt.widgets.Listener;
 import org.eclipse.ui.forms.widgets.FormToolkit;
 import org.openjdk.jmc.common.IMCThread;
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.IWritableState;
 import org.openjdk.jmc.common.item.Aggregators;
@@ -74,10 +81,11 @@
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram;
 import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram.HistogramSelection;
 import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram.ItemHistogramBuilder;
 import org.openjdk.jmc.flightrecorder.ui.common.ItemRow;
+import org.openjdk.jmc.flightrecorder.ui.common.DropdownLaneFilter;
 import org.openjdk.jmc.flightrecorder.ui.common.ThreadGraphLanes;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.UIPlugin;
 import org.openjdk.jmc.ui.charts.IXDataRenderer;
 import org.openjdk.jmc.ui.charts.QuantitySpanRenderer;
@@ -152,55 +160,171 @@
 			return null;
 		}, Messages.JavaApplicationPage_COLUMN_THREAD_DURATION,
 				Messages.JavaApplicationPage_COLUMN_THREAD_DURATION_DESC);
 	}
 
-	private class ThreadsPageUi extends ChartAndTableUI {
+	private class ThreadsPageUi extends ThreadsPageLayoutUI {
 		private static final String THREADS_TABLE_FILTER = "threadsTableFilter"; //$NON-NLS-1$
+		private static final String FOLD_CHART_ACTION = "foldChartAction"; //$NON-NLS-1$
+		private static final String FOLD_TABLE_ACTION = "foldTableAction"; //$NON-NLS-1$
 		private static final String HIDE_THREAD = "hideThread"; //$NON-NLS-1$
 		private static final String RESET_CHART = "resetChart"; //$NON-NLS-1$
+		public static final String TOOLBAR_FOLD_ACTIONS = "foldActions"; //$NON-NLS-1$
 		private Boolean isChartMenuActionsInit;
 		private Boolean isChartModified;
 		private Boolean reloadThreads;
-		private IAction hideThreadAction;
+		private IAction foldChartAction;
+		private IAction foldTableAction;
+		private IAction hideThreadActionChart;
+		private IAction hideThreadActionText;
 		private IAction resetChartAction;
+		private int[] weights;
 		private List<IXDataRenderer> threadRows;
-		private MCContextMenuManager mm;
+		private MCContextMenuManager mmChart;
+		private MCContextMenuManager mmText;
+		private MCContextMenuManager[] mms;
 		private ThreadGraphLanes lanes;
+		private DropdownLaneFilter laneFilter;
 
 		ThreadsPageUi(Composite parent, FormToolkit toolkit, IPageContainer editor, IState state) {
 			super(pageFilter, getDataSource(), parent, toolkit, editor, state, getName(), pageFilter, getIcon(),
 					flavorSelectorState, JfrAttributes.EVENT_THREAD);
-			mm = (MCContextMenuManager) chartCanvas.getContextMenu();
-			sash.setOrientation(SWT.HORIZONTAL);
-			addActionsToContextMenu(mm);
+			mmChart = (MCContextMenuManager) chartCanvas.getContextMenu();
+			mmText = (MCContextMenuManager) textCanvas.getContextMenu();
+			mms = new MCContextMenuManager[] {mmChart, mmText};
+			initializeStoredSashWeights();
+			canvasSash.setOrientation(SWT.HORIZONTAL);
+			addResizeListenerToTableAndChartComponents();
+			addActionsToContextMenu();
 			// FIXME: The lanes field is initialized by initializeChartConfiguration which is called by the super constructor. This is too indirect for SpotBugs to resolve and should be simplified.
-			lanes.updateContextMenu(mm, false);
-
-			form.getToolBarManager()
-					.add(ActionToolkit.action(() -> lanes.openEditLanesDialog(mm, false),
-							Messages.ThreadsPage_EDIT_LANES,
-							FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.ICON_LANES_EDIT)));
-			form.getToolBarManager().update(true);
+			lanes.updateContextMenus(mms, false);
+			addActionsToToolbar(form.getToolBarManager());
 			chartLegend.getControl().dispose();
-			buildChart();
+			form.getToolBarManager().update(true);
+			setupLaneFilter();
+			buildChart(true);
 			table.getManager().setSelectionState(histogramSelectionState);
 			tableFilterComponent.loadState(state.getChild(THREADS_TABLE_FILTER));
+			for (Item columnWidget : ((TableViewer) table.getManager().getViewer()).getTable().getColumns()) {
+				columnWidget.addListener(SWT.Selection, e -> buildChart(false));
+			}
 			chart.setVisibleRange(visibleRange.getStart(), visibleRange.getEnd());
 			onFilterChange(tableFilter);
 		}
 
+		private void addActionsToToolbar(IToolBarManager tb) {
+			foldTableAction = ActionToolkit.checkAction(selected -> {
+				performToolbarAction(FOLD_TABLE_ACTION, selected);
+			}, sash.getWeights()[0] == 0 ? Messages.ThreadsPage_SHOW_TABLE_TOOLTIP
+					: Messages.ThreadsPage_FOLD_TABLE_TOOLTIP,
+					FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.ICON_TABLE));
+			foldTableAction.setChecked(sash.getWeights()[0] == 0 ? false : true);
+
+			foldChartAction = ActionToolkit.checkAction(selected -> {
+				performToolbarAction(FOLD_CHART_ACTION, selected);
+			}, sash.getWeights()[1] == 0 ? Messages.ThreadsPage_SHOW_CHART_TOOLTIP
+					: Messages.ThreadsPage_FOLD_CHART_TOOLTIP,
+					FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.ICON_CHART_BAR));
+			foldChartAction.setChecked(sash.getWeights()[1] == 0 ? false : true);
+
+			tb.add(new GroupMarker(TOOLBAR_FOLD_ACTIONS));
+			tb.appendToGroup(TOOLBAR_FOLD_ACTIONS, foldTableAction);
+			tb.appendToGroup(TOOLBAR_FOLD_ACTIONS, foldChartAction);
+			tb.appendToGroup(TOOLBAR_FOLD_ACTIONS, new Separator());
+
+			tb.add(ActionToolkit.action(() -> lanes.openEditLanesDialog(mms, false), Messages.ThreadsPage_EDIT_LANES,
+					FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.ICON_LANES_EDIT)));
+		}
+
+		private void addResizeListenerToTableAndChartComponents() {
+			tableFilterComponent.getComponent().addListener(SWT.Resize, new Listener() {
+				@Override
+				public void handleEvent(Event event) {
+					if (!foldTableAction.isChecked() && tableFilterComponent.getComponent().getSize().y > 0) {
+						foldTableAction.setChecked(true);
+					}
+				}
+			});
+
+			canvasSash.addListener(SWT.Resize, new Listener() {
+				@Override
+				public void handleEvent(Event event) {
+					if (!foldChartAction.isChecked() && chartCanvas.getSize().y > 0) {
+						foldChartAction.setChecked(true);
+					}
+				}
+			});
+		}
+
+		private void performToolbarAction(String action, boolean selected) {
+			switch (action) {
+			case FOLD_TABLE_ACTION:
+				if (selected) {
+					sash.setWeights(this.getStoredSashWeights());
+					foldTableAction.setToolTipText(Messages.ThreadsPage_FOLD_TABLE_TOOLTIP);
+				} else {
+					// if the chart is folded, don't fold the table
+					if (sash.getWeights()[1] == 0) {
+						this.foldTableAction.setChecked(true);
+					} else {
+						this.setStoredSashWeights(sash.getWeights());
+						sash.setWeights(new int[] {0, 2});
+						foldTableAction.setToolTipText(Messages.ThreadsPage_SHOW_TABLE_TOOLTIP);
+					}
+				}
+				break;
+			case FOLD_CHART_ACTION:
+				if (selected) {
+					sash.setWeights(this.getStoredSashWeights());
+					foldChartAction.setToolTipText(Messages.ThreadsPage_FOLD_CHART_TOOLTIP);
+				} else {
+					// if the table is folded, don't fold the chart
+					if (sash.getWeights()[0] == 0) {
+						this.foldChartAction.setChecked(true);
+					} else {
+						this.setStoredSashWeights(sash.getWeights());
+						sash.setWeights(new int[] {1, 0});
+						foldChartAction.setToolTipText(Messages.ThreadsPage_SHOW_CHART_TOOLTIP);
+					}
+				}
+				break;
+			}
+		}
+
+		private void initializeStoredSashWeights() {
+			// if either the chart or table are folded on init, store a default value of {1, 2}
+			if (sash.getWeights()[0] == 0 || sash.getWeights()[1] == 0) {
+				this.setStoredSashWeights(new int[] {1, 2});
+			} else {
+				this.setStoredSashWeights(sash.getWeights());
+			}
+		}
+
+		protected int[] getStoredSashWeights() {
+			return this.weights;
+		}
+
+		protected void setStoredSashWeights(int[] weights) {
+			this.weights = weights;
+		}
+
+		private void setupLaneFilter() {
+			MCContextMenuManager[] mms = {mmChart, mmText};
+			laneFilter = new DropdownLaneFilter(controlBar.getLaneFilterContainer(), lanes, mms);
+			laneFilter.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));
+		}
+
 		/**
 		 * Hides a thread from the chart and rebuilds the chart
 		 */
 		private void hideThread(Object thread) {
 			if (this.threadRows != null && this.threadRows.size() > 0 && thread instanceof IMCThread) {
 				int index = indexOfThread(thread);
 				if (index != -1) {
 					this.threadRows.remove(index);
 					this.reloadThreads = false;
-					buildChart();
+					buildChart(false);
 					if (!this.isChartModified) {
 						this.isChartModified = true;
 						setResetChartActionEnablement(true);
 					}
 				}
@@ -229,43 +353,52 @@
 		}
 
 		/**
 		 * Update the context menu to include actions to hide threads and reset the chart
 		 */
-		private void addActionsToContextMenu(MCContextMenuManager mm) {
-			mm.add(new Separator());
+		private void addActionsToContextMenu() {
+			mmChart.add(new Separator());
+			mmText.add(new Separator());
+			IAction hideThreadActionChart = ActionToolkit.action(
+					() -> this.hideThread(chartCanvas.getHoveredItemData()), Messages.ThreadsPage_HIDE_THREAD_ACTION,
+					UIPlugin.getDefault().getMCImageDescriptor(UIPlugin.ICON_DELETE));
+			hideThreadActionChart.setId(HIDE_THREAD);
+			this.hideThreadActionChart = hideThreadActionChart;
+			mmChart.add(hideThreadActionChart);
 
-			IAction hideThreadAction = ActionToolkit.action(() -> this.hideThread(chartCanvas.getHoveredItemData()),
+			IAction hideThreadActionText = ActionToolkit.action(() -> this.hideThread(textCanvas.getHoveredItemData()),
 					Messages.ThreadsPage_HIDE_THREAD_ACTION,
 					UIPlugin.getDefault().getMCImageDescriptor(UIPlugin.ICON_DELETE));
-			hideThreadAction.setId(HIDE_THREAD);
-			this.hideThreadAction = hideThreadAction;
-			mm.add(hideThreadAction);
+			hideThreadActionText.setId(HIDE_THREAD);
+			this.hideThreadActionText = hideThreadActionText;
+			mmText.add(hideThreadActionText);
 
 			IAction resetChartAction = ActionToolkit.action(() -> this.resetChartToSelection(),
 					Messages.ThreadsPage_RESET_CHART_TO_SELECTION_ACTION,
 					UIPlugin.getDefault().getMCImageDescriptor(UIPlugin.ICON_REFRESH));
 			resetChartAction.setId(RESET_CHART);
 			resetChartAction.setEnabled(this.isChartModified);
 			this.resetChartAction = resetChartAction;
-			mm.add(resetChartAction);
+			mmChart.add(resetChartAction);
+			mmText.add(resetChartAction);
 
 			this.isChartMenuActionsInit = true;
 		}
 
 		/**
 		 * Redraws the chart, and disables the reset chart menu action
 		 */
 		private void resetChartToSelection() {
-			buildChart();
+			buildChart(false);
 			this.isChartModified = false;
 			setResetChartActionEnablement(false);
 			setHideThreadActionEnablement(true);
 		}
 
 		private void setHideThreadActionEnablement(Boolean enabled) {
-			this.hideThreadAction.setEnabled(enabled);
+			this.hideThreadActionChart.setEnabled(enabled);
+			this.hideThreadActionText.setEnabled(enabled);
 		}
 
 		private void setResetChartActionEnablement(Boolean enabled) {
 			this.resetChartAction.setEnabled(enabled);
 		}
@@ -277,26 +410,28 @@
 		}
 
 		@Override
 		protected IXDataRenderer getChartRenderer(IItemCollection itemsInTable, HistogramSelection tableSelection) {
 			List<IXDataRenderer> rows = new ArrayList<>();
-
+			ItemHistogram histogram = table;
 			IItemCollection selectedItems;
 			HistogramSelection selection;
 			if (tableSelection.getRowCount() == 0) {
 				selectedItems = itemsInTable;
-				selection = table.getAllRows();
+				selection = histogram.getAllRows();
 			} else {
 				selectedItems = tableSelection.getItems();
 				selection = tableSelection;
 			}
 			boolean useDefaultSelection = rows.size() > 1;
 			if (lanes.getLaneDefinitions().stream().anyMatch(a -> a.isEnabled()) && selection.getRowCount() > 0) {
 				if (this.reloadThreads) {
 					this.threadRows = selection
 							.getSelectedRows((object, items) -> lanes.buildThreadRenderer(object, items))
 							.collect(Collectors.toList());
+					chartCanvas.setNumItems(this.threadRows.size());
+					textCanvas.setNumItems(this.threadRows.size());
 					this.isChartModified = false;
 					if (this.isChartMenuActionsInit) {
 						setResetChartActionEnablement(false);
 						setHideThreadActionEnablement(true);
 					}
@@ -341,11 +476,11 @@
 		@Override
 		protected List<IAction> initializeChartConfiguration(IState state) {
 			this.isChartMenuActionsInit = false;
 			this.isChartModified = false;
 			this.reloadThreads = true;
-			lanes = new ThreadGraphLanes(() -> getDataSource(), () -> buildChart());
+			lanes = new ThreadGraphLanes(() -> getDataSource(), () -> buildChart(false));
 			return lanes.initializeChartConfiguration(Stream.of(state.getChildren(THREAD_LANE)));
 		}
 	}
 
 	private FlavorSelectorState flavorSelectorState;
