diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ *
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
  *
@@ -101,33 +101,44 @@
 			}
 			return PredicateToolkit.falsePredicate();
 		}
 	};
 
-	private static class EditLanesWizardPage extends WizardPage implements IPerformFinishable {
+	static class EditLanesContainer extends Composite {
+
+		final EventTypeFolderNode root;
+		final List<LaneDefinition> lanes;
 
-		private final EventTypeFolderNode root;
-		private final List<LaneDefinition> lanes;
 		private LaneDefinition restLane;
 		private TypeFilterBuilder filterEditor;
 		private CheckboxTableViewer lanesViewer;
 		private Object selected;
+		private Runnable updateChart;
+		private boolean isDropdownFilter;
 
-		private EditLanesWizardPage(EventTypeFolderNode root, Collection<LaneDefinition> lanesInput) {
-			super("EditFilterLanesPage"); //$NON-NLS-1$
+		EditLanesContainer(Composite parent, EventTypeFolderNode root, List<LaneDefinition> lanes) {
+			this(parent, root, lanes, null);
+		}
+
+		EditLanesContainer(Composite parent, EventTypeFolderNode root, List<LaneDefinition> lanes, Runnable action) {
+			super(parent, SWT.NONE);
 			this.root = root;
-			this.lanes = new ArrayList<>(lanesInput);
+			this.lanes = lanes;
+			this.updateChart = action;
 			restLane = ensureRestLane(lanes);
+			init();
 		}
 
-		@Override
-		public void createControl(Composite parent) {
+		public List<LaneDefinition> getLanes() {
+			return lanes;
+		}
+
+		private void init() {
 			// FIXME: Do we want to group under categories somehow, or just hide the filters that don't have any existing event types.
-			Composite container = new Composite(parent, SWT.NONE);
-			container.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
+			this.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
 
-			Composite laneHeaderContainer = new Composite(container, SWT.NONE);
+			Composite laneHeaderContainer = new Composite(this, SWT.NONE);
 			laneHeaderContainer.setLayout(GridLayoutFactory.swtDefaults().create());
 			laneHeaderContainer.setLayoutData(GridDataFactory.fillDefaults().create());
 
 			// FIXME: Add a duplicate action?
 			IAction moveUpAction = ActionToolkit.action(() -> moveSelected(true), Messages.LANES_MOVE_UP_ACTION,
@@ -143,16 +154,16 @@
 			toolbar.setLayoutData(GridDataFactory.fillDefaults().create());
 
 			Label lanesTitle = new Label(laneHeaderContainer, SWT.NONE);
 			lanesTitle.setText(Messages.LANES_EDITOR_LABEL);
 			lanesTitle.setLayoutData(GridDataFactory.fillDefaults().create());
-			Label filterTitle = new Label(container, SWT.NONE);
+			Label filterTitle = new Label(this, SWT.NONE);
 			filterTitle.setText(Messages.LANES_FILTER_LABEL);
 			filterTitle.setLayoutData(
 					GridDataFactory.fillDefaults().grab(true, false).align(SWT.BEGINNING, SWT.END).create());
 
-			lanesViewer = CheckboxTableViewer.newCheckList(container, SWT.BORDER | SWT.V_SCROLL);
+			lanesViewer = CheckboxTableViewer.newCheckList(this, SWT.BORDER | SWT.V_SCROLL);
 			TableViewerColumn viewerColumn = new TableViewerColumn(lanesViewer, SWT.NONE);
 			viewerColumn.getColumn().setText(Messages.LANES_LANE_COLUMN);
 			viewerColumn.getColumn().setWidth(200);
 			// FIXME: Would like to enable editing by some other means than single-clicking, but seems a bit tricky.
 			viewerColumn.setEditingSupport(new EditingSupport(lanesViewer) {
@@ -269,21 +280,20 @@
 			// FIXME: Add icon
 			mm.appendToGroup(MCContextMenuManager.GROUP_EDIT, addAction);
 
 			mm.appendToGroup(MCContextMenuManager.GROUP_EDIT, removeAction);
 
-			filterEditor = new TypeFilterBuilder(container, this::onTypeFilterChange);
+			filterEditor = new TypeFilterBuilder(this, this::onTypeFilterChange);
 			filterEditor.setInput(root);
 			filterEditor.getControl().setLayoutData(GridDataFactory.fillDefaults().grab(true, true).create());
+			isDropdownFilter = updateChart != null ? true : false;
 			lanesViewer.getControl().setLayoutData(GridDataFactory.fillDefaults().grab(false, true).create());
 
 			lanesViewer.addSelectionChangedListener(
 					e -> laneSelectionChanges(((IStructuredSelection) e.getSelection()).getFirstElement()));
 			LaneDefinition firstLane = lanes.get(0);
 			lanesViewer.setSelection(new StructuredSelection(firstLane));
-
-			setControl(container);
 		}
 
 		private void addLane() {
 			int selectIndex = Math.max(0, lanes.indexOf(selected));
 			IItemFilter emptyFilter = ItemFilters.type(Collections.emptySet());
@@ -302,10 +312,13 @@
 							NLS.bind(Messages.LANES_EDIT_NOT_ALLOWED_WARNING_DESC, selectedLane.getName()));
 					// FIXME: Can we refresh the filter editor to show that nothing has changed?
 				}
 			}
 			lanesViewer.update(selected, null);
+			if (isDropdownFilter) {
+				updateChart();
+			}
 		}
 
 		private void deleteSelected() {
 			// FIXME: It's currently not possible to delete the last lane
 			int selectIndex = Math.max(0, lanes.indexOf(selected) - 1);
@@ -330,57 +343,105 @@
 			}
 		}
 
 		private void laneSelectionChanges(Object newSelected) {
 			int selectedIndex = lanes.indexOf(newSelected);
-			if (this.selected != newSelected) {
-				saveFilter();
-				this.selected = lanes.get(selectedIndex);
-				if (selected instanceof LaneDefinition) {
-					Types typesFilter;
-					if (((LaneDefinition) selected).getFilter() instanceof Types) {
-						typesFilter = ((Types) ((LaneDefinition) selected).getFilter());
-					} else {
-						typesFilter = (Types) ItemFilters.convertToTypes(((LaneDefinition) selected).getFilter(),
-								filterEditor.getAllTypes());
+			if (selectedIndex == -1 && isDropdownFilter) {
+				selectedIndex = findLaneDefinitionIndexByName(selected);
+			}
+			saveFilter();
+			this.selected = lanes.get(selectedIndex);
+			if (selected instanceof LaneDefinition) {
+				Types typesFilter;
+				if (((LaneDefinition) selected).getFilter() instanceof Types) {
+					typesFilter = ((Types) ((LaneDefinition) selected).getFilter());
+				} else {
+					typesFilter = (Types) ItemFilters.convertToTypes(((LaneDefinition) selected).getFilter(),
+							filterEditor.getAllTypes());
+				}
+				filterEditor.selectTypes(typesFilter.getTypes());
+			}
+			if (isDropdownFilter) {
+				updateChart();
+			}
+		}
+
+		private void updateChart() {
+			saveFilter(); // updates the LaneDefinition with the new filter
+			updateChart.run(); // repaints the chart and text canvases
+		}
+
+		private int findLaneDefinitionIndexByName(Object selected) {
+			int index = -1;
+			if (selected != null) {
+				for (int i = 0; i < lanes.size(); i++) {
+					if (lanes.get(i).getName().equals(((LaneDefinition) selected).getName())) {
+						index = i;
+						break;
 					}
-					filterEditor.selectTypes(typesFilter.getTypes());
 				}
 			}
+			return index;
 		}
 
 		private void saveFilter() {
 			int selectedIndex = lanes.indexOf(selected);
+			if (selectedIndex == -1 && isDropdownFilter) {
+				selectedIndex = findLaneDefinitionIndexByName(selected);
+			}
 			if (selectedIndex >= 0) {
 				LaneDefinition ld = lanes.get(selectedIndex);
-				if (!ld.isRestLane()) {
-					IItemFilter newFilter = ItemFilters
-							.type(filterEditor.getCheckedTypeIds().collect(Collectors.toSet()));
-					LaneDefinition newLd = new LaneDefinition(ld.name, lanesViewer.getChecked(ld), newFilter,
-							ld.isRestLane);
-					lanes.set(selectedIndex, newLd);
-					lanesViewer.replace(newLd, selectedIndex);
-					if (restLane != null) {
-						LaneDefinition newRest = new LaneDefinition(restLane.name, restLane.enabled,
-								getRestFilter(lanes), true);
-						int restIndex = lanes.indexOf(restLane);
-						lanes.set(restIndex, newRest);
-						lanesViewer.replace(newRest, restIndex);
-						restLane = newRest;
-					}
-					lanesViewer.refresh();
+				IItemFilter newFilter = ItemFilters.type(filterEditor.getCheckedTypeIds().collect(Collectors.toSet()));
+				LaneDefinition newLd = new LaneDefinition(ld.name, lanesViewer.getChecked(ld), newFilter,
+						ld.isRestLane);
+				lanes.set(selectedIndex, newLd);
+				lanesViewer.replace(newLd, selectedIndex);
+				if (ld.isRestLane()) {
+					restLane = newLd;
+				} else {
+					LaneDefinition newRest = new LaneDefinition(restLane.name, restLane.enabled, getRestFilter(lanes),
+							true);
+					int restIndex = findLaneDefinitionIndexByName(restLane);
+					lanes.set(restIndex, newRest);
+					lanesViewer.replace(newRest, restIndex);
+					restLane = newRest;
 				}
+				lanesViewer.refresh();
 			}
 		}
+	}
+
+	private static class EditLanesWizardPage extends WizardPage implements IPerformFinishable {
+
+		private EditLanesContainer container;
+		protected EventTypeFolderNode root;
+		private List<LaneDefinition> lanes;
+
+		private EditLanesWizardPage(EventTypeFolderNode root, Collection<LaneDefinition> lanesInput) {
+			super("EditFilterLanesPage"); //$NON-NLS-1$
+			this.root = root;
+			this.lanes = new ArrayList<>(lanesInput);
+		}
+
+		public List<LaneDefinition> getLanes() {
+			return lanes;
+		}
+
+		@Override
+		public void createControl(Composite parent) {
+			container = new EditLanesContainer(parent, root, lanes);
+			setControl(container);
+		}
 
 		@Override
 		public boolean performFinish() {
-			saveFilter();
+			container.saveFilter();
 			for (int i = 0; i < lanes.size(); i++) {
 				LaneDefinition ld = lanes.get(i);
-				if (ld.isEnabled() != lanesViewer.getChecked(ld)) {
-					lanes.set(i, new LaneDefinition(ld.name, lanesViewer.getChecked(ld), ld.filter, ld.isRestLane));
+				if (ld.isEnabled() != container.lanesViewer.getChecked(ld)) {
+					lanes.set(i, new LaneDefinition(ld.name, container.lanesViewer.getChecked(ld), ld.filter,
+							ld.isRestLane));
 				}
 			}
 			return true;
 		}
 	}
@@ -432,10 +493,14 @@
 
 		public boolean isRestLane() {
 			return isRestLane;
 		}
 
+		public boolean isEnabledAndNotRestLane() {
+			return enabled && !isRestLane;
+		}
+
 		@Override
 		public void saveTo(IWritableState writableState) {
 			writableState.putString(NAME, name);
 			StateToolkit.writeBoolean(writableState, ENABLED, enabled);
 			StateToolkit.writeBoolean(writableState, IS_REST_LANE, isRestLane);
@@ -471,11 +536,11 @@
 		EventTypeFolderNode root, List<LaneDefinition> lanes, String title, String description) {
 		EditLanesWizardPage page = new EditLanesWizardPage(root, lanes);
 		page.setTitle(title);
 		page.setDescription(description);
 		if (OnePageWizardDialog.open(page, 500, 600) == Window.OK) {
-			return page.lanes.stream().filter(LaneEditor::laneIncludesTypes).collect(Collectors.toList());
+			return page.getLanes().stream().filter(LaneEditor::laneIncludesTypes).collect(Collectors.toList());
 		}
 		return lanes;
 	}
 
 	private static boolean laneIncludesTypes(LaneDefinition ld) {
