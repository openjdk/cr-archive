diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DropdownLaneFilter.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DropdownLaneFilter.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DropdownLaneFilter.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DropdownLaneFilter.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2019, Red Hat Inc. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
  *
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -47,12 +47,13 @@
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 
 import org.openjdk.jmc.flightrecorder.ui.common.LaneEditor.EditLanesContainer;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
+import org.openjdk.jmc.ui.common.util.Environment;
+import org.openjdk.jmc.ui.common.util.Environment.OSType;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
-import org.openjdk.jmc.ui.misc.PatternFly.Palette;
 
 public class DropdownLaneFilter extends Composite {
 	private static final int EXTRA_SHELL_WIDTH = 300;
 	private static final int SHELL_HEIGHT = 500;
 	private Button dropdownButton;
@@ -64,24 +65,37 @@
 
 	public DropdownLaneFilter(Composite parent, ThreadGraphLanes lanes, MCContextMenuManager[] mms) {
 		super(parent, SWT.NONE);
 		this.lanes = lanes;
 		this.mms = mms;
-		this.setBackground(Palette.getThreadsPageBackgroundColor());
-		GridLayout layout = new GridLayout();
+		this.layout = new GridLayout();
 		layout.marginHeight = 0;
 		layout.marginWidth = 0;
-		this.layout = layout;
 		setLayout(layout);
 		dropdownButton = new Button(this, SWT.TOGGLE);
 		dropdownButton.setLayoutData(new GridData(GridData.FILL_BOTH));
 		dropdownButton.setText(Messages.DropdownLaneFilter_THREAD_STATE_SELECTION);
 		dropdownButton.addListener(SWT.MouseUp, new Listener() {
 			@Override
 			public void handleEvent(Event e) {
-				if (dropdownButton.getSelection()) {
-					displayDropdown();
+				/*
+				 * Windows: works IFF the menu item that is toggled is also highlight. e.g, if the
+				 * user wanted to toggle the Java Compiler lanes, then it's not enough to just click
+				 * the checkbox - the Java Compiler menu item must be highlighted at the time of
+				 * toggling
+				 *
+				 * MacOS: There are currently issues with paint timings with Mac OS at the moment
+				 * where toggling an activity lane from the dropdown does not redraw the chart. This
+				 * may be related to the Windows issue, and may be a SWT limitation.
+				 */
+				if (Environment.getOSType() != OSType.LINUX) {
+					lanes.openEditLanesDialog(mms, false);
+					dropdownButton.setSelection(false);
+				} else {
+					if (dropdownButton.getSelection()) {
+						displayDropdown();
+					}
 				}
 			}
 		});
 	}
 
