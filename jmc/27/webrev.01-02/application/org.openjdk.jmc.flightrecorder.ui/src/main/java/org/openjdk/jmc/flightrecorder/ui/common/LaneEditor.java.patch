diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LaneEditor.java
@@ -115,27 +115,27 @@
 		private Runnable updateChart;
 		private boolean isDropdownFilter;
 
 		EditLanesContainer(Composite parent, EventTypeFolderNode root, List<LaneDefinition> lanes) {
 			this(parent, root, lanes, null);
-        }
+		}
 
 		EditLanesContainer(Composite parent, EventTypeFolderNode root, List<LaneDefinition> lanes, Runnable action) {
 			super(parent, SWT.NONE);
-            this.root = root;
-            this.lanes = lanes;
-            this.updateChart = action;
-            restLane = ensureRestLane(lanes);
-            init();
+			this.root = root;
+			this.lanes = lanes;
+			this.updateChart = action;
+			restLane = ensureRestLane(lanes);
+			init();
 		}
 
 		public List<LaneDefinition> getLanes() {
 			return lanes;
 		}
 
-        private void init() {
-            // FIXME: Do we want to group under categories somehow, or just hide the filters that don't have any existing event types.
+		private void init() {
+			// FIXME: Do we want to group under categories somehow, or just hide the filters that don't have any existing event types.
 			this.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
 
 			Composite laneHeaderContainer = new Composite(this, SWT.NONE);
 			laneHeaderContainer.setLayout(GridLayoutFactory.swtDefaults().create());
 			laneHeaderContainer.setLayoutData(GridDataFactory.fillDefaults().create());
@@ -290,11 +290,11 @@
 
 			lanesViewer.addSelectionChangedListener(
 					e -> laneSelectionChanges(((IStructuredSelection) e.getSelection()).getFirstElement()));
 			LaneDefinition firstLane = lanes.get(0);
 			lanesViewer.setSelection(new StructuredSelection(firstLane));
-        }
+		}
 
 		private void addLane() {
 			int selectIndex = Math.max(0, lanes.indexOf(selected));
 			IItemFilter emptyFilter = ItemFilters.type(Collections.emptySet());
 			LaneDefinition newEmpty = new LaneDefinition(null, false, emptyFilter, false);
@@ -367,11 +367,11 @@
 
 		private void updateChart() {
 			saveFilter(); // updates the LaneDefinition with the new filter
 			updateChart.run(); // repaints the chart and text canvases
 		}
-		
+
 		private int findLaneDefinitionIndexByName(Object selected) {
 			int index = -1;
 			if (selected != null) {
 				for (int i = 0; i < lanes.size(); i++) {
 					if (lanes.get(i).getName().equals(((LaneDefinition) selected).getName())) {
@@ -388,27 +388,26 @@
 			if (selectedIndex == -1 && isDropdownFilter) {
 				selectedIndex = findLaneDefinitionIndexByName(selected);
 			}
 			if (selectedIndex >= 0) {
 				LaneDefinition ld = lanes.get(selectedIndex);
-				if (!ld.isRestLane()) {
-					IItemFilter newFilter = ItemFilters
-							.type(filterEditor.getCheckedTypeIds().collect(Collectors.toSet()));
-					LaneDefinition newLd = new LaneDefinition(ld.name, lanesViewer.getChecked(ld), newFilter,
-							ld.isRestLane);
-					lanes.set(selectedIndex, newLd);
-					lanesViewer.replace(newLd, selectedIndex);
-					if (restLane != null) {
-						LaneDefinition newRest = new LaneDefinition(restLane.name, restLane.enabled,
-								getRestFilter(lanes), true);
-						int restIndex = lanes.indexOf(restLane);
-						lanes.set(restIndex, newRest);
-						lanesViewer.replace(newRest, restIndex);
-						restLane = newRest;
-					}
-					lanesViewer.refresh();
+				IItemFilter newFilter = ItemFilters.type(filterEditor.getCheckedTypeIds().collect(Collectors.toSet()));
+				LaneDefinition newLd = new LaneDefinition(ld.name, lanesViewer.getChecked(ld), newFilter,
+						ld.isRestLane);
+				lanes.set(selectedIndex, newLd);
+				lanesViewer.replace(newLd, selectedIndex);
+				if (ld.isRestLane()) {
+					restLane = newLd;
+				} else {
+					LaneDefinition newRest = new LaneDefinition(restLane.name, restLane.enabled, getRestFilter(lanes),
+							true);
+					int restIndex = findLaneDefinitionIndexByName(restLane);
+					lanes.set(restIndex, newRest);
+					lanesViewer.replace(newRest, restIndex);
+					restLane = newRest;
 				}
+				lanesViewer.refresh();
 			}
 		}
 	}
 
 	private static class EditLanesWizardPage extends WizardPage implements IPerformFinishable {
@@ -437,11 +436,12 @@
 		public boolean performFinish() {
 			container.saveFilter();
 			for (int i = 0; i < lanes.size(); i++) {
 				LaneDefinition ld = lanes.get(i);
 				if (ld.isEnabled() != container.lanesViewer.getChecked(ld)) {
-					lanes.set(i, new LaneDefinition(ld.name, container.lanesViewer.getChecked(ld), ld.filter, ld.isRestLane));
+					lanes.set(i, new LaneDefinition(ld.name, container.lanesViewer.getChecked(ld), ld.filter,
+							ld.isRestLane));
 				}
 			}
 			return true;
 		}
 	}
