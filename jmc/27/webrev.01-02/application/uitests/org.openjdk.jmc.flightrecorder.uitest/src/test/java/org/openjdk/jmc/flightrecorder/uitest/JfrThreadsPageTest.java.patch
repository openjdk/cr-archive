diff a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrThreadsPageTest.java b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrThreadsPageTest.java
--- a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrThreadsPageTest.java
+++ b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrThreadsPageTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2019, Red Hat Inc. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Red Hat Inc. All rights reserved.
  *
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -31,10 +31,11 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.uitest;
 
+import java.util.Arrays;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.function.Supplier;
@@ -47,10 +48,11 @@
 import org.openjdk.jmc.test.jemmy.misc.wrappers.MCChartCanvas;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.JfrNavigator;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.JfrUi;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.MCButton;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.MCMenu;
+import org.openjdk.jmc.test.jemmy.misc.wrappers.MCSashForm;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.MCTable;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.MCText;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.MCTextCanvas;
 import org.openjdk.jmc.test.jemmy.misc.wrappers.MCToolBar;
 import org.openjdk.jmc.ui.UIPlugin;
@@ -63,46 +65,52 @@
 	private static final String RESET_BUTTON = "Reset";
 	private static final String START_TIME = "08:06:19:489";
 	private static final String NEW_START_TIME = "08:06:19:500";
 	private static final String INVALID_START_TIME = "08:06:19:480";
 	private static final String INVALID_END_TIME = "08:07:19:733";
-	private static final String DEFAULT_ZOOM = "100.00 %";
+	private static final String FOLD_CHART = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_FOLD_CHART_TOOLTIP;
+	private static final String FOLD_TABLE = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_FOLD_TABLE_TOOLTIP;
 	private static final String HIDE_THREAD = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_HIDE_THREAD_ACTION;
 	private static final String RESET_CHART = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_RESET_CHART_TO_SELECTION_ACTION;
-	private static final String TABLE_TOOLTIP = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_VIEW_THREAD_DETAILS;
-	private static final String TABLE_SHELL_TEXT = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_TABLE_POPUP_TITLE;
+	private static final String SHOW_CHART = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_SHOW_CHART_TOOLTIP;
+	private static final String SHOW_TABLE = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_SHOW_TABLE_TOOLTIP;
 	private static final String TIME_FILTER_ERROR = org.openjdk.jmc.ui.misc.Messages.TimeFilter_ERROR;
 
 	private static MCChartCanvas chartCanvas;
+	private static MCSashForm sashForm;
 	private static MCTextCanvas textCanvas;
 	private static MCTable threadsTable;
+	private static MCToolBar toolbar;
 	private boolean selected;
 
 	@Rule
 	public MCUITestRule testRule = new MCUITestRule(verboseRuleOutput) {
 		@Override
 		public void before() {
 			JfrUi.openJfr(materialize("jfr", PLAIN_JFR, JfrThreadsPageTest.class));
 			JfrNavigator.selectTab(JfrUi.Tabs.THREADS);
+	        toolbar = MCToolBar.getByToolTip(SHOW_TABLE);
+	        toolbar.clickToolItem(SHOW_TABLE);
 			chartCanvas = MCChartCanvas.getChartCanvas();
 			textCanvas = MCTextCanvas.getTextCanvas();
 			selected = false;
+			sashForm = MCSashForm.getMCSashForm();
+			threadsTable = MCTable.getByColumnHeader(TABLE_COLUMN_HEADER);
 		}
 
 		@Override
 		public void after() {
 			selected = false;
+			toolbar.clickToolItem(FOLD_TABLE);
 			MCMenu.closeActiveEditor();
 		}
 	};
 
 	@Test
 	public void testTextCanvasSelection() throws InterruptedException, ExecutionException, TimeoutException {
-		openThreadsTable();
 		threadsTable.selectItems(0, 0);
 		Assert.assertEquals(1, threadsTable.getSelectionCount());
-		closeThreadsTable();
 
 		CompletableFuture<Void> future = new CompletableFuture<>();
 		CompletableFuture.supplyAsync(new Supplier<Void>() {
 
 			@Override
@@ -120,54 +128,49 @@
 		Assert.assertTrue(selected);
 	}
 
 	@Test
 	public void testZoom() {
+		MCText startTimeField = MCText.getByText(START_TIME);
 		MCButton zoomInBtn = MCButton.getByImage(UIPlugin.getDefault().getImage(UIPlugin.ICON_FA_ZOOM_IN));
 		MCButton zoomOutBtn = MCButton.getByImage(UIPlugin.getDefault().getImage(UIPlugin.ICON_FA_ZOOM_OUT));
-		MCText zoomDisplay = MCText.getByText(DEFAULT_ZOOM);
 
-		//zoom with display bar
-		Assert.assertEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
+		// zoom with display bar
+		Assert.assertEquals(START_TIME, startTimeField.getText());
 		zoomInBtn.click();
 		chartCanvas.clickChart();
-		Assert.assertNotEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
+		Assert.assertNotEquals(START_TIME, startTimeField.getText());
 
 		zoomOutBtn.click();
 		chartCanvas.clickChart();
-		Assert.assertEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
+		Assert.assertEquals(START_TIME, startTimeField.getText());
 
-		//zoom with controls
+		// zoom with controls
 		chartCanvas.clickChart();
 		chartCanvas.keyboardZoomIn();
-		Assert.assertNotEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
+		Assert.assertNotEquals(START_TIME, startTimeField.getText());
 
 		chartCanvas.keyboardZoomOut();
-		Assert.assertEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
+		Assert.assertEquals(START_TIME, startTimeField.getText());
 	}
 
 	@Test
 	public void testResetButtons() {
 		MCText StartTimeField = MCText.getByText(START_TIME);
-		MCText zoomDisplay = MCText.getByText(DEFAULT_ZOOM);
 		MCButton resetBtn = MCButton.getByLabel(RESET_BUTTON);
 		MCButton scaleToFitBtn = MCButton.getByImage(UIPlugin.getDefault().getImage(UIPlugin.ICON_FA_SCALE_TO_FIT));
 
 		StartTimeField.setText(NEW_START_TIME);
 		Assert.assertNotEquals(START_TIME, StartTimeField.getText());
-		Assert.assertNotEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
 
 		resetBtn.click();
 		Assert.assertEquals(START_TIME, StartTimeField.getText());
-		Assert.assertEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
 
 		StartTimeField.setText(NEW_START_TIME);
 		Assert.assertNotEquals(START_TIME, StartTimeField.getText());
-		Assert.assertNotEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
 
 		scaleToFitBtn.click();
-		Assert.assertEquals(zoomDisplay.getText(), DEFAULT_ZOOM);
 		Assert.assertEquals(START_TIME, StartTimeField.getText());
 	}
 
 	@Test
 	public void testTimeFilterInvalid() {
@@ -190,13 +193,11 @@
 		okButton.click();
 	}
 
 	@Test
 	public void testMenuItemEnablement() {
-		openThreadsTable();
 		final int numThreads = threadsTable.getItemCount();
-		closeThreadsTable();
 
 		Assert.assertTrue(numThreads > 0);
 
 		Assert.assertFalse(chartCanvas.isContextMenuItemEnabled(RESET_CHART));
 		Assert.assertTrue(chartCanvas.isContextMenuItemEnabled(HIDE_THREAD));
@@ -214,22 +215,18 @@
 
 	@Test
 	public void testHideAllThreads() {
 		final int numSelection = 7;
 
-		openThreadsTable();
 		final int numThreads = threadsTable.getItemCount();
-		closeThreadsTable();
 
 		Assert.assertTrue(numThreads > 0 && numThreads >= numSelection);
 		Assert.assertTrue(chartCanvas.isContextMenuItemEnabled(HIDE_THREAD));
 		Assert.assertFalse(chartCanvas.isContextMenuItemEnabled(RESET_CHART));
 
-		openThreadsTable();
 		// Select a limited number of threads in the chart using the table
 		threadsTable.selectItems(0, numSelection - 1);
-		closeThreadsTable();
 
 		// Hide all the threads from the chart
 		for (int i = 0; i < numSelection; i++) {
 			chartCanvas.clickContextMenuItem(HIDE_THREAD);
 		}
@@ -243,42 +240,71 @@
 		// Verify the menu item isEnabled values are back to their default values
 		Assert.assertTrue(chartCanvas.isContextMenuItemEnabled(HIDE_THREAD));
 		Assert.assertFalse(chartCanvas.isContextMenuItemEnabled(RESET_CHART));
 	}
 
-	@Test
-	public void testPopupTableSelection() {
-		openThreadsTable();
-		final int numSelection = 7;
-		final int numThreads = threadsTable.getItemCount();
-		Assert.assertTrue(numThreads > 0 && numThreads >= numSelection);
-
-		threadsTable.selectItems(0, numSelection - 1);
-		int originalSelection = threadsTable.getSelectionCount();
-		Assert.assertEquals(numSelection, originalSelection);
-		closeThreadsTable();
-
-		openThreadsTable();
-		int newSelection = threadsTable.getSelectionCount();
-		Assert.assertEquals(newSelection, originalSelection);
-		closeThreadsTable();
-	}
-
-	private void openThreadsTable() {
-		if (threadsTable == null) {
-			MCToolBar.focusMc();
-			MCToolBar tb = MCToolBar.getByToolTip(TABLE_TOOLTIP);
-			tb.clickToolItem(TABLE_TOOLTIP);
-			threadsTable = MCTable.getByColumnHeader(TABLE_SHELL_TEXT, TABLE_COLUMN_HEADER);
-		}
-	}
-
-	private void closeThreadsTable() {
-		if (threadsTable != null) {
-			MCButton okButton = MCButton.getByLabel(TABLE_SHELL_TEXT, OK_BUTTON);
-			okButton.click();
-			threadsTable = null;
-			MCToolBar.focusMc();
-		}
-	}
-
+    @Test
+    public void testFoldingChart() {
+        // Sash weights should both be non-zero to display the chart and table
+        Assert.assertTrue(sashForm.getWeights()[0] != 0 && sashForm.getWeights()[1] != 0);
+
+        // Sash weight corresponding to the chart should be zero when folded
+        toolbar.clickToolItem(FOLD_CHART);
+        Assert.assertTrue(sashForm.getWeights()[0] != 0 && sashForm.getWeights()[1] == 0);
+
+        // When unfolded, the sash weights should be non-zero
+        toolbar.clickToolItem(SHOW_CHART);
+        Assert.assertTrue(sashForm.getWeights()[0] != 0 && sashForm.getWeights()[1] != 0);
+    }
+
+    @Test
+    public void testFoldingTable() {
+        // Sash weights should both be non-zero to display the chart and table
+        Assert.assertTrue(sashForm.getWeights()[0] != 0 && sashForm.getWeights()[1] != 0);
+
+        // Sash weight corresponding to the table should be zero when folded
+        toolbar.clickToolItem(FOLD_TABLE);
+        Assert.assertTrue(sashForm.getWeights()[0] == 0 && sashForm.getWeights()[1] != 0);
+
+        // When unfolded, the sash weights should be non-zero
+        toolbar.clickToolItem(SHOW_TABLE);
+        Assert.assertTrue(sashForm.getWeights()[0] != 0 && sashForm.getWeights()[1] != 0);
+    }
+
+    @Test
+    public void testInvalidFoldingActions() {
+        toolbar.clickToolItem(FOLD_TABLE);
+        int[] weights = sashForm.getWeights();
+        toolbar.clickToolItem(FOLD_CHART);
+        // If the table is already folded, the fold chart action shouldn't work
+        Assert.assertTrue(Arrays.equals(weights, sashForm.getWeights()));
+        toolbar.clickToolItem(SHOW_TABLE);
+
+        toolbar.clickToolItem(FOLD_CHART);
+        weights = sashForm.getWeights();
+        toolbar.clickToolItem(FOLD_TABLE);
+        // If the chart is already folded, the fold table action shouldn't work
+        Assert.assertTrue(Arrays.equals(weights, sashForm.getWeights()));
+
+        // Bring back the chart before retiring
+        toolbar.clickToolItem(SHOW_CHART);
+    }
+
+    @Test
+    public void testPersistingSashWeights() {
+        // Fold the table away
+        toolbar.clickToolItem(FOLD_TABLE);
+        int[] weights = sashForm.getWeights();
+        Assert.assertTrue(sashForm.getWeights()[0] == 0 && sashForm.getWeights()[1] != 0);
+        MCMenu.closeActiveEditor();
+
+        // Re-open the JFR file & verify the table is still folded
+        JfrUi.openJfr(materialize("jfr", PLAIN_JFR, JfrThreadsPageTest.class));
+        JfrNavigator.selectTab(JfrUi.Tabs.THREADS);
+        sashForm = MCSashForm.getMCSashForm();
+        Assert.assertTrue(Arrays.equals(weights, sashForm.getWeights()));
+
+        // Bring back the table before retiring
+        toolbar = MCToolBar.getByToolTip(SHOW_TABLE);
+        toolbar.clickToolItem(SHOW_TABLE);
+    }
 }
