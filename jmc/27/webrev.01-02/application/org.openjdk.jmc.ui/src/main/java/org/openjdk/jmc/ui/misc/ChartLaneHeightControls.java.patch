diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartLaneHeightControls.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartLaneHeightControls.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartLaneHeightControls.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartLaneHeightControls.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2019, Red Hat Inc. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
  *
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -39,44 +39,81 @@
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Listener;
 import org.openjdk.jmc.ui.UIPlugin;
-import org.openjdk.jmc.ui.misc.PatternFly.Palette;
 
 public class ChartLaneHeightControls extends Composite {
-	private Button incHeightBtn;
 	private Button decHeightBtn;
+	private Button incHeightBtn;
+	private Button overviewBtn;
 	private ChartCanvas chartCanvas;
 	private ChartTextCanvas textCanvas;
+	private static final int ADJUST_AMOUNT = 3;
 
-	public ChartLaneHeightControls(Composite parent, ChartCanvas chartCanvas, ChartTextCanvas textCanvas) {
+	public ChartLaneHeightControls(Composite parent) {
 		super(parent, SWT.NONE);
-		this.setLayout(new GridLayout(2, true));
-		this.chartCanvas = chartCanvas;
-		this.textCanvas = textCanvas;
-		this.setBackground(Palette.PF_BLACK_100.getSWTColor());
+		GridLayout gl = new GridLayout(3, true);
+		gl.horizontalSpacing = 0;
+		gl.marginWidth = 0;
+		this.setLayout(gl);
 
+		initDecreaseHeightButton();
+		initIncreaseHeightButton();
+		initOverviewButton();
+	}
+
+	private void initDecreaseHeightButton() {
 		decHeightBtn = new Button(this, SWT.PUSH);
 		decHeightBtn.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));
 		decHeightBtn.setImage(UIPlugin.getDefault().getImage(UIPlugin.ICON_FA_MINUS));
 		decHeightBtn.setToolTipText(Messages.ChartLaneHeightControls_LANE_HEIGHT_DECREASE_TOOLTIP);
 		decHeightBtn.addListener(SWT.Selection, new Listener() {
 			@Override
 			public void handleEvent(Event event) {
-				adjustLaneHeight(-1);
+				adjustLaneHeight(-ADJUST_AMOUNT);
 			}
 		});
+		decHeightBtn.setEnabled(false);
+	}
 
+	private void initIncreaseHeightButton() {
 		incHeightBtn = new Button(this, SWT.PUSH);
 		incHeightBtn.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));
 		incHeightBtn.setToolTipText(Messages.ChartLaneHeightControls_LANE_HEIGHT_INCREASE_TOOLTIP);
 		incHeightBtn.setImage(UIPlugin.getDefault().getImage(UIPlugin.ICON_FA_PLUS));
 		incHeightBtn.addListener(SWT.Selection, new Listener() {
 			@Override
 			public void handleEvent(Event event) {
-				adjustLaneHeight(1);
+				adjustLaneHeight(ADJUST_AMOUNT);
+			}
+		});
+	}
+
+	private void initOverviewButton() {
+		overviewBtn = new Button(this, SWT.TOGGLE);
+		overviewBtn.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));
+		overviewBtn.setToolTipText(Messages.ChartLaneHeightControls_OVERVIEW_BUTTON_TOOLTIP);
+		overviewBtn.setImage(UIPlugin.getDefault().getImage(UIPlugin.ICON_ADRESS));
+		overviewBtn.addListener(SWT.Selection, new Listener() {
+			@Override
+			public void handleEvent(Event event) {
+				if (!overviewBtn.getSelection()) {
+					chartCanvas.restoreLaneHeight();
+					chartCanvas.redrawChart();
+					if (textCanvas != null) {
+						textCanvas.restoreLaneHeight();
+						textCanvas.redrawChartText();
+					}
+				} else {
+					chartCanvas.setOverviewLaneHeight();
+					chartCanvas.redrawChart();
+					if (textCanvas != null) {
+						textCanvas.setOverviewLaneHeight();
+						textCanvas.redrawChartText();
+					}
+				}
 			}
 		});
 	}
 
 	private void adjustLaneHeight(int amount) {
@@ -84,8 +121,33 @@
 		chartCanvas.redrawChart();
 		if (textCanvas != null) {
 			textCanvas.adjustLaneHeight(amount);
 			textCanvas.redrawChartText();
 		}
+		if (chartCanvas.isLaneHeightMinimumSize()) {
+			decHeightBtn.setEnabled(false);
+		} else {
+			decHeightBtn.setEnabled(true);
+		}
+		if (overviewBtn.getSelection()) {
+			overviewBtn.setSelection(false);
+		}
+	}
+
+	void resetLaneHeightToMinimum() {
+		chartCanvas.resetLaneHeight();
+		if (textCanvas != null) {
+			textCanvas.resetLaneHeight();
+		}
+		decHeightBtn.setEnabled(false);
+		overviewBtn.setSelection(false);
+	}
+
+	void setChartCanvas(ChartCanvas chartCanvas) {
+		this.chartCanvas = chartCanvas;
+	}
+
+	void setTextCanvas(ChartTextCanvas textCanvas) {
+		this.textCanvas = textCanvas;
 	}
 
 }
