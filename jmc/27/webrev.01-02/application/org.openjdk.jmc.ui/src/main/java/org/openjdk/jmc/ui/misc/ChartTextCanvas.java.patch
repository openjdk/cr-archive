diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartTextCanvas.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartTextCanvas.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartTextCanvas.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartTextCanvas.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2019, Red Hat Inc. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
  *
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -65,14 +65,14 @@
 import org.openjdk.jmc.ui.common.util.Environment;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
 import org.openjdk.jmc.ui.misc.PatternFly.Palette;
 
 public class ChartTextCanvas extends Canvas {
-	private static final int DEFAULT_LANE_HEIGHT = 50;
-	private int laneHeight = DEFAULT_LANE_HEIGHT;
-	private int minLaneheight = 20;
-	private int numItems;
+	private int laneHeight;
+	private int savedLaneHeight;
+	private int minLaneHeight = -1;
+	private int numItems = 0;
 	private int lastMouseX = -1;
 	private int lastMouseY = -1;
 	private List<Rectangle2D> highlightRects;
 
 	private class Selector extends MouseAdapter implements MouseMoveListener, MouseTrackListener {
@@ -203,32 +203,30 @@
 		@Override
 		public void mouseHover(MouseEvent e) {
 		}
 	}
 
-	public void setNumItems(int numItems) {
-		this.numItems = numItems;
-	}
-
-	private int getNumItems() {
-		return numItems;
-	}
-
 	class Painter implements PaintListener {
 
 		@Override
 		public void paintControl(PaintEvent e) {
 			int minScrollWidth = (int) ((awtChart.getLongestCharWidth() + 10) * xScale);
 			int rectWidth = Math.max(minScrollWidth, getParent().getSize().x);
 			Rectangle rect = new Rectangle(0, 0, rectWidth, getParent().getSize().y);
-			if (getNumItems() != 1 && !(laneHeight * getNumItems() < rect.height)) {
-				rect.height = laneHeight * getNumItems();
+			if (getNumItems() > 0) {
+				if (minLaneHeight == -1) {
+					minLaneHeight = chartCanvas.calculateMinLaneHeight(rect);
+					laneHeight = minLaneHeight;
+				}
+				if (getNumItems() != 1 && !(laneHeight * getNumItems() < rect.height)) {
+					rect.height = laneHeight * getNumItems();
+				}
 			}
 
 			if (awtNeedsRedraw || !awtCanvas.hasImage(rect.width, rect.height)) {
 				Graphics2D g2d = awtCanvas.getGraphics(rect.width, rect.height);
-				minLaneheight = Math.max(20, (int) (g2d.getFontMetrics().getHeight() * xScale + 3));
+				minLaneHeight = (int) (g2d.getFontMetrics().getHeight() * xScale);
 				Point adjusted = chartCanvas.translateDisplayToImageCoordinates(rect.width, rect.height);
 				g2d.setColor(Palette.PF_BLACK_100.getAWTColor());
 				g2d.fillRect(0, 0, adjusted.x, adjusted.y);
 				render(g2d, adjusted.x, adjusted.y);
 				((ScrolledComposite) getParent()).setMinSize(rect.width, rect.height);
@@ -239,16 +237,43 @@
 			}
 			awtCanvas.paint(e, 0, 0);
 		}
 	}
 
-	public void adjustLaneHeight(int amount) {
-		laneHeight = Math.min(Math.max(minLaneheight, laneHeight + amount), DEFAULT_LANE_HEIGHT);
+	public void setNumItems(int numItems) {
+		this.numItems = numItems;
 	}
 
-	public void resetLaneHeight() {
-		laneHeight = DEFAULT_LANE_HEIGHT;
+	private int getNumItems() {
+		return numItems;
+	}
+
+	void setOverviewLaneHeight() {
+		this.savedLaneHeight = laneHeight;
+		setLaneHeight(-1);
+	}
+
+	void adjustLaneHeight(int amount) {
+		if (laneHeight == -1) {
+			restoreLaneHeight();
+		}
+		laneHeight = Math.max(minLaneHeight, laneHeight + amount);
+	}
+
+	void setLaneHeight(int height) {
+		this.laneHeight = height;
+	}
+
+	void restoreLaneHeight() {
+		laneHeight = savedLaneHeight;
+	}
+
+	void resetLaneHeight() {
+		if (minLaneHeight != -1) {
+			minLaneHeight = chartCanvas.initMinLaneHeight();
+			laneHeight = minLaneHeight;
+		}
 	}
 
 	class KeyNavigator implements KeyListener {
 
 		@Override
@@ -346,11 +371,11 @@
 
 	public void setHoveredItemData(Object data) {
 		this.hoveredItemData = data;
 	}
 
-	public void resetHoveredItemData() {
+	void resetHoveredItemData() {
 		this.hoveredItemData = null;
 	}
 
 	public void syncHighlightedRectangles(List<Rectangle2D> newRects) {
 		highlightRects = newRects;
@@ -407,11 +432,10 @@
 	public void setChartCanvas(ChartCanvas chartCanvas) {
 		this.chartCanvas = chartCanvas;
 	}
 
 	public void syncScroll(Point scrollPoint) {
-		getParent().getVerticalBar().setVisible(false);
 		((ScrolledComposite) getParent()).setOrigin(scrollPoint);
 	}
 
 	public void replaceRenderer(IXDataRenderer rendererRoot) {
 		assert awtChart != null;
@@ -440,11 +464,17 @@
 	/**
 	 * Mark both the (AWT) chart and the SWT control as needing a redraw.
 	 */
 	public void redrawChartText() {
 		awtNeedsRedraw = true;
-		redraw();
+		getDisplay().asyncExec(new Runnable() {
+			public void run() {
+				if (!isDisposed()) {
+					redraw();
+				}
+			}
+		});
 	}
 
 	private void redrawChart() {
 		if (chartCanvas != null) {
 			chartCanvas.redrawChart();
