diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartCanvas.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartCanvas.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartCanvas.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ChartCanvas.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -75,13 +75,15 @@
 import org.openjdk.jmc.ui.common.util.Environment.OSType;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
 import org.openjdk.jmc.ui.misc.PatternFly.Palette;
 
 public class ChartCanvas extends Canvas {
-	private static final int DEFAULT_LANE_HEIGHT = 50;
-	private int laneHeight = DEFAULT_LANE_HEIGHT;
-	private int minLaneheight = 20;
+	private int laneHeight;
+	private int minLaneHeight = -1;
+	private int minReadableLaneHeight;
+	private int savedLaneHeight;
+	private int numItems = 0;
 	private int lastMouseX = -1;
 	private int lastMouseY = -1;
 	private List<Rectangle2D> highlightRects;
 	private Object hoveredItemData;
 
@@ -215,46 +217,38 @@
 		@Override
 		public void mouseHover(MouseEvent e) {
 		}
 	}
 
-	private int numItems = 0;
-
-	public void setNumItems(int numItems) {
-		this.numItems = numItems;
-	}
-
-	private int getNumItems() {
-		return numItems;
-	}
-
 	class Painter implements PaintListener {
 
 		@Override
 		public void paintControl(PaintEvent e) {
 			Rectangle rect = new Rectangle(0, 0, getParent().getSize().x, getParent().getSize().y);
+			if (minLaneHeight == -1) {
+				minLaneHeight = calculateMinLaneHeight(rect);
+				laneHeight = minLaneHeight;
+			}
 			if (getNumItems() == 0) {
 				rect = getClientArea();
 			} else if (getNumItems() == 1 || (laneHeight * getNumItems() < rect.height)) {
 				// it fills the height
 			} else {
 				rect.height = laneHeight * getNumItems();
 			}
 
 			if (awtNeedsRedraw || !awtCanvas.hasImage(rect.width, rect.height)) {
 				Graphics2D g2d = awtCanvas.getGraphics(rect.width, rect.height);
-				minLaneheight = Math.max(20, (int) (g2d.getFontMetrics().getHeight() * xScale + 3));
 				Point adjusted = translateDisplayToImageCoordinates(rect.width, rect.height);
 				g2d.setColor(Palette.PF_BLACK_100.getAWTColor());
 				g2d.fillRect(0, 0, adjusted.x, adjusted.y);
 				render(g2d, adjusted.x, adjusted.y);
-				if (getParent() instanceof ScrolledComposite) {
+				if (isScrollableChart()) {
+					minReadableLaneHeight = (int) (g2d.getFontMetrics().getHeight() * xScale);
+					minLaneHeight = initMinLaneHeight();
 					((ScrolledComposite) getParent()).setMinSize(rect.width, rect.height);
 				}
-				if (highlightRects != null) {
-					updateHighlightRects();
-				}
 				awtNeedsRedraw = false;
 			}
 			awtCanvas.paint(e, 0, 0);
 			// Crude, flickering highlight of areas also delivered to tooltips.
 			// FIXME: Remove flicker by drawing in a buffered stage (AWT or SWT).
@@ -273,20 +267,75 @@
 						int width = (int) Math.round(r.getWidth() * xScale);
 						int height = (int) Math.round(r.getHeight() * yScale);
 						gc.drawRectangle(x, y, width, height);
 					}
 				}
+				updateHighlightRects();
 			}
 		}
 	}
 
-	public void adjustLaneHeight(int amount) {
-		laneHeight = Math.min(Math.max(minLaneheight, laneHeight + amount), DEFAULT_LANE_HEIGHT);
+	public void setNumItems(int numItems) {
+		this.numItems = numItems;
+	}
+
+	private int getNumItems() {
+		return numItems;
+	}
+
+	private boolean isScrollableChart() {
+		return getParent() instanceof ScrolledComposite;
+	}
+
+	protected int initMinLaneHeight() {
+		// if the min readable lane height * the number of items exceeds the screen, then use min readable height
+		if (minReadableLaneHeight * getNumItems() > getParent().getSize().y) {
+			return minReadableLaneHeight;
+		} else { // if the minimum readable lane height * the number of items leaves extra space, then the min height is the height / number of items
+			return getParent().getSize().y / getNumItems();
+		}
+	}
+
+	protected int calculateMinLaneHeight(Rectangle rect) {
+		return (int) (awtCanvas.getGraphics(rect.width, rect.height).getFontMetrics().getHeight() * xScale);
+	}
+
+	public boolean isLaneHeightMinimumSize() {
+		return laneHeight == minLaneHeight;
+	}
+
+	void setOverviewLaneHeight() {
+		this.savedLaneHeight = laneHeight;
+		setLaneHeight(-1);
+		zoomer = new Zoomer();
+		addListener(SWT.MouseVerticalWheel, zoomer);
+	}
+
+	void adjustLaneHeight(int amount) {
+		if (laneHeight == -1) {
+			restoreLaneHeight();
+		}
+		laneHeight = Math.max(minLaneHeight, laneHeight + amount);
+	}
+
+	void setLaneHeight(int height) {
+		this.laneHeight = height;
+	}
+
+	void restoreLaneHeight() {
+		laneHeight = savedLaneHeight;
+		removeListener(SWT.MouseVerticalWheel, zoomer);
 	}
 
 	public void resetLaneHeight() {
-		laneHeight = DEFAULT_LANE_HEIGHT;
+		if (minLaneHeight != -1) {
+			if (laneHeight == -1) {
+				removeListener(SWT.MouseVerticalWheel, zoomer);
+			}
+			minLaneHeight = initMinLaneHeight();
+			laneHeight = minLaneHeight;
+		}
 	}
 
 	class Zoomer implements Listener {
 
 		@Override
@@ -428,10 +477,11 @@
 	private Consumer<Boolean> zoomOnClickListener;
 	private IPropertyChangeListener aaListener;
 	private XYChart awtChart;
 	private MCContextMenuManager chartMenu;
 	private ChartTextCanvas textCanvas;
+	private Listener zoomer;
 
 	public ChartCanvas(Composite parent) {
 		super(parent, SWT.NO_BACKGROUND);
 		addPaintListener(new Painter());
 		Selector selector = new Selector();
@@ -443,11 +493,11 @@
 		UIPlugin.getDefault().getPreferenceStore().addPropertyChangeListener(aaListener);
 		addDisposeListener(e -> UIPlugin.getDefault().getPreferenceStore().removePropertyChangeListener(aaListener));
 		if (Environment.getOSType() == OSType.WINDOWS) {
 			addMouseTrackListener(new WheelStealingZoomer());
 		}
-		if (getParent() instanceof ScrolledComposite) { // JFR Threads Page
+		if (isScrollableChart()) { // JFR Threads Page
 			((ScrolledComposite) getParent()).getVerticalBar().addListener(SWT.Selection, e -> vBarScroll());
 		} else {
 			addMouseTrackListener(selector);
 			addListener(SWT.MouseVerticalWheel, new Zoomer());
 		}
@@ -719,11 +769,17 @@
 	/**
 	 * Mark both the (AWT) chart and the SWT control as needing a redraw.
 	 */
 	public void redrawChart() {
 		awtNeedsRedraw = true;
-		redraw();
+		getDisplay().asyncExec(new Runnable() {
+			public void run() {
+				if (!isDisposed()) {
+					redraw();
+				}
+			}
+		});
 	}
 
 	private void redrawChartText() {
 		if (textCanvas != null) {
 			textCanvas.redrawChartText();
