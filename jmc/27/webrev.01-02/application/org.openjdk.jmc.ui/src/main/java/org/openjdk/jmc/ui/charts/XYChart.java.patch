diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/XYChart.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/XYChart.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/XYChart.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/XYChart.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -49,11 +49,12 @@
 import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.unit.QuantitiesToolkit;
 import org.openjdk.jmc.common.unit.QuantityRange;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.ui.charts.IChartInfoVisitor.ITick;
-import org.openjdk.jmc.ui.misc.ChartDisplayControlBar;
+import org.openjdk.jmc.ui.misc.ChartButtonGroup;
+import org.openjdk.jmc.ui.misc.ChartControlBar;
 import org.openjdk.jmc.ui.misc.TimelineCanvas;
 import org.openjdk.jmc.ui.misc.PatternFly.Palette;
 
 public class XYChart {
 	private static final String ELLIPSIS = "..."; //$NON-NLS-1$
@@ -87,12 +88,12 @@
 	private static final double ZOOM_PAN_FACTOR = 0.05;
 	private static final int ZOOM_PAN_MODIFIER = 2;
 	private double zoomPanPower = ZOOM_PAN_FACTOR / ZOOM_PAN_MODIFIER;
 	private double currentZoom;
 	private int zoomSteps;
-	private ChartDisplayControlBar displayBar;
-	private ChartFilterControlBar filterBar;
+	private ChartButtonGroup buttonGroup;
+	private ChartControlBar controlBar;
 	private Stack<Integer> modifiedSteps;
 	private TimelineCanvas timelineCanvas;
 	private int longestCharWidth = 0;
 
 	public XYChart(IRange<IQuantity> range, IXDataRenderer rendererRoot) {
@@ -103,16 +104,16 @@
 		this(range.getStart(), range.getEnd(), rendererRoot, xOffset);
 	}
 
 	// JFR Threads Page
 	public XYChart(IRange<IQuantity> range, IXDataRenderer rendererRoot, int xOffset, Integer yOffset,
-			TimelineCanvas timelineCanvas, ChartFilterControlBar filterBar, ChartDisplayControlBar displayBar) {
+			TimelineCanvas timelineCanvas, ChartControlBar controlBar, ChartButtonGroup buttonGroup) {
 		this(range.getStart(), range.getEnd(), rendererRoot, xOffset);
 		this.yOffset = yOffset;
 		this.timelineCanvas = timelineCanvas;
-		this.filterBar = filterBar;
-		this.displayBar = displayBar;
+		this.controlBar = controlBar;
+		this.buttonGroup = buttonGroup;
 		this.rangeDuration = range.getExtent();
 		this.currentZoom = BASE_ZOOM_LEVEL;
 		this.isZoomCalculated = false;
 	}
 
@@ -180,12 +181,12 @@
 			context.setTransform(oldTransform);
 		}
 	}
 
 	public void renderTextCanvasText(Graphics2D context, int width, int height) {
-		axisWidth = width;
 		AffineTransform oldTransform = context.getTransform();
+		axisWidth = width - xOffset;
 		doRenderTextCanvasText(context, height);
 		context.setTransform(oldTransform);
 	}
 
 	public void renderText(Graphics2D context, int width, int height) {
@@ -214,12 +215,12 @@
 			context.drawRect(0, rangeIndicatorY, axisWidth - 1, RANGE_INDICATOR_HEIGHT);
 		}
 	}
 
 	public void updateZoomPanIndicator() {
-		if (displayBar != null) {
-			displayBar.updateZoomPanIndicator();
+		if (buttonGroup != null) {
+			buttonGroup.updateZoomPanIndicator();
 		}
 	}
 
 	private IRenderedRow getRendererResult(Graphics2D context, int axisHeight) {
 		if (xBucketRange == null) {
@@ -432,12 +433,12 @@
 			newStart = newStart.add(diff);
 			newEnd = end;
 		}
 		currentStart = newStart;
 		currentEnd = newEnd;
-		filterBar.setStartTime(currentStart);
-		filterBar.setEndTime(currentEnd);
+		controlBar.setStartTime(currentStart);
+		controlBar.setEndTime(currentEnd);
 		isZoomCalculated = true;
 		return true;
 	}
 
 	/**
@@ -513,12 +514,10 @@
 		} else if (steps > 0) {
 			zoomIn(steps);
 		} else {
 			zoomOut(steps);
 		}
-		// set displayBar text
-		displayBar.setZoomPercentageText(currentZoom);
 		return true;
 	}
 
 	/**
 	 * Zoom into the chart at a rate of 5% of the overall recording range at each step. If the chart
@@ -590,11 +589,10 @@
 	// will have to calculate the new zoom level
 	public void resetZoomFactor() {
 		zoomSteps = 0;
 		zoomPanPower = ZOOM_PAN_FACTOR / ZOOM_PAN_MODIFIER;
 		currentZoom = BASE_ZOOM_LEVEL;
-		displayBar.setZoomPercentageText(currentZoom);
 		modifiedSteps = new Stack<Integer>();
 	}
 
 	/**
 	 * Reset the visible range to be the recording range, and reset the zoom-related objects
@@ -606,12 +604,10 @@
 
 	private void selectionZoom(IQuantity newStart, IQuantity newEnd) {
 		double percentage = calculateZoom(newStart, newEnd);
 		zoomSteps = calculateZoomSteps(percentage);
 		currentZoom = BASE_ZOOM_LEVEL + (percentage * 100);
-		displayBar.setScaleValue(zoomSteps);
-		displayBar.setZoomPercentageText(currentZoom);
 	}
 
 	/**
 	 * When a drag-select zoom occurs, use the new range value to determine how many steps have been
 	 * taken, and adjust zoomSteps and zoomPower accordingly
@@ -677,13 +673,13 @@
 			} else {
 				// Ensures that zoom out is always allowed
 				currentStart = QuantitiesToolkit.min(rangeStart, currentStart);
 				currentEnd = QuantitiesToolkit.max(rangeEnd, currentEnd);
 			}
-			if (filterBar != null) {
-				filterBar.setStartTime(currentStart);
-				filterBar.setEndTime(currentEnd);
+			if (controlBar != null) {
+				controlBar.setStartTime(currentStart);
+				controlBar.setEndTime(currentEnd);
 			}
 			rangeListeners.stream().forEach(l -> l.accept(getVisibleRange()));
 		}
 	}
 
