diff a/agent/pom.xml b/agent/pom.xml
--- a/agent/pom.xml
+++ b/agent/pom.xml
@@ -101,10 +101,11 @@
 						-XX:+FlightRecorder</argLine>
 					<excludes>
 						<exclude>TestDefineEventProbes.java</exclude>
 						<exclude>TestPermissionChecks.java</exclude>
 						<exclude>TestRetrieveCurrentTransforms.java</exclude>
+						<exclude>TestRetrieveEventProbes.java</exclude>
 					</excludes>
 				</configuration>
 			</plugin>
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
@@ -134,10 +135,23 @@
 							<argLine> --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
 								-XX:+FlightRecorder -javaagent:target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar=target/test-classes/org/openjdk/jmc/agent/test/jfrprobes_template.xml
 								 -cp target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar:target/test-classes/ </argLine>
 							<includes>TestDefineEventProbes.java</includes>
 						</configuration>
+					</execution>
+					<execution>
+						<id>test-retrieve-event-probes</id>
+						<goals>
+							<goal>integration-test</goal>
+							<goal>verify</goal>
+						</goals>
+						<configuration>
+							<argLine> --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
+								-XX:+FlightRecorder -javaagent:target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar
+								 -cp target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar:target/test-classes/ </argLine>
+							<includes>TestRetrieveEventProbes.java</includes>
+						</configuration>
 					</execution>
 					<execution>
 						<id>test-retrieve-transforms</id>
 						<goals>
 							<goal>integration-test</goal>
diff a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
@@ -59,10 +59,25 @@
 	 *
 	 * @return the unmodifiable set of class names.
 	 */
 	Set<String> getClassNames();
 
+	/**
+	 * Returns the currently instrumented configuration.
+	 *
+	 * @return an XML snippet of the configuration.
+	 */
+	String getCurrentConfiguration();
+
+	/**
+	 * Set the current configuration that will be instrumented
+	 *
+	 * @param xmlDescription
+	 *           an XML snippet describing the current configuration
+	 */
+	void setCurrentConfiguration(String xmlDescription);
+
 	/**
 	 * Modifies class information in the registry according to the xml description.
 	 *
 	 * @param xmlDescription
 	 *           an XML snippet describing the wanted modifications.
diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -30,13 +30,15 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.impl;
 
+import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -45,10 +47,11 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 import javax.xml.XMLConstants;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
@@ -87,10 +90,12 @@
 	// First step in update should be to check if we even have transformations for the given class
 	private final HashMap<String, List<TransformDescriptor>> transformData = new HashMap<>();
 
 	private volatile boolean revertInstrumentation = false;
 
+	private String currentConfiguration = "";
+
 	private static final String PROBE_SCHEMA_XSD = "jfrprobes_schema.xsd"; //$NON-NLS-1$
 	private static final Schema PROBE_SCHEMA;
 
 	static {
 		try {
@@ -160,10 +165,16 @@
 					readGlobalConfig(streamReader, globalDefaults);
 				}
 			}
 			streamReader.next();
 		}
+		try {
+			configuration.reset();
+		} catch (IOException e) {
+			throw new XMLStreamException(e);
+		}
+		registry.setCurrentConfiguration(getXmlAsString(configuration));
 		return registry;
 	}
 
 	private static void add(DefaultTransformRegistry registry, TransformDescriptor td) {
 		List<TransformDescriptor> transformDataList = registry.getTransformData(td.getClassName());
@@ -495,10 +506,11 @@
 						readGlobalConfig(streamReader, globalDefaults);
 					}
 				}
 				streamReader.next();
 			}
+			currentConfiguration = xmlDescription;
 			clearAllOtherTransformData(modifiedClasses);
 			return modifiedClasses;
 		} catch (XMLStreamException xse) {
 			logger.log(Level.SEVERE, "Failed to create XML Stream Reader", xse);
 			return null;
@@ -518,14 +530,26 @@
 		Set<String> classNames = new HashSet<>(getClassNames());
 		transformData.clear();
 		return classNames;
 	}
 
+	private static String getXmlAsString(InputStream in) {
+		return new BufferedReader(new InputStreamReader(in)).lines().collect(Collectors.joining("\n"));
+	}
+
 	public Set<String> getClassNames() {
 		return Collections.unmodifiableSet(transformData.keySet());
 	}
 
+	public String getCurrentConfiguration() {
+		return currentConfiguration;
+	}
+
+	public void setCurrentConfiguration(String configuration) {
+		currentConfiguration = configuration;
+	}
+
 	public void setRevertInstrumentation(boolean shouldRevert) {
 		this.revertInstrumentation = shouldRevert;
 	}
 
 	public boolean isRevertIntrumentation() {
diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
@@ -61,10 +61,11 @@
 		checkSecurity();
 		Class<?>[] classesToRetransformArray;
 		boolean revertAll = xmlDescription == null ? true : xmlDescription.isEmpty();
 		if (revertAll) {
 			classesToRetransformArray = retransformClasses(registry.clearAllTransformData());
+			registry.setCurrentConfiguration("");
 		} else {
 			Set<String> initialClasses = new HashSet<>(registry.getClassNames());
 			Set<String> modifiedClasses = registry.modify(xmlDescription);
 			if (modifiedClasses == null) {
 				logger.log(Level.SEVERE, "Failed to identify transformations: " + xmlDescription);
@@ -105,10 +106,15 @@
 			jfrTds.add((JFRTransformDescriptor) td);
 		}
 		return (jfrTds.toArray(new JFRTransformDescriptor[0]));
 	}
 
+	public String retrieveEventProbes() {
+		checkSecurity();
+		return registry.getCurrentConfiguration();
+	}
+
 	private void checkSecurity() {
 		  SecurityManager secMan = System.getSecurityManager();
 		  if (secMan != null) {
 		    secMan.checkPermission(new ManagementPermission("control"));
 		  }
diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMXBean.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMXBean.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMXBean.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMXBean.java
@@ -36,7 +36,14 @@
 
 public interface AgentControllerMXBean {
 
 	public void defineEventProbes(String xmlDescription) throws Exception;
 
+	/**
+	 * Returns the most recent XML configuration that was successfully applied.
+	 *
+	 * @return an XML snippet of the current configuration.
+	 */
+	public String retrieveEventProbes();
+
 	public JFRTransformDescriptor[] retrieveCurrentTransforms();
 }
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
@@ -121,10 +121,22 @@
 		Set<String> modifiedClassNames = registry.modify(collisionDescription);
 		assertNotNull(modifiedClassNames);
 		assertTrue(modifiedClassNames.size() == 1);
 	}
 
+	@Test
+	public void testModifyInvalidXml() throws XMLStreamException, IOException {
+		TransformRegistry registry = DefaultTransformRegistry
+				.from(TestToolkit.getProbesXMLFromTemplate(getTemplate(), "Modify")); //$NON-NLS-1$
+		assertNotNull(registry);
+		final String initialConfiguration = registry.getCurrentConfiguration();
+		final String invalidSnippet = XML_EVENT_DESCRIPTION;
+		Set<String> modifiedClassNames = registry.modify(invalidSnippet);
+		assertNull(modifiedClassNames);
+		assertEquals(registry.getCurrentConfiguration(), initialConfiguration);
+	}
+
 	@Test
 	public void testClearAllTransformData() throws XMLStreamException, IOException {
 		TransformRegistry registry = DefaultTransformRegistry
 				.from(TestToolkit.getProbesXMLFromTemplate(getXMLDescription(XML_EVENT_DESCRIPTION), "clearAllTransformData")); //$NON-NLS-1$
 		assertNotNull(registry);
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestRetrieveEventProbes.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestRetrieveEventProbes.java
--- /dev/null
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestRetrieveEventProbes.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.agent.test;
+
+import java.lang.management.ManagementFactory;
+
+import javax.management.JMX;
+import javax.management.ObjectName;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.openjdk.jmc.agent.jmx.AgentControllerMXBean;
+
+public class TestRetrieveEventProbes {
+
+	private static final String AGENT_OBJECT_NAME = "org.openjdk.jmc.jfr.agent:type=AgentController"; //$NON-NLS-1$
+
+	private static final String XML_TEST_DESCRIPTION = "<jfragent>"
+			+ "<events>"
+			+ "<event id=\"demo.jfr.test1\">"
+			+ "<name>JFR Hello World Event 1 </name>"
+			+ "<description>Defined in the xml file and added by the agent.</description>"
+			+ "<path>demo/jfrhelloworldevent1</path>"
+			+ "<stacktrace>true</stacktrace>"
+			+ "<class>org.openjdk.jmc.agent.test.InstrumentMe</class>"
+			+ "<method>"
+			+ "<name>printHelloWorldJFR1</name>"
+			+ "<descriptor>()V</descriptor>"
+			+ "</method>"
+			+ "<location>WRAP</location>"
+			+ "</event>"
+			+ "</events>"
+			+ "</jfragent>";
+	@Test
+	public void testRetrieveEventProbes() throws Exception {
+		AgentControllerMXBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
+				new ObjectName(AGENT_OBJECT_NAME), AgentControllerMXBean.class, false);
+
+		Assert.assertTrue(mbean.retrieveEventProbes().isEmpty());
+		mbean.defineEventProbes(XML_TEST_DESCRIPTION);
+		String currentConfiguration = mbean.retrieveEventProbes();
+		Assert.assertEquals(XML_TEST_DESCRIPTION, currentConfiguration);
+	}
+
+	public void test() {
+		//Dummy method for instrumentation
+	}
+}
