diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -30,13 +30,15 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.impl;
 
+import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -45,10 +47,11 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 import javax.xml.XMLConstants;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
@@ -87,10 +90,12 @@
 	// First step in update should be to check if we even have transformations for the given class
 	private final HashMap<String, List<TransformDescriptor>> transformData = new HashMap<>();
 
 	private volatile boolean revertInstrumentation = false;
 
+	private String currentConfiguration = "";
+
 	private static final String PROBE_SCHEMA_XSD = "jfrprobes_schema.xsd"; //$NON-NLS-1$
 	private static final Schema PROBE_SCHEMA;
 
 	static {
 		try {
@@ -160,10 +165,16 @@
 					readGlobalConfig(streamReader, globalDefaults);
 				}
 			}
 			streamReader.next();
 		}
+		try {
+			configuration.reset();
+		} catch (IOException e) {
+			throw new XMLStreamException(e);
+		}
+		registry.setCurrentConfiguration(getXmlAsString(configuration));
 		return registry;
 	}
 
 	private static void add(DefaultTransformRegistry registry, TransformDescriptor td) {
 		List<TransformDescriptor> transformDataList = registry.getTransformData(td.getClassName());
@@ -495,10 +506,11 @@
 						readGlobalConfig(streamReader, globalDefaults);
 					}
 				}
 				streamReader.next();
 			}
+			currentConfiguration = xmlDescription;
 			clearAllOtherTransformData(modifiedClasses);
 			return modifiedClasses;
 		} catch (XMLStreamException xse) {
 			logger.log(Level.SEVERE, "Failed to create XML Stream Reader", xse);
 			return null;
@@ -518,14 +530,26 @@
 		Set<String> classNames = new HashSet<>(getClassNames());
 		transformData.clear();
 		return classNames;
 	}
 
+	private static String getXmlAsString(InputStream in) {
+		return new BufferedReader(new InputStreamReader(in)).lines().collect(Collectors.joining("\n"));
+	}
+
 	public Set<String> getClassNames() {
 		return Collections.unmodifiableSet(transformData.keySet());
 	}
 
+	public String getCurrentConfiguration() {
+		return currentConfiguration;
+	}
+
+	public void setCurrentConfiguration(String configuration) {
+		currentConfiguration = configuration;
+	}
+
 	public void setRevertInstrumentation(boolean shouldRevert) {
 		this.revertInstrumentation = shouldRevert;
 	}
 
 	public boolean isRevertIntrumentation() {
