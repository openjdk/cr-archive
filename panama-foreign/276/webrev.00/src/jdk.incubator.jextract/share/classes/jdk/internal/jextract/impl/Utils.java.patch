diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java
@@ -33,11 +33,15 @@
 import jdk.internal.clang.SourceLocation;
 import jdk.internal.clang.Type;
 import jdk.internal.clang.TypeKind;
 
 import javax.lang.model.SourceVersion;
+import javax.tools.JavaFileObject;
+import javax.tools.SimpleJavaFileObject;
+import java.io.IOException;
 import java.lang.reflect.Method;
+import java.net.URI;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -48,11 +52,58 @@
 
 /**
  * General utility functions
  */
 class Utils {
-    public static void validSimpleIdentifier(String name) {
+    private static URI fileName(String pkgName, String clsName, String extension) {
+        String pkgPrefix = pkgName.isEmpty() ? "" : pkgName.replaceAll("\\.", "/") + "/";
+        return URI.create(pkgPrefix + clsName + extension);
+    }
+
+    static JavaFileObject fileFromString(String pkgName, String clsName, String contents) {
+        return new SimpleJavaFileObject(fileName(pkgName, clsName, ".java"), JavaFileObject.Kind.SOURCE) {
+            @Override
+            public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
+                return contents;
+            }
+        };
+    }
+
+    static String javaSafeIdentifier(String name) {
+        return javaSafeIdentifier(name, false);
+    }
+
+    static String javaSafeIdentifier(String name, boolean checkAllChars) {
+        if (checkAllChars) {
+            StringBuilder buf = new StringBuilder();
+            char[] chars = name.toCharArray();
+            if (Character.isJavaIdentifierStart(chars[0])) {
+                buf.append(chars[0]);
+            } else {
+                buf.append('_');
+            }
+            if (chars.length > 1) {
+                for (int i = 1; i < chars.length; i++) {
+                    char ch = chars[i];
+                    if (Character.isJavaIdentifierPart(ch)) {
+                        buf.append(ch);
+                    } else {
+                        buf.append('_');
+                    }
+                }
+            }
+            return buf.toString();
+        } else {
+            // We never get the problem of Java non-identifiers (like 123, ab-xy) as
+            // C identifiers. But we may have a java keyword used as a C identifier.
+            assert SourceVersion.isIdentifier(name);
+
+            return SourceVersion.isKeyword(name) ? (name + "_") : name;
+        }
+    }
+
+    static void validSimpleIdentifier(String name) {
         int length = name.length();
         if (length == 0) {
             throw new IllegalArgumentException();
         }
 
@@ -71,11 +122,11 @@
                 throw new IllegalArgumentException("Invalid character for an identifier: " + ch);
             }
         }
     }
 
-    public static void validPackageName(String name) {
+    static void validPackageName(String name) {
         if (name.isEmpty()) {
             throw new IllegalArgumentException();
         }
         int idx = name.lastIndexOf('.');
         if (idx == -1) {
@@ -84,11 +135,11 @@
             validSimpleIdentifier(name.substring(idx + 1));
             validPackageName(name.substring(0, idx));
         }
     }
 
-    public static String toJavaIdentifier(String str) {
+    static String toJavaIdentifier(String str) {
         final int size = str.length();
         StringBuilder sb = new StringBuilder(size);
         if (! Character.isJavaIdentifierStart(str.charAt(0))) {
             sb.append('_');
         }
@@ -101,29 +152,29 @@
             }
         }
         return sb.toString();
     }
 
-    private static String toSafeName(String name) {
+    static String toSafeName(String name) {
         StringBuilder sb = new StringBuilder(name.length());
         name = toJavaIdentifier(name);
         sb.append(name);
         if (SourceVersion.isKeyword(name)) {
             sb.append("$");
         }
         return sb.toString();
     }
 
-    public static String toClassName(String cname) {
+    static String toClassName(String cname) {
         return toSafeName(cname);
     }
 
-    public static String toMacroName(String mname) {
+    static String toMacroName(String mname) {
         return toSafeName(mname);
     }
 
-    public static String toInternalName(String pkg, String name, String... nested) {
+    static String toInternalName(String pkg, String name, String... nested) {
         if ((pkg == null || pkg.isEmpty()) && nested == null) {
             return name;
         }
 
         StringBuilder sb = new StringBuilder();
@@ -139,26 +190,26 @@
             sb.append(n);
         }
         return sb.toString();
     }
 
-    public static String getName(Type type) {
+    static String getName(Type type) {
         return LayoutUtils.getName(type);
     }
 
-    public static Stream<Cursor> flattenableChildren(Cursor c) {
+    static Stream<Cursor> flattenableChildren(Cursor c) {
         return c.children()
                 .filter(cx -> cx.isAnonymousStruct() || cx.kind() == CursorKind.FieldDecl);
     }
 
-    public static Optional<Cursor> lastChild(Cursor c) {
+    static Optional<Cursor> lastChild(Cursor c) {
         List<Cursor> children = flattenableChildren(c)
                 .collect(Collectors.toList());
         return children.isEmpty() ? Optional.empty() : Optional.of(children.get(children.size() - 1));
     }
 
-    public static boolean hasIncompleteArray(Cursor c) {
+    static boolean hasIncompleteArray(Cursor c) {
         switch (c.kind()) {
             case FieldDecl:
                 return c.type().kind() == TypeKind.IncompleteArray;
             case UnionDecl:
                 return flattenableChildren(c)
@@ -169,11 +220,11 @@
                 throw new IllegalStateException("Unhandled cursor kind: " + c.kind());
         }
     }
 
     // return builtin Record types accessible from the given Type
-    public static Stream<Cursor> getBuiltinRecordTypes(Type type) {
+    static Stream<Cursor> getBuiltinRecordTypes(Type type) {
         List<Cursor> recordTypes = new ArrayList<>();
         fillBuiltinRecordTypes(type, recordTypes);
         return recordTypes.stream().distinct();
     }
 
@@ -226,11 +277,11 @@
         }
     }
 
     // return the absolute path of the library of given name by searching
     // in the given array of paths.
-    public static Optional<Path> findLibraryPath(Path[] paths, String libName) {
+    static Optional<Path> findLibraryPath(Path[] paths, String libName) {
         return Arrays.stream(paths).
                 map(p -> p.resolve(System.mapLibraryName(libName))).
                 filter(Files::isRegularFile).map(Path::toAbsolutePath).findFirst();
     }
 
@@ -242,11 +293,11 @@
 
     /**
      * Escapes each character in a string that has an escape sequence or
      * is non-printable ASCII.  Leaves non-ASCII characters alone.
      */
-    public static String quote(String s) {
+    static String quote(String s) {
         StringBuilder buf = new StringBuilder();
         for (int i = 0; i < s.length(); i++) {
             buf.append(quote(s.charAt(i)));
         }
         return buf.toString();
@@ -254,11 +305,11 @@
 
     /**
      * Escapes a character if it has an escape sequence or is
      * non-printable ASCII.  Leaves non-ASCII characters alone.
      */
-    public static String quote(char ch) {
+    static String quote(char ch) {
         switch (ch) {
         case '\b':  return "\\b";
         case '\f':  return "\\f";
         case '\n':  return "\\n";
         case '\r':  return "\\r";
@@ -278,14 +329,14 @@
      */
     private static boolean isPrintableAscii(char ch) {
         return ch >= ' ' && ch <= '~';
     }
 
-    public static Optional<GroupLayout> getContents(MemoryLayout layout) {
+    static Optional<GroupLayout> getContents(MemoryLayout layout) {
         return layout.attribute("contents").map(GroupLayout.class::cast);
     }
 
     @SuppressWarnings("unchecked")
-    public static <Z extends MemoryLayout> Z addContents(Z layout, GroupLayout contents) {
+    static <Z extends MemoryLayout> Z addContents(Z layout, GroupLayout contents) {
         return (Z) layout.withAttribute("contents", contents);
     }
 }
