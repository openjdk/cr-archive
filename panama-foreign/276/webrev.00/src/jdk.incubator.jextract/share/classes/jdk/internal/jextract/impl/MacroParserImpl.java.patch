diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
@@ -25,14 +25,13 @@
  */
 
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.jextract.Declaration;
-import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
-import jdk.incubator.jextract.tool.Main;
+import jdk.incubator.jextract.JextractTool;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.CursorKind;
 import jdk.internal.clang.Diagnostic;
 import jdk.internal.clang.EvalResult;
 import jdk.internal.clang.Index;
@@ -48,11 +47,11 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-class MacroParserImpl implements JextractTask.ConstantParser {
+class MacroParserImpl {
 
     private final ClangReparser reparser;
     private final TreeMaker treeMaker;
     final MacroTable macroTable;
 
@@ -60,11 +59,11 @@
         this.reparser = reparser;
         this.treeMaker = treeMaker;
         this.macroTable = new MacroTable();
     }
 
-    public static MacroParserImpl make(TreeMaker treeMaker, TranslationUnit tu, Collection<String> args) {
+    static MacroParserImpl make(TreeMaker treeMaker, TranslationUnit tu, Collection<String> args) {
         ClangReparser reparser;
         try {
             reparser = new ClangReparser(tu, args);
         } catch (IOException | Index.ParsingFailedException ex) {
             throw new RuntimeException(ex);
@@ -77,12 +76,11 @@
      * This method attempts to evaluate the macro. Evaluation occurs in two steps: first, an attempt is made
      * to see if the macro corresponds to a simple numeric constant. If so, the constant is parsed in Java directly.
      * If that is not possible (e.g. because the macro refers to other macro, or has a more complex grammar), fall
      * back to use clang evaluation support.
      */
-    @Override
-    public Optional<Declaration.Constant> parseConstant(Position pos, String name, String[] tokens) {
+    Optional<Declaration.Constant> parseConstant(Position pos, String name, String[] tokens) {
         if (!(pos instanceof TreeMaker.CursorPosition)) {
             return Optional.empty();
         } else {
             Cursor cursor = ((TreeMaker.CursorPosition)pos).cursor();
             if (cursor.isMacroFunctionLike()) {
@@ -137,11 +135,11 @@
                     false, //add serialization support (needed for macros)
                     patchedArgs);
         }
 
         void processDiagnostics(Diagnostic diag) {
-            if (Main.DEBUG) {
+            if (JextractTool.DEBUG) {
                 System.err.println("Error while processing macro: " + diag.spelling());
             }
         }
 
         public Stream<Cursor> reparse(String snippet) {
