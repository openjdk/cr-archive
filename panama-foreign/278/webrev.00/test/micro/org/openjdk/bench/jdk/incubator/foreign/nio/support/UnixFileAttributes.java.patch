diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/nio/support/UnixFileAttributes.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/nio/support/UnixFileAttributes.java
--- /dev/null
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/nio/support/UnixFileAttributes.java
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package org.openjdk.bench.jdk.incubator.foreign.nio.support;
+
+import java.nio.file.attribute.FileTime;
+import java.util.concurrent.TimeUnit;
+
+import jdk.incubator.foreign.MemoryAddress;
+
+/**
+ * Unix implementation of PosixFileAttributes.
+ */
+
+public class UnixFileAttributes {
+    private int     st_mode;
+    private long    st_ino;
+    private long    st_dev;
+    private long    st_rdev;
+    private int     st_nlink;
+    private int     st_uid;
+    private int     st_gid;
+    private long    st_size;
+    private long    st_atime_sec;
+    private long    st_atime_nsec;
+    private long    st_mtime_sec;
+    private long    st_mtime_nsec;
+    private long    st_ctime_sec;
+    private long    st_ctime_nsec;
+    private long    st_birthtime_sec;
+
+    UnixFileAttributes() {
+        super();
+    }
+
+    public int mode()  { return st_mode; }
+    public long ino()  { return st_ino; }
+    public long dev()  { return st_dev; }
+    public long rdev() { return st_rdev; }
+    public int nlink() { return st_nlink; }
+    public int uid()   { return st_uid; }
+    public int gid()   { return st_gid; }
+
+    private static FileTime toFileTime(long sec, long nsec) {
+        if (nsec == 0) {
+            return FileTime.from(sec, TimeUnit.SECONDS);
+        } else {
+            try {
+                long nanos = Math.addExact(nsec,
+                    Math.multiplyExact(sec, 1_000_000_000L));
+                return FileTime.from(nanos, TimeUnit.NANOSECONDS);
+            } catch (ArithmeticException ignore) {
+                // truncate to microseconds if nanoseconds overflow
+                long micro = sec*1_000_000L + nsec/1_000L;
+                return FileTime.from(micro, TimeUnit.MICROSECONDS);
+            }
+        }
+    }
+
+    public FileTime ctime() {
+        return toFileTime(st_ctime_sec, st_ctime_nsec);
+    }
+
+    public FileTime lastModifiedTime() {
+        return toFileTime(st_mtime_sec, st_mtime_nsec);
+    }
+
+    public FileTime lastAccessTime() {
+        return toFileTime(st_atime_sec, st_atime_nsec);
+    }
+
+    public FileTime creationTime() {
+        return FileTime.from(st_birthtime_sec, TimeUnit.SECONDS);
+    }
+
+    public long size() {
+        return st_size;
+    }
+}
