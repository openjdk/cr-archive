diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
@@ -236,10 +236,27 @@
         }
 
         return false;
     }
 
+    private static boolean isLongDouble(MemoryLayout layout) {
+        return CSupport.C_LONGDOUBLE.equals(layout);
+    }
+
+    private static boolean usesLongDouble(FunctionDescriptor desc) {
+        if (isLongDouble(desc.returnLayout().orElse(null))) {
+            return true;
+        }
+
+        for (MemoryLayout argLayout : desc.argumentLayouts()) {
+            if (isLongDouble(argLayout)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
     @Override
     public Void visitFunction(Declaration.Function funcTree, Declaration parent) {
         if (functionSeen(funcTree)) {
             return null;
         }
@@ -249,10 +266,15 @@
         if (descriptor == null) {
             //abort
             return null;
         }
 
+        if (usesLongDouble(descriptor)) {
+            warn("skipping " + funcTree.name() + " because of long double usage");
+            return null;
+        }
+
         if (isVaList(descriptor)) {
             MemoryLayout[] argLayouts = descriptor.argumentLayouts().toArray(new MemoryLayout[0]);
             argLayouts[argLayouts.length - 1] = CSupport.C_VA_LIST;
             descriptor = descriptor.returnLayout().isEmpty()?
                     FunctionDescriptor.ofVoid(argLayouts) :
@@ -371,10 +393,14 @@
         MemoryLayout layout = tree.layout().orElse(Type.layoutFor(type).orElse(null));
         if (layout == null) {
             //no layout - abort
             return null;
         }
+        if (isLongDouble(layout)) {
+            warn("skipping " + fieldName + " because of long double usage");
+        }
+
         Class<?> clazz = typeTranslator.getJavaType(type);
         if (tree.kind() == Declaration.Variable.Kind.BITFIELD ||
                 (layout instanceof ValueLayout && layout.byteSize() > 8)) {
             //skip
             return null;
