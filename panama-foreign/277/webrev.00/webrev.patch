diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/BulkOps.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/BulkOps.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/BulkOps.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/BulkOps.java
@@ -43,11 +43,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class BulkOps {
 
     static final Unsafe unsafe = Utils.unsafe;
 
     static final int ELEM_SIZE = 1_000_000;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
@@ -50,11 +50,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign", "-Dforeign.restricted=permit" })
 public class CallOverhead {
 
     static final ForeignLinker abi = CSupport.getSystemLinker();
     static final MethodHandle func;
     static final MethodHandle identity;
@@ -120,16 +120,10 @@
     @Benchmark
     public void panama_blank() throws Throwable {
         func.invokeExact();
     }
 
-    @Benchmark
-    @Fork(jvmArgsAppend = "-Djdk.internal.foreign.ProgrammableInvoker.NO_SPEC=true")
-    public void panama_blank_NO_SPEC() throws Throwable {
-        func.invokeExact();
-    }
-
     @Benchmark
     public void panama_blank_trivial() throws Throwable {
         func_trivial.invokeExact();
     }
 
@@ -141,62 +135,31 @@
     @Benchmark
     public int panama_identity() throws Throwable {
         return (int) identity.invokeExact(10);
     }
 
-    @Benchmark
-    @Fork(jvmArgsAppend = "-Djdk.internal.foreign.ProgrammableInvoker.NO_SPEC=true")
-    public int panama_identity_NO_SPEC() throws Throwable {
-        return (int) identity.invokeExact(10);
-    }
-
     @Benchmark
     public int panama_identity_trivial() throws Throwable {
         return (int) identity_trivial.invokeExact(10);
     }
 
     @Benchmark
     public MemorySegment panama_identity_struct() throws Throwable {
         return (MemorySegment) identity_struct.invokeExact(point);
     }
 
-    @Benchmark
-    @Fork(jvmArgsAppend = "-Djdk.internal.foreign.ProgrammableInvoker.NO_SPEC=true")
-    public MemorySegment panama_identity_struct_NO_SPEC() throws Throwable {
-        return (MemorySegment) identity_struct.invokeExact(point);
-    }
-
     @Benchmark
     public MemoryAddress panama_identity_memory_address() throws Throwable {
         return (MemoryAddress) identity_memory_address.invokeExact(MemoryAddress.NULL);
     }
 
-    @Benchmark
-    @Fork(jvmArgsAppend = "-Djdk.internal.foreign.ProgrammableInvoker.NO_SPEC=true")
-    public MemoryAddress panama_identity_memory_address_NO_SPEC() throws Throwable {
-        return (MemoryAddress) identity_memory_address.invokeExact(MemoryAddress.NULL);
-    }
-
     @Benchmark
     public void panama_args5() throws Throwable {
         args5.invokeExact(10L, 11D, 12L, 13D, 14L);
     }
 
-    @Benchmark
-    @Fork(jvmArgsAppend = "-Djdk.internal.foreign.ProgrammableInvoker.NO_SPEC=true")
-    public void panama_args5_NO_SPEC() throws Throwable {
-        args5.invokeExact(10L, 11D, 12L, 13D, 14L);
-    }
-
     @Benchmark
     public void panama_args10() throws Throwable {
         args10.invokeExact(10L, 11D, 12L, 13D, 14L,
                            15D, 16L, 17D, 18L, 19D);
     }
-
-    @Benchmark
-    @Fork(jvmArgsAppend = "-Djdk.internal.foreign.ProgrammableInvoker.NO_SPEC=true")
-    public void panama_args10_NO_SPEC() throws Throwable {
-        args10.invokeExact(10L, 11D, 12L, 13D, 14L,
-                           15D, 16L, 17D, 18L, 19D);
-    }
 }
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java
@@ -49,11 +49,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class LoopOverConstant {
 
     static final Unsafe unsafe = Utils.unsafe;
 
     static final int ELEM_SIZE = 1_000_000;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNew.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNew.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNew.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNew.java
@@ -47,11 +47,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class LoopOverNew {
 
     static final Unsafe unsafe = Utils.unsafe;
 
     static final int ELEM_SIZE = 1_000_000;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java
@@ -49,11 +49,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class LoopOverNonConstant {
 
     static final Unsafe unsafe = Utils.unsafe;
 
     static final int ELEM_SIZE = 1_000_000;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
@@ -49,11 +49,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class LoopOverNonConstantHeap {
 
     static final Unsafe unsafe = Utils.unsafe;
 
     static final int ELEM_SIZE = 1_000_000;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java
@@ -56,11 +56,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class LoopOverNonConstantMapped {
 
     static final Unsafe unsafe = Utils.unsafe;
 
     static final int ELEM_SIZE = 1_000_000;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/ParallelSum.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/ParallelSum.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/ParallelSum.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/ParallelSum.java
@@ -60,11 +60,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class ParallelSum {
 
     final static int CARRIER_SIZE = 4;
     final static int ALLOC_SIZE = CARRIER_SIZE * 1024 * 1024 * 256;
     final static int ELEM_SIZE = ALLOC_SIZE / CARRIER_SIZE;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java
@@ -48,11 +48,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.MILLISECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign" })
 public class TestAdaptVarHandles {
 
     static class IntBox {
 
         private final int value;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/Upcalls.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/Upcalls.java
--- /dev/null
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/Upcalls.java
@@ -0,0 +1,127 @@
+/*
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.bench.jdk.incubator.foreign;
+
+import jdk.incubator.foreign.CSupport;
+import jdk.incubator.foreign.ForeignLinker;
+import jdk.incubator.foreign.FunctionDescriptor;
+import jdk.incubator.foreign.LibraryLookup;
+import jdk.incubator.foreign.MemoryAddress;
+import org.openjdk.jmh.annotations.Benchmark;
+import org.openjdk.jmh.annotations.BenchmarkMode;
+import org.openjdk.jmh.annotations.Fork;
+import org.openjdk.jmh.annotations.Measurement;
+import org.openjdk.jmh.annotations.Mode;
+import org.openjdk.jmh.annotations.OutputTimeUnit;
+import org.openjdk.jmh.annotations.State;
+import org.openjdk.jmh.annotations.Warmup;
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodType;
+import java.util.concurrent.TimeUnit;
+
+import static java.lang.invoke.MethodHandles.lookup;
+import static jdk.incubator.foreign.CSupport.C_INT;
+import static jdk.incubator.foreign.CSupport.C_POINTER;
+
+@BenchmarkMode(Mode.AverageTime)
+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
+@State(org.openjdk.jmh.annotations.Scope.Thread)
+@OutputTimeUnit(TimeUnit.NANOSECONDS)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign", "-Dforeign.restricted=permit" })
+public class Upcalls {
+
+    static final ForeignLinker abi = CSupport.getSystemLinker();
+    static final MethodHandle blank;
+    static final MethodHandle identity;
+
+    static final MemoryAddress cb_blank;
+    static final MemoryAddress cb_identity;
+
+    static final long cb_blank_jni;
+    static final long cb_identity_jni;
+
+    static {
+        System.loadLibrary("UpcallsJNI");
+
+        String className = "org/openjdk/bench/jdk/incubator/foreign/Upcalls";
+        cb_blank_jni = makeCB(className, "blank", "()V");
+        cb_identity_jni = makeCB(className, "identity", "(I)I");
+
+        try {
+            LibraryLookup ll = LibraryLookup.ofLibrary("Upcalls");
+            {
+                LibraryLookup.Symbol addr = ll.lookup("blank");
+                MethodType mt = MethodType.methodType(void.class, MemoryAddress.class);
+                FunctionDescriptor fd = FunctionDescriptor.ofVoid(C_POINTER);
+                blank = abi.downcallHandle(addr, mt, fd);
+
+                cb_blank = abi.upcallStub(
+                    lookup().findStatic(Upcalls.class, "blank", MethodType.methodType(void.class)),
+                    FunctionDescriptor.ofVoid()
+                ).address();
+            }
+            {
+                LibraryLookup.Symbol addr = ll.lookup("identity");
+                MethodType mt = MethodType.methodType(int.class, int.class, MemoryAddress.class);
+                FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_INT, C_POINTER);
+                identity = abi.downcallHandle(addr, mt, fd);
+
+                cb_identity = abi.upcallStub(
+                    lookup().findStatic(Upcalls.class, "identity", MethodType.methodType(int.class, int.class)),
+                    FunctionDescriptor.of(C_INT, C_INT)
+                ).address();
+            }
+        } catch (ReflectiveOperationException e) {
+            throw new BootstrapMethodError(e);
+        }
+    }
+
+    static native void blank(long cb);
+    static native int identity(int x, long cb);
+    static native long makeCB(String holder, String name, String signature);
+
+    @Benchmark
+    public void jni_blank() throws Throwable {
+        blank(cb_blank_jni);
+    }
+
+    @Benchmark
+    public void panama_blank() throws Throwable {
+        blank.invokeExact(cb_blank);
+    }
+
+    @Benchmark
+    public int jni_identity() throws Throwable {
+        return identity(10, cb_identity_jni);
+    }
+
+    @Benchmark
+    public int panama_identity() throws Throwable {
+        return (int) identity.invokeExact(10, cb_identity);
+    }
+
+    static void blank() {}
+    static int identity(int x) { return x; }
+}
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java
@@ -47,11 +47,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign", "-Dforeign.restricted=permit" })
 public class VaList {
 
     static final ForeignLinker linker = CSupport.getSystemLinker();
     static final LibraryLookup lookup = LibraryLookup.ofLibrary("VaList");
 
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/libUpcalls.c b/test/micro/org/openjdk/bench/jdk/incubator/foreign/libUpcalls.c
--- /dev/null
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/libUpcalls.c
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#ifdef _WIN64
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
+EXPORT void blank(void (*cb)(void)) {
+    cb();
+}
+
+EXPORT int identity(int x, int (*cb)(int)) {
+    return cb(x);
+}
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/libUpcallsJNI.c b/test/micro/org/openjdk/bench/jdk/incubator/foreign/libUpcallsJNI.c
--- /dev/null
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/libUpcallsJNI.c
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+#include <jni.h>
+#include <stdlib.h>
+
+void blank(void (*cb)(void)) {
+    cb();
+}
+
+int identity(int x, int (*cb)(int)) {
+    return cb(x);
+}
+
+typedef struct {
+    jclass holder;
+    jmethodID mid;
+} *JNICB;
+
+#define CHECK_NULL(thing, message) \
+    if (thing == NULL) { \
+        jclass cls = (*env)->FindClass(env, "java/lang/Exception"); \
+        (*env)->ThrowNew(env, cls, message); \
+        return 0; \
+    }
+
+JNIEXPORT jlong JNICALL Java_org_openjdk_bench_jdk_incubator_foreign_Upcalls_makeCB
+  (JNIEnv *env, jclass cls, jstring holderName, jstring methodName, jstring descriptor) {
+
+  const char* holderNameC = (*env)->GetStringUTFChars(env, holderName, NULL);
+  const char* methodNameC = (*env)->GetStringUTFChars(env, methodName, NULL);
+  const char* descriptorC = (*env)->GetStringUTFChars(env, descriptor, NULL);
+
+  JNICB cb = malloc(sizeof *cb);
+  CHECK_NULL(cb, "Can not allocate cb");
+
+  jclass holder = (*env)->FindClass(env, holderNameC);
+  CHECK_NULL(holder, "Can not find class");
+  holder = (jclass) (*env)->NewGlobalRef(env, holder);
+  cb->holder = holder;
+
+  jmethodID methodID = (*env)->GetStaticMethodID(env, holder, methodNameC, descriptorC);
+  CHECK_NULL(methodID, "Can not find method");
+  //methodID = (jmethodID) (*env)->NewGlobalRef(env, methodID); // DON'T DO THIS! -> Crashes GC
+  cb->mid = methodID;
+
+  (*env)->ReleaseStringUTFChars(env, holderName, holderNameC);
+  (*env)->ReleaseStringUTFChars(env, methodName, methodNameC);
+  (*env)->ReleaseStringUTFChars(env, descriptor, descriptorC);
+
+  return (jlong) cb;
+}
+
+JNIEXPORT void JNICALL Java_org_openjdk_bench_jdk_incubator_foreign_Upcalls_blank
+  (JNIEnv *env, jclass cls, jlong cb) {
+    JNICB jniCb = (JNICB) cb;
+    (*env)->CallStaticVoidMethod(env, jniCb->holder, jniCb->mid);
+}
+
+JNIEXPORT jint JNICALL Java_org_openjdk_bench_jdk_incubator_foreign_Upcalls_identity
+  (JNIEnv *env, jclass cls, jint x, jlong cb) {
+    JNICB jniCb = (JNICB) cb;
+    return (*env)->CallStaticIntMethod(env, jniCb->holder, jniCb->mid, x);
+}
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAccess.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAccess.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAccess.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAccess.java
@@ -41,11 +41,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign", "-Dforeign.restricted=permit" })
 public class PointsAccess {
 
     BBPoint BBPoint;
     PanamaPoint panamaPoint;
     JNIPoint JNIPoint;
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAlloc.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAlloc.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAlloc.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsAlloc.java
@@ -39,11 +39,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign", "-Dforeign.restricted=permit" })
 public class PointsAlloc {
 
     @Benchmark
     public Object jni_ByteBuffer_alloc() throws Throwable {
         return new BBPoint(0, 0);
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsDistance.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsDistance.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsDistance.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsDistance.java
@@ -41,11 +41,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign", "-Dforeign.restricted=permit" })
 public class PointsDistance {
 
     BBPoint jniP1;
     BBPoint jniP2;
 
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsFree.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsFree.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsFree.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/PointsFree.java
@@ -40,11 +40,11 @@
 @BenchmarkMode(Mode.AverageTime)
 @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
-@Fork(3)
+@Fork(value = 3, jvmArgsAppend = { "--add-modules=jdk.incubator.foreign", "-Dforeign.restricted=permit" })
 public class PointsFree {
 
     JNIPoint jniPoint;
     PanamaPoint panamaPoint;
 
