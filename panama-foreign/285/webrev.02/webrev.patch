diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
@@ -51,10 +51,12 @@
  * Scan a header file and generate Java source items for entities defined in that header
  * file. Tree visitor visit methods return true/false depending on whether a
  * particular Tree is processed or skipped.
  */
 public class OutputFactory implements Declaration.Visitor<Void, Declaration> {
+    // internal symbol used by clang for "va_list"
+    private static final String VA_LIST_TAG = "__va_list_tag";
     private final Set<String> constants = new HashSet<>();
     // To detect duplicate Variable and Function declarations.
     private final Set<Declaration.Variable> variables = new HashSet<>();
     private final Set<Declaration.Function> functions = new HashSet<>();
 
@@ -218,10 +220,26 @@
             currentBuilder.decrAlign();
         }
         return null;
     }
 
+    private static final boolean isVaList(FunctionDescriptor desc) {
+        List<MemoryLayout> argLayouts = desc.argumentLayouts();
+        int size = argLayouts.size();
+        if (size > 0) {
+            MemoryLayout lastLayout = argLayouts.get(size - 1);
+            if (lastLayout instanceof SequenceLayout) {
+                SequenceLayout seq = (SequenceLayout)lastLayout;
+                MemoryLayout elem = seq.elementLayout();
+                // FIXME: hack for now to use internal symbol used by clang for va_list
+                return elem.name().orElse("").equals(VA_LIST_TAG);
+            }
+        }
+
+        return false;
+    }
+
     @Override
     public Void visitFunction(Declaration.Function funcTree, Declaration parent) {
         if (functionSeen(funcTree)) {
             return null;
         }
@@ -230,10 +248,22 @@
         FunctionDescriptor descriptor = Type.descriptorFor(funcTree.type()).orElse(null);
         if (descriptor == null) {
             //abort
             return null;
         }
+
+        if (isVaList(descriptor)) {
+            MemoryLayout[] argLayouts = descriptor.argumentLayouts().toArray(new MemoryLayout[0]);
+            argLayouts[argLayouts.length - 1] = CSupport.C_VA_LIST;
+            descriptor = descriptor.returnLayout().isEmpty()?
+                    FunctionDescriptor.ofVoid(argLayouts) :
+                    FunctionDescriptor.of(descriptor.returnLayout().get(), argLayouts);
+            Class<?>[] argTypes = mtype.parameterArray();
+            argTypes[argLayouts.length - 1] = MemoryAddress.class;
+            mtype = MethodType.methodType(mtype.returnType(), argTypes);
+        }
+
         String mhName = Utils.javaSafeIdentifier(funcTree.name());
         toplevelBuilder.addMethodHandleGetter(mhName, funcTree.name(), mtype, descriptor, funcTree.type().varargs());
         //generate static wrapper for function
         List<String> paramNames = funcTree.parameters()
                                           .stream()
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
@@ -13,10 +13,11 @@
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
+import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
 
@@ -71,11 +72,11 @@
 
     public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {
         return lookup(LIBRARIES, name).map(
                 addr -> {
                     MethodType mt = MethodType.fromMethodDescriptorString(desc, LOADER);
-                    return variadic ?
+                    return variadic?
                         VarargsInvoker.make(addr, mt, fdesc) :
                         ABI.downcallHandle(addr, mt, fdesc);
                 }).orElse(null);
     }
 
diff a/test/jdk/tools/jextract/test8252016/Test8252016.java b/test/jdk/tools/jextract/test8252016/Test8252016.java
--- /dev/null
+++ b/test/jdk/tools/jextract/test8252016/Test8252016.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import org.testng.annotations.Test;
+
+import jdk.incubator.foreign.MemorySegment;
+
+import static org.testng.Assert.assertEquals;
+import static test.jextract.vsprintf.vsprintf_h.*;
+import static jdk.incubator.foreign.CSupport.*;
+
+/*
+ * @test
+ * @library ..
+ * @modules jdk.incubator.jextract
+ * @run driver JtregJextract -t test.jextract.vsprintf -- vsprintf.h
+ * @run testng/othervm -Dforeign.restricted=permit Test8252016
+ */
+public class Test8252016 {
+    @Test
+    public void testsVsprintf() {
+        try (MemorySegment s = MemorySegment.allocateNative(1024)) {
+            try (VaList vaList = VaList.make(b -> {
+                b.vargFromInt(C_INT, 12);
+                b.vargFromDouble(C_DOUBLE, 5.5d);
+                b.vargFromLong(C_LONGLONG, -200L);
+                b.vargFromLong(C_LONGLONG, Long.MAX_VALUE);
+            })) {
+                vsprintf(s, toCString("%hhd %.2f %lld %lld"), vaList);
+                String str = toJavaString(s);
+                assertEquals(str, "12 5.50 -200 " + Long.MAX_VALUE);
+            }
+       }
+    }
+}
diff a/test/jdk/tools/jextract/test8252016/vsprintf.h b/test/jdk/tools/jextract/test8252016/vsprintf.h
--- /dev/null
+++ b/test/jdk/tools/jextract/test8252016/vsprintf.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#ifdef _WIN64
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
+#include <stdarg.h>
+
+EXPORT int vsprintf(char *s, const char* format, va_list arg);
