diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
@@ -251,11 +251,11 @@
             return null;
         }
 
         if (isVaList(descriptor)) {
             MemoryLayout[] argLayouts = descriptor.argumentLayouts().toArray(new MemoryLayout[0]);
-            argLayouts[argLayouts.length - 1] = CSupport.C_VA_LIST.withName(VA_LIST_TAG);
+            argLayouts[argLayouts.length - 1] = CSupport.C_VA_LIST;
             descriptor = descriptor.returnLayout().isEmpty()?
                     FunctionDescriptor.ofVoid(argLayouts) :
                     FunctionDescriptor.of(descriptor.returnLayout().get(), argLayouts);
             Class<?>[] argTypes = mtype.parameterArray();
             argTypes[argLayouts.length - 1] = MemoryAddress.class;
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
@@ -68,25 +68,15 @@
 
     public static final MemorySegment nonCloseableNonTransferableSegment(MemorySegment seg) {
         return seg.withAccessModes(seg.accessModes() &  ~MemorySegment.CLOSE & ~MemorySegment.HANDOFF);
     }
 
-    private static final boolean isVaList(FunctionDescriptor desc) {
-        List<MemoryLayout> argLayouts = desc.argumentLayouts();
-        int size = argLayouts.size();
-        if (size > 0) {
-            MemoryLayout ml = argLayouts.get(size - 1);
-            return ml.equals(C_VA_LIST) && ml.name().orElse("").equals("__va_list_tag");
-        }
-        return false;
-    }
-
     public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {
         return lookup(LIBRARIES, name).map(
                 addr -> {
                     MethodType mt = MethodType.fromMethodDescriptorString(desc, LOADER);
-                    return variadic || isVaList(fdesc)?
+                    return variadic?
                         VarargsInvoker.make(addr, mt, fdesc) :
                         ABI.downcallHandle(addr, mt, fdesc);
                 }).orElse(null);
     }
 
