diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/resources/RuntimeHelper.java.template
@@ -13,10 +13,11 @@
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
+import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
 
@@ -67,15 +68,25 @@
 
     public static final MemorySegment nonCloseableNonTransferableSegment(MemorySegment seg) {
         return seg.withAccessModes(seg.accessModes() &  ~MemorySegment.CLOSE & ~MemorySegment.HANDOFF);
     }
 
+    private static final boolean isVaList(FunctionDescriptor desc) {
+        List<MemoryLayout> argLayouts = desc.argumentLayouts();
+        int size = argLayouts.size();
+        if (size > 0) {
+            MemoryLayout ml = argLayouts.get(size - 1);
+            return ml.equals(C_VA_LIST) && ml.name().orElse("").equals("__va_list_tag");
+        }
+        return false;
+    }
+
     public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {
         return lookup(LIBRARIES, name).map(
                 addr -> {
                     MethodType mt = MethodType.fromMethodDescriptorString(desc, LOADER);
-                    return variadic ?
+                    return variadic || isVaList(fdesc)?
                         VarargsInvoker.make(addr, mt, fdesc) :
                         ABI.downcallHandle(addr, mt, fdesc);
                 }).orElse(null);
     }
 
