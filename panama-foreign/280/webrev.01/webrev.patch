diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java
@@ -25,51 +25,99 @@
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.foreign.Addressable;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 
+import javax.tools.JavaFileObject;
 import java.lang.invoke.MethodType;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 /**
  * A helper class to generate header interface class in source form.
  * After aggregating various constituents of a .java source, build
  * method is called to get overall generated source string.
  */
 class HeaderBuilder extends JavaSourceBuilder {
+
+    protected final StringBuffer sb;
+
+    // current line alignment (number of 4-spaces)
+    private int align;
+
     HeaderBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         super(className, pkgName, constantHelper);
+        this.sb = new StringBuffer();
+    }
+
+    @Override
+    JavaSourceBuilder prev() {
+        return null;
+    }
+
+    @Override
+    void append(String s) {
+        sb.append(s);
+    }
+
+    @Override
+    void append(char c) {
+        sb.append(c);
+    }
+
+    @Override
+    void append(long l) {
+        sb.append(l);
+    }
+
+    @Override
+    void indent() {
+        for (int i = 0; i < align; i++) {
+            append("    ");
+        }
+    }
+
+    @Override
+    void incrAlign() {
+        align++;
+    }
+
+    @Override
+    void decrAlign() {
+        align--;
     }
 
-    void addFunctionalInterface(String name, MethodType mtype,  FunctionDescriptor fDesc) {
+    void addFunctionalInterface(String name, MethodType mtype, FunctionDescriptor fDesc) {
         incrAlign();
         indent();
-        sb.append("public interface " + name + " {\n");
+        append("public interface " + name + " {\n");
         incrAlign();
         indent();
-        sb.append(mtype.returnType().getName() + " apply(");
+        append(mtype.returnType().getName() + " apply(");
         String delim = "";
         for (int i = 0 ; i < mtype.parameterCount(); i++) {
-            sb.append(delim + mtype.parameterType(i).getName() + " x" + i);
+            append(delim + mtype.parameterType(i).getName() + " x" + i);
             delim = ", ";
         }
-        sb.append(");\n");
+        append(");\n");
         addFunctionalFactory(name, mtype, fDesc);
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
         indent();
     }
 
     void addStaticFunctionWrapper(String javaName, String nativeName, MethodType mtype, FunctionDescriptor desc, boolean varargs, List<String> paramNames) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + mtype.returnType().getName() + " " + javaName + " (");
+        append(PUB_MODS + mtype.returnType().getName() + " " + javaName + " (");
         String delim = "";
         List<String> pExprs = new ArrayList<>();
         final int numParams = paramNames.size();
         for (int i = 0 ; i < numParams; i++) {
             String pName = paramNames.get(i);
@@ -83,57 +131,57 @@
             }
             Class<?> pType = mtype.parameterType(i);
             if (pType.equals(MemoryAddress.class)) {
                 pType = Addressable.class;
             }
-            sb.append(delim + pType.getName() + " " + pName);
+            append(delim + pType.getName() + " " + pName);
             delim = ", ";
         }
         if (varargs) {
             String lastArg = "x" + numParams;
             if (numParams > 0) {
-                sb.append(", ");
+                append(", ");
             }
-            sb.append("Object... " + lastArg);
+            append("Object... " + lastArg);
             pExprs.add(lastArg);
         }
-        sb.append(") {\n");
+        append(") {\n");
         incrAlign();
         indent();
-        sb.append("try {\n");
+        append("try {\n");
         incrAlign();
         indent();
         if (!mtype.returnType().equals(void.class)) {
-            sb.append("return (" + mtype.returnType().getName() + ")");
+            append("return (" + mtype.returnType().getName() + ")");
         }
-        sb.append(methodHandleGetCallString(javaName, nativeName, mtype, desc, varargs) + ".invokeExact(" + String.join(", ", pExprs) + ");\n");
+        append(methodHandleGetCallString(javaName, nativeName, mtype, desc, varargs) + ".invokeExact(" + String.join(", ", pExprs) + ");\n");
         decrAlign();
         indent();
-        sb.append("} catch (Throwable ex) {\n");
+        append("} catch (Throwable ex) {\n");
         incrAlign();
         indent();
-        sb.append("throw new AssertionError(ex);\n");
+        append("throw new AssertionError(ex);\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     void emitPrimitiveTypedef(Type.Primitive primType, String name) {
         Type.Primitive.Kind kind = primType.kind();
         if (primitiveKindSupported(kind) && !kind.layout().isEmpty()) {
             incrAlign();
             indent();
-            sb.append(PUB_MODS);
-            sb.append("ValueLayout ");
-            sb.append(name);
-            sb.append(" = ");
-            sb.append(TypeTranslator.typeToLayoutName(kind));
-            sb.append(";\n");
+            append(PUB_MODS);
+            append("ValueLayout ");
+            append(uniqueNestedClassName(name));
+            append(" = ");
+            append(TypeTranslator.typeToLayoutName(kind));
+            append(";\n");
             decrAlign();
         }
     }
 
     private boolean primitiveKindSupported(Type.Primitive.Kind kind) {
@@ -144,44 +192,51 @@
     }
 
     void emitTypedef(String className, String superClassName) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS);
-        sb.append("class ");
-        sb.append(className);
-        sb.append(" extends ");
-        sb.append(superClassName);
-        sb.append(" {\n");
+        append(PUB_MODS);
+        append("class ");
+        String uniqueName = uniqueNestedClassName(className);
+        append(uniqueName);
+        append(" extends ");
+        append(superClassName);
+        append(" {\n");
         incrAlign();
         indent();
         // private constructor
-        sb.append("private ");
-        sb.append(className);
-        sb.append("() {}\n");
+        append("private ");
+        append(uniqueName);
+        append("() {}\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     private void addFunctionalFactory(String className, MethodType mtype, FunctionDescriptor fDesc) {
         indent();
-        sb.append(PUB_MODS + "MemorySegment allocate(" + className + " fi) {\n");
+        append(PUB_MODS + "MemorySegment allocate(" + className + " fi) {\n");
         incrAlign();
         indent();
-        sb.append("return RuntimeHelper.upcallStub(" + className + ".class, fi, " + functionGetCallString(className, fDesc) + ", " +
+        append("return RuntimeHelper.upcallStub(" + className + ".class, fi, " + functionGetCallString(className, fDesc) + ", " +
                 "\"" + mtype.toMethodDescriptorString() + "\");\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
 
         indent();
-        sb.append(PUB_MODS + "MemorySegment allocate(" + className + " fi, NativeScope scope) {\n");
+        append(PUB_MODS + "MemorySegment allocate(" + className + " fi, NativeScope scope) {\n");
         incrAlign();
         indent();
-        sb.append("return scope.register(allocate(fi));\n");
+        append("return scope.register(allocate(fi));\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
+    }
+
+    JavaFileObject build() {
+        String res = sb.toString();
+        this.sb.delete(0, res.length());
+        return Utils.fileFromString(pkgName, className, res);
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
@@ -24,38 +24,52 @@
  */
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.jextract.Declaration;
 
 import javax.tools.JavaFileObject;
 import java.lang.constant.ClassDesc;
 import java.lang.constant.DirectMethodHandleDesc;
 import java.lang.invoke.MethodType;
+import java.util.HashSet;
+import java.util.Set;
 
 /**
  * Superclass for .java source generator classes.
  */
 abstract class JavaSourceBuilder {
     static final String PUB_CLS_MODS = "public final ";
     static final String PUB_MODS = "public static ";
     protected final String className;
     protected final String pkgName;
     protected final ConstantHelper constantHelper;
-    // buffer
-    protected final StringBuffer sb;
-    // current line alignment (number of 4-spaces)
-    private int align;
+
+    Set<String> nestedClassNames = new HashSet<>();
+    int nestedClassNameCount = 0;
 
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper, int align) {
         this.className = className;
         this.pkgName = pkgName;
         this.constantHelper = constantHelper;
-        this.align = align;
-        this.sb = new StringBuffer();
     }
 
+    abstract JavaSourceBuilder prev();
+
+    abstract void append(String s);
+
+    abstract void append(char c);
+
+    abstract void append(long l);
+
+    abstract void indent();
+
+    abstract void incrAlign();
+
+    abstract void decrAlign();
+
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         this(className, pkgName, constantHelper, 0);
     }
 
     protected String getClassModifiers() {
@@ -65,44 +79,31 @@
     void classBegin() {
         addPackagePrefix();
         addImportSection();
 
         indent();
-        sb.append(getClassModifiers());
-        sb.append("class ");
-        sb.append(className);
-        sb.append(" {\n\n");
+        append(getClassModifiers());
+        append("class ");
+        append(className);
+        append(" {\n\n");
         emitConstructor();
     }
 
     void emitConstructor() {
         incrAlign();
         indent();
-        sb.append("private ");
-        sb.append(className);
-        sb.append("() {}");
-        sb.append('\n');
+        append("private ");
+        append(className);
+        append("() {}");
+        append('\n');
         decrAlign();
     }
 
-    void classEnd() {
+    JavaSourceBuilder classEnd() {
         indent();
-        sb.append("}\n\n");
-    }
-
-    String getSource() {
-        return sb.toString();
-    }
-
-    void addContent(String src) {
-        sb.append(src);
-    }
-
-    JavaFileObject build() {
-        String res = sb.toString();
-        this.sb.delete(0, res.length());
-        return Utils.fileFromString(pkgName, className, res);
+        append("}\n\n");
+        return prev();
     }
 
     void addLayoutGetter(String javaName, MemoryLayout layout) {
         emitForwardGetter(constantHelper.addLayout(javaName, layout));
     }
@@ -124,68 +125,68 @@
     }
 
     void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + type.getName() + " " + javaName + "$get() {\n");
+        append(PUB_MODS + type.getName() + " " + javaName + "$get() {\n");
         incrAlign();
         indent();
         String vhParam = addressGetCallString(javaName, nativeName, layout);
-        sb.append("return (" + type.getName() + ")"
+        append("return (" + type.getName() + ")"
                 + varHandleGetCallString(javaName, nativeName, layout, type, null) + ".get(" + vhParam + ");\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + "void " + javaName + "$set(" + type.getName() + " x) {\n");
+        append(PUB_MODS + "void " + javaName + "$set(" + type.getName() + " x) {\n");
         incrAlign();
         indent();
         String vhParam = addressGetCallString(javaName, nativeName, layout);
-        sb.append(varHandleGetCallString(javaName, nativeName, layout, type, null) + ".set(" + vhParam + ", x);\n");
+        append(varHandleGetCallString(javaName, nativeName, layout, type, null) + ".set(" + vhParam + ", x);\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     // Utility
 
     protected void addPackagePrefix() {
         assert pkgName.indexOf('/') == -1 : "package name invalid: " + pkgName;
-        sb.append("// Generated by jextract\n\n");
+        append("// Generated by jextract\n\n");
         if (!pkgName.isEmpty()) {
-            sb.append("package ");
-            sb.append(pkgName);
-            sb.append(";\n\n");
+            append("package ");
+            append(pkgName);
+            append(";\n\n");
         }
     }
 
     protected void addImportSection() {
-        sb.append("import java.lang.invoke.MethodHandle;\n");
-        sb.append("import java.lang.invoke.VarHandle;\n");
-        sb.append("import jdk.incubator.foreign.*;\n");
-        sb.append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
-        sb.append("import static ");
-        sb.append(OutputFactory.C_LANG_CONSTANTS_HOLDER);
-        sb.append(".*;\n");
+        append("import java.lang.invoke.MethodHandle;\n");
+        append("import java.lang.invoke.VarHandle;\n");
+        append("import jdk.incubator.foreign.*;\n");
+        append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
+        append("import static ");
+        append(OutputFactory.C_LANG_CONSTANTS_HOLDER);
+        append(".*;\n");
     }
 
     protected void emitForwardGetter(DirectMethodHandleDesc desc) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + displayName(desc.invocationType().returnType()) + " " + desc.methodName() + "() {\n");
+        append(PUB_MODS + displayName(desc.invocationType().returnType()) + " " + desc.methodName() + "() {\n");
         incrAlign();
         indent();
-        sb.append("return " + getCallString(desc) + ";\n");
+        append("return " + getCallString(desc) + ";\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     protected String getCallString(DirectMethodHandleDesc desc) {
         return desc.owner().displayName() + "." + desc.methodName() + "()";
@@ -209,19 +210,19 @@
 
     protected String addressGetCallString(String javaName, String nativeName, MemoryLayout layout) {
         return getCallString(constantHelper.addAddress(javaName, nativeName, layout));
     }
 
-    protected void indent() {
-        for (int i = 0; i < align; i++) {
-            sb.append("    ");
-        }
-    }
-
-    protected void incrAlign() {
-        align++;
-    }
-
-    protected void decrAlign() {
-        align--;
+    /*
+     * We may have case-insensitive name collision! A C program may have
+     * defined structs/unions/typedefs with the names FooS, fooS, FoOs, fOOs.
+     * Because we map structs/unions/typedefs to nested classes of header classes,
+     * such a case-insensitive name collision is problematic. This is because in
+     * a case-insensitive file system javac will overwrite classes for
+     * Header$CFooS, Header$CfooS, Header$CFoOs and so on! We solve this by
+     * generating unique case-insensitive names for nested classes.
+     */
+    String uniqueNestedClassName(String name) {
+        name = Utils.javaSafeIdentifier(name);
+        return nestedClassNames.add(name.toLowerCase()) ? name : (name + "$" + nestedClassNameCount++);
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
@@ -57,43 +57,30 @@
     private final Set<String> constants = new HashSet<>();
     // To detect duplicate Variable and Function declarations.
     private final Set<Declaration.Variable> variables = new HashSet<>();
     private final Set<Declaration.Function> functions = new HashSet<>();
 
-    protected final HeaderBuilder builder;
+    protected final HeaderBuilder toplevelBuilder;
+    protected JavaSourceBuilder currentBuilder;
     protected final ConstantHelper constantHelper;
     protected final TypeTranslator typeTranslator = new TypeTranslator();
-    private final String clsName;
     private final String pkgName;
-    private StructBuilder structBuilder;
-    private Map<Declaration, String> structClassNames = new HashMap<>();
-    private List<String> structSources = new ArrayList<>();
-    private Set<String> nestedClassNames = new HashSet<>();
-    private Set<Declaration.Typedef> unresolvedStructTypedefs = new HashSet<>();
-    private int nestedClassNameCount = 0;
-    /*
-     * We may have case-insensitive name collision! A C program may have
-     * defined structs/unions/typedefs with the names FooS, fooS, FoOs, fOOs.
-     * Because we map structs/unions/typedefs to nested classes of header classes,
-     * such a case-insensitive name collision is problematic. This is because in
-     * a case-insensitive file system javac will overwrite classes for
-     * Header$CFooS, Header$CfooS, Header$CFoOs and so on! We solve this by
-     * generating unique case-insensitive names for nested classes.
-     */
-    private String uniqueNestedClassName(String name) {
-        name = Utils.javaSafeIdentifier(name);
-        return nestedClassNames.add(name.toLowerCase())? name : (name + "$" + nestedClassNameCount++);
-    }
+    private final Map<Declaration, String> structClassNames = new HashMap<>();
+    private final Set<Declaration.Typedef> unresolvedStructTypedefs = new HashSet<>();
 
-    private String structClassName(Declaration decl) {
-        return structClassNames.computeIfAbsent(decl, d -> uniqueNestedClassName(d.name()));
+    private String addStructDefinition(Declaration decl, String name) {
+        return structClassNames.put(decl, name);
     }
 
     private boolean structDefinitionSeen(Declaration decl) {
         return structClassNames.containsKey(decl);
     }
 
+    private String structDefinitionName(Declaration decl) {
+        return structClassNames.get(decl);
+    }
+
     // have we seen this Variable earlier?
     protected boolean variableSeen(Declaration.Variable tree) {
         return !variables.add(tree);
     }
 
@@ -106,18 +93,18 @@
         String clsName = Utils.javaSafeIdentifier(headerName.replace(".h", "_h"), true);
         String qualName = pkgName.isEmpty() ? clsName : pkgName + "." + clsName;
         ConstantHelper constantHelper = new ConstantHelper(qualName,
                 ClassDesc.of(pkgName, "RuntimeHelper"), ClassDesc.of("jdk.incubator.foreign", "CSupport"),
                 libraryNames.toArray(String[]::new));
-        return new OutputFactory(clsName, pkgName,
+        return new OutputFactory(pkgName,
                 new HeaderBuilder(clsName, pkgName, constantHelper), constantHelper).generate(decl);
     }
 
-    private OutputFactory(String clsName, String pkgName, HeaderBuilder builder, ConstantHelper constantHelper) {
-        this.clsName = clsName;
+    private OutputFactory(String pkgName, HeaderBuilder toplevelBuilder, ConstantHelper constantHelper) {
         this.pkgName = pkgName;
-        this.builder = builder;
+        this.toplevelBuilder = toplevelBuilder;
+        this.currentBuilder = toplevelBuilder;
         this.constantHelper = constantHelper;
     }
 
     private static String getCLangConstantsHolder() {
         String prefix = "jdk.incubator.foreign.CSupport.";
@@ -135,27 +122,24 @@
     }
 
     static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();
 
     JavaFileObject[] generate(Declaration.Scoped decl) {
-        builder.classBegin();
+        toplevelBuilder.classBegin();
         //generate all decls
         decl.members().forEach(this::generateDecl);
-        for (String src : structSources) {
-            builder.addContent(src);
-        }
         // check if unresolved typedefs can be resolved now!
         for (Declaration.Typedef td : unresolvedStructTypedefs) {
             Declaration.Scoped structDef = ((Type.Declared)td.type()).tree();
             if (structDefinitionSeen(structDef)) {
-                builder.emitTypedef(uniqueNestedClassName(td.name()), structClassName(structDef));
+                toplevelBuilder.emitTypedef(td.name(), structDefinitionName(structDef));
             }
         }
-        builder.classEnd();
+        toplevelBuilder.classEnd();
         try {
             List<JavaFileObject> files = new ArrayList<>();
-            files.add(builder.build());
+            files.add(toplevelBuilder.build());
             files.addAll(constantHelper.getClasses());
             files.add(fileFromString(pkgName,"RuntimeHelper", getRuntimeHelperSource()));
             return files.toArray(new JavaFileObject[0]);
         } catch (IOException ex) {
             throw new UncheckedIOException(ex);
@@ -202,11 +186,11 @@
         if (!constants.add(constant.name())) {
             //skip
             return null;
         }
 
-        builder.addConstantGetter(Utils.javaSafeIdentifier(constant.name()),
+        toplevelBuilder.addConstantGetter(Utils.javaSafeIdentifier(constant.name()),
                 constant.value() instanceof String ? MemorySegment.class :
                 typeTranslator.getJavaType(constant.type()), constant.value());
         return null;
     }
 
@@ -215,31 +199,30 @@
         if (d.layout().isEmpty()) {
             //skip decl-only
             return null;
         }
         boolean structClass = false;
-        StructBuilder oldStructBuilder = this.structBuilder;
         if (!d.name().isEmpty() || !isRecord(parent)) {
             //only add explicit struct layout if the struct is not to be flattened inside another struct
             switch (d.kind()) {
                 case STRUCT:
                 case UNION: {
                     structClass = true;
-                    String className = structClassName(d.name().isEmpty() ? parent : d);
-                    this.structBuilder = new StructBuilder(className, pkgName, constantHelper);
-                    structBuilder.incrAlign();
-                    structBuilder.classBegin();
-                    structBuilder.addLayoutGetter(className, d.layout().get());
+                    String className = d.name().isEmpty() ? parent.name() : d.name();
+                    currentBuilder = new StructBuilder(currentBuilder, className, pkgName, constantHelper);
+                    addStructDefinition(d, currentBuilder.className);
+                    currentBuilder.incrAlign();
+                    currentBuilder.classBegin();
+                    currentBuilder.addLayoutGetter(className, d.layout().get());
                     break;
                 }
             }
         }
-        d.members().forEach(fieldTree -> fieldTree.accept(this, d.name().isEmpty() ? parent : d));
+        d.members().forEach(fieldTree -> fieldTree.accept(this, d));
         if (structClass) {
-            this.structBuilder.classEnd();
-            structSources.add(structBuilder.getSource());
-            this.structBuilder = oldStructBuilder;
+            currentBuilder = currentBuilder.classEnd();
+            currentBuilder.decrAlign();
         }
         return null;
     }
 
     @Override
@@ -253,18 +236,18 @@
         if (descriptor == null) {
             //abort
             return null;
         }
         String mhName = Utils.javaSafeIdentifier(funcTree.name());
-        builder.addMethodHandleGetter(mhName, funcTree.name(), mtype, descriptor, funcTree.type().varargs());
+        toplevelBuilder.addMethodHandleGetter(mhName, funcTree.name(), mtype, descriptor, funcTree.type().varargs());
         //generate static wrapper for function
         List<String> paramNames = funcTree.parameters()
                                           .stream()
                                           .map(Declaration.Variable::name)
                                           .map(p -> !p.isEmpty() ? Utils.javaSafeIdentifier(p) : p)
                                           .collect(Collectors.toList());
-        builder.addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), mtype,
+        toplevelBuilder.addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), mtype,
                 Type.descriptorFor(funcTree.type()).orElseThrow(), funcTree.type().varargs(), paramNames);
         int i = 0;
         for (Declaration.Variable param : funcTree.parameters()) {
             Type.Function f = getAsFunctionPointer(param.type());
             if (f != null) {
@@ -273,11 +256,11 @@
                 //generate functional interface
                 if (f.varargs()) {
                     System.err.println("WARNING: varargs in callbacks is not supported");
                 }
                 MethodType fitype = typeTranslator.getMethodType(f, false);
-                builder.addFunctionalInterface(name, fitype, Type.descriptorFor(f).orElseThrow());
+                toplevelBuilder.addFunctionalInterface(name, fitype, Type.descriptorFor(f).orElseThrow());
                 i++;
             }
         }
         return null;
     }
@@ -320,11 +303,11 @@
                              * struct Foo {
                              *     int x, y;
                              * };
                              */
                             if (structDefinitionSeen(s)) {
-                                builder.emitTypedef(uniqueNestedClassName(tree.name()), structClassName(s));
+                                toplevelBuilder.emitTypedef(tree.name(), structDefinitionName(s));
                             } else {
                                 /*
                                  * Definition of typedef'ed struct/union not seen yet. May be the definition comes later.
                                  * Save it to visit at the end of all declarations.
                                  */
@@ -336,11 +319,11 @@
                     default:
                         visitScoped(s, tree);
                 }
             }
         } else if (type instanceof Type.Primitive) {
-             builder.emitPrimitiveTypedef((Type.Primitive)type, uniqueNestedClassName(tree.name()));
+             toplevelBuilder.emitPrimitiveTypedef((Type.Primitive)type, tree.name());
         }
         return null;
     }
 
     @Override
@@ -354,10 +337,14 @@
         assert !symbol.isEmpty();
         assert !fieldName.isEmpty();
         fieldName = Utils.javaSafeIdentifier(fieldName);
 
         Type type = tree.type();
+        if (type instanceof Type.Declared && ((Type.Declared) type).tree().name().isEmpty()) {
+            // anon type - let's generate something
+            ((Type.Declared) type).tree().accept(this, tree);
+        }
         MemoryLayout layout = tree.layout().orElse(Type.layoutFor(type).orElse(null));
         if (layout == null) {
             //no layout - abort
             return null;
         }
@@ -371,25 +358,25 @@
         boolean isSegment = clazz == MemorySegment.class;
         MemoryLayout treeLayout = tree.layout().orElseThrow();
         if (parent != null) { //struct field
             MemoryLayout parentLayout = parentLayout(parent);
             if (isSegment) {
-                structBuilder.addAddressGetter(fieldName, tree.name(), treeLayout, parentLayout);
+                currentBuilder.addAddressGetter(fieldName, tree.name(), treeLayout, parentLayout);
             } else {
-                structBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
-                structBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
-                structBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+                currentBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+                currentBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+                currentBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
             }
         } else {
             if (isSegment) {
-                builder.addAddressGetter(fieldName, tree.name(), treeLayout, null);
+                toplevelBuilder.addAddressGetter(fieldName, tree.name(), treeLayout, null);
             } else {
-                builder.addLayoutGetter(fieldName, layout);
-                builder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz,null);
-                builder.addAddressGetter(fieldName, tree.name(), treeLayout, null);
-                builder.addGetter(fieldName, tree.name(), treeLayout, clazz, null);
-                builder.addSetter(fieldName, tree.name(), treeLayout, clazz, null);
+                toplevelBuilder.addLayoutGetter(fieldName, layout);
+                toplevelBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz,null);
+                toplevelBuilder.addAddressGetter(fieldName, tree.name(), treeLayout, null);
+                toplevelBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, null);
+                toplevelBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, null);
             }
         }
 
         return null;
     }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
@@ -32,11 +32,11 @@
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
 
-class PrettyPrinter implements Declaration.Visitor<Void, Void> {
+public class PrettyPrinter implements Declaration.Visitor<Void, Void> {
 
     int align = 0;
 
     void incr() {
         align += 4;
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
@@ -29,12 +29,50 @@
 
 /**
  * This class generates static utilities class for C structs, unions.
  */
 class StructBuilder extends JavaSourceBuilder {
-    StructBuilder(String className, String pkgName, ConstantHelper constantHelper) {
-        super(className, pkgName, constantHelper);
+
+    private final JavaSourceBuilder prev;
+
+    StructBuilder(JavaSourceBuilder prev, String className, String pkgName, ConstantHelper constantHelper) {
+        super(prev.uniqueNestedClassName(className), pkgName, constantHelper);
+        this.prev = prev;
+    }
+
+    JavaSourceBuilder prev() {
+        return prev;
+    }
+
+    @Override
+    void append(String s) {
+        prev.append(s);
+    }
+
+    @Override
+    void append(char c) {
+        prev.append(c);
+    }
+
+    @Override
+    void append(long l) {
+        prev.append(l);
+    }
+
+    @Override
+    void indent() {
+        prev.indent();
+    }
+
+    @Override
+    void incrAlign() {
+        prev.incrAlign();
+    }
+
+    @Override
+    void decrAlign() {
+        prev.decrAlign();
     }
 
     @Override
     protected String getClassModifiers() {
         return PUB_MODS;
@@ -49,160 +87,160 @@
     protected void addImportSection() {
         // nested class. containing class has necessary imports
     }
 
     @Override
-    void classEnd() {
+    JavaSourceBuilder classEnd() {
         emitSizeof();
         emitAllocate();
         emitScopeAllocate();
         emitAllocateArray();
         emitScopeAllocateArray();
-        super.classEnd();
+        return super.classEnd();
     }
 
     @Override
     void addLayoutGetter(String javaName, MemoryLayout layout) {
         var desc = constantHelper.addLayout(javaName + "$struct", layout);
         incrAlign();
         indent();
-        sb.append(PUB_MODS + displayName(desc.invocationType().returnType()) + " $LAYOUT() {\n");
+        append(PUB_MODS + displayName(desc.invocationType().returnType()) + " $LAYOUT() {\n");
         incrAlign();
         indent();
-        sb.append("return " + getCallString(desc) + ";\n");
+        append("return " + getCallString(desc) + ";\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     @Override
     void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + type.getName() + " " + javaName + "$get(MemorySegment addr) {\n");
+        append(PUB_MODS + type.getName() + " " + javaName + "$get(MemorySegment addr) {\n");
         incrAlign();
         indent();
-        sb.append("return (" + type.getName() + ")"
+        append("return (" + type.getName() + ")"
                 + varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".get(addr);\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
 
         addIndexGetter(javaName, nativeName, layout, type, parentLayout);
     }
 
     @Override
     void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
         String param = MemorySegment.class.getName() + " addr";
-        sb.append(PUB_MODS + "void " + javaName + "$set(" + param + ", " + type.getName() + " x) {\n");
+        append(PUB_MODS + "void " + javaName + "$set(" + param + ", " + type.getName() + " x) {\n");
         incrAlign();
         indent();
-        sb.append(varHandleGetCallString(javaName, nativeName, layout, type, null) + ".set(addr, x);\n");
+        append(varHandleGetCallString(javaName, nativeName, layout, type, null) + ".set(addr, x);\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
 
         addIndexSetter(javaName, nativeName, layout, type, parentLayout);
     }
 
     @Override
     void addAddressGetter(String javaName, String nativeName, MemoryLayout layout, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + "MemorySegment " + javaName + "$addr(MemorySegment addr) {\n");
+        append(PUB_MODS + "MemorySegment " + javaName + "$addr(MemorySegment addr) {\n");
         incrAlign();
         indent();
-        sb.append("return addr.asSlice(");
-        sb.append(parentLayout.byteOffset(MemoryLayout.PathElement.groupElement(nativeName)));
-        sb.append(", ");
-        sb.append(layout.byteSize());
-        sb.append(");\n");
+        append("return addr.asSlice(");
+        append(parentLayout.byteOffset(MemoryLayout.PathElement.groupElement(nativeName)));
+        append(", ");
+        append(layout.byteSize());
+        append(");\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     private void emitSizeof() {
         incrAlign();
         indent();
-        sb.append(PUB_MODS);
-        sb.append("long sizeof() { return $LAYOUT().byteSize(); }\n");
+        append(PUB_MODS);
+        append("long sizeof() { return $LAYOUT().byteSize(); }\n");
         decrAlign();
     }
 
     private void emitAllocate() {
         incrAlign();
         indent();
-        sb.append(PUB_MODS);
-        sb.append("MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n");
+        append(PUB_MODS);
+        append("MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n");
         decrAlign();
     }
 
     private void emitScopeAllocate() {
         incrAlign();
         indent();
-        sb.append(PUB_MODS);
-        sb.append("MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n");
+        append(PUB_MODS);
+        append("MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n");
         decrAlign();
     }
 
     private void emitAllocateArray() {
         incrAlign();
         indent();
-        sb.append(PUB_MODS);
-        sb.append("MemorySegment allocateArray(int len) {\n");
+        append(PUB_MODS);
+        append("MemorySegment allocateArray(int len) {\n");
         incrAlign();
         indent();
-        sb.append("return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));");
+        append("return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));");
         decrAlign();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     private void emitScopeAllocateArray() {
         incrAlign();
         indent();
-        sb.append(PUB_MODS);
-        sb.append("MemorySegment allocateArray(int len, NativeScope scope) {\n");
+        append(PUB_MODS);
+        append("MemorySegment allocateArray(int len, NativeScope scope) {\n");
         incrAlign();
         indent();
-        sb.append("return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));");
+        append("return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));");
         decrAlign();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     private void addIndexGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
         String params = MemorySegment.class.getName() + " addr, long index";
-        sb.append(PUB_MODS + type.getName() + " " + javaName + "$get(" + params + ") {\n");
+        append(PUB_MODS + type.getName() + " " + javaName + "$get(" + params + ") {\n");
         incrAlign();
         indent();
-        sb.append("return (" + type.getName() + ")"
+        append("return (" + type.getName() + ")"
                 + varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".get(addr.asSlice(index*sizeof()));\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     private void addIndexSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
         String params = MemorySegment.class.getName() + " addr, long index, " + type.getName() + " x";
-        sb.append(PUB_MODS + "void " + javaName + "$set(" + params + ") {\n");
+        append(PUB_MODS + "void " + javaName + "$set(" + params + ") {\n");
         incrAlign();
         indent();
-        sb.append(varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".set(addr.asSlice(index*sizeof()), x);\n");
+        append(varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".set(addr.asSlice(index*sizeof()), x);\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 }
diff a/test/jdk/tools/jextract/Test8244512.java b/test/jdk/tools/jextract/Test8244512.java
--- a/test/jdk/tools/jextract/Test8244512.java
+++ b/test/jdk/tools/jextract/Test8244512.java
@@ -40,17 +40,19 @@
         Path nestedOutput = getOutputFilePath("nestedgen");
         Path nestedH = getInputFilePath("nested.h");
         run("-d", nestedOutput.toString(), nestedH.toString()).checkSuccess();
         try(Loader loader = classLoader(nestedOutput)) {
             checkClass(loader, "Foo");
-            checkClass(loader, "Bar");
+            checkClass(loader, "Foo$Bar");
             checkClass(loader, "U");
-            checkClass(loader, "Point");
+            checkClass(loader, "U$Point");
             checkClass(loader, "MyStruct");
-            checkClass(loader, "MyStruct_Z");
+            checkClass(loader, "MyStruct$MyStruct_Z");
+            checkClass(loader, "MyStruct$k");
             checkClass(loader, "MyUnion");
-            checkClass(loader, "MyUnion_Z");
+            checkClass(loader, "MyUnion$MyUnion_Z");
+            checkClass(loader, "MyUnion$k");
             checkClass(loader, "X");
             checkClass(loader, "X2");
         } finally {
             deleteDir(nestedOutput);
         }
