diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
@@ -24,38 +24,52 @@
  */
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.jextract.Declaration;
 
 import javax.tools.JavaFileObject;
 import java.lang.constant.ClassDesc;
 import java.lang.constant.DirectMethodHandleDesc;
 import java.lang.invoke.MethodType;
+import java.util.HashSet;
+import java.util.Set;
 
 /**
  * Superclass for .java source generator classes.
  */
 abstract class JavaSourceBuilder {
     static final String PUB_CLS_MODS = "public final ";
     static final String PUB_MODS = "public static ";
     protected final String className;
     protected final String pkgName;
     protected final ConstantHelper constantHelper;
-    // buffer
-    protected final StringBuffer sb;
-    // current line alignment (number of 4-spaces)
-    private int align;
+
+    Set<String> nestedClassNames = new HashSet<>();
+    int nestedClassNameCount = 0;
 
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper, int align) {
         this.className = className;
         this.pkgName = pkgName;
         this.constantHelper = constantHelper;
-        this.align = align;
-        this.sb = new StringBuffer();
     }
 
+    abstract JavaSourceBuilder prev();
+
+    abstract void append(String s);
+
+    abstract void append(char c);
+
+    abstract void append(long l);
+
+    abstract void indent();
+
+    abstract void incrAlign();
+
+    abstract void decrAlign();
+
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         this(className, pkgName, constantHelper, 0);
     }
 
     protected String getClassModifiers() {
@@ -65,44 +79,31 @@
     void classBegin() {
         addPackagePrefix();
         addImportSection();
 
         indent();
-        sb.append(getClassModifiers());
-        sb.append("class ");
-        sb.append(className);
-        sb.append(" {\n\n");
+        append(getClassModifiers());
+        append("class ");
+        append(className);
+        append(" {\n\n");
         emitConstructor();
     }
 
     void emitConstructor() {
         incrAlign();
         indent();
-        sb.append("private ");
-        sb.append(className);
-        sb.append("() {}");
-        sb.append('\n');
+        append("private ");
+        append(className);
+        append("() {}");
+        append('\n');
         decrAlign();
     }
 
-    void classEnd() {
+    JavaSourceBuilder classEnd() {
         indent();
-        sb.append("}\n\n");
-    }
-
-    String getSource() {
-        return sb.toString();
-    }
-
-    void addContent(String src) {
-        sb.append(src);
-    }
-
-    JavaFileObject build() {
-        String res = sb.toString();
-        this.sb.delete(0, res.length());
-        return Utils.fileFromString(pkgName, className, res);
+        append("}\n\n");
+        return prev();
     }
 
     void addLayoutGetter(String javaName, MemoryLayout layout) {
         emitForwardGetter(constantHelper.addLayout(javaName, layout));
     }
@@ -124,68 +125,68 @@
     }
 
     void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + type.getName() + " " + javaName + "$get() {\n");
+        append(PUB_MODS + type.getName() + " " + javaName + "$get() {\n");
         incrAlign();
         indent();
         String vhParam = addressGetCallString(javaName, nativeName, layout);
-        sb.append("return (" + type.getName() + ")"
+        append("return (" + type.getName() + ")"
                 + varHandleGetCallString(javaName, nativeName, layout, type, null) + ".get(" + vhParam + ");\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + "void " + javaName + "$set(" + type.getName() + " x) {\n");
+        append(PUB_MODS + "void " + javaName + "$set(" + type.getName() + " x) {\n");
         incrAlign();
         indent();
         String vhParam = addressGetCallString(javaName, nativeName, layout);
-        sb.append(varHandleGetCallString(javaName, nativeName, layout, type, null) + ".set(" + vhParam + ", x);\n");
+        append(varHandleGetCallString(javaName, nativeName, layout, type, null) + ".set(" + vhParam + ", x);\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     // Utility
 
     protected void addPackagePrefix() {
         assert pkgName.indexOf('/') == -1 : "package name invalid: " + pkgName;
-        sb.append("// Generated by jextract\n\n");
+        append("// Generated by jextract\n\n");
         if (!pkgName.isEmpty()) {
-            sb.append("package ");
-            sb.append(pkgName);
-            sb.append(";\n\n");
+            append("package ");
+            append(pkgName);
+            append(";\n\n");
         }
     }
 
     protected void addImportSection() {
-        sb.append("import java.lang.invoke.MethodHandle;\n");
-        sb.append("import java.lang.invoke.VarHandle;\n");
-        sb.append("import jdk.incubator.foreign.*;\n");
-        sb.append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
-        sb.append("import static ");
-        sb.append(OutputFactory.C_LANG_CONSTANTS_HOLDER);
-        sb.append(".*;\n");
+        append("import java.lang.invoke.MethodHandle;\n");
+        append("import java.lang.invoke.VarHandle;\n");
+        append("import jdk.incubator.foreign.*;\n");
+        append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
+        append("import static ");
+        append(OutputFactory.C_LANG_CONSTANTS_HOLDER);
+        append(".*;\n");
     }
 
     protected void emitForwardGetter(DirectMethodHandleDesc desc) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + displayName(desc.invocationType().returnType()) + " " + desc.methodName() + "() {\n");
+        append(PUB_MODS + displayName(desc.invocationType().returnType()) + " " + desc.methodName() + "() {\n");
         incrAlign();
         indent();
-        sb.append("return " + getCallString(desc) + ";\n");
+        append("return " + getCallString(desc) + ";\n");
         decrAlign();
         indent();
-        sb.append("}\n");
+        append("}\n");
         decrAlign();
     }
 
     protected String getCallString(DirectMethodHandleDesc desc) {
         return desc.owner().displayName() + "." + desc.methodName() + "()";
@@ -209,19 +210,19 @@
 
     protected String addressGetCallString(String javaName, String nativeName, MemoryLayout layout) {
         return getCallString(constantHelper.addAddress(javaName, nativeName, layout));
     }
 
-    protected void indent() {
-        for (int i = 0; i < align; i++) {
-            sb.append("    ");
-        }
-    }
-
-    protected void incrAlign() {
-        align++;
-    }
-
-    protected void decrAlign() {
-        align--;
+    /*
+     * We may have case-insensitive name collision! A C program may have
+     * defined structs/unions/typedefs with the names FooS, fooS, FoOs, fOOs.
+     * Because we map structs/unions/typedefs to nested classes of header classes,
+     * such a case-insensitive name collision is problematic. This is because in
+     * a case-insensitive file system javac will overwrite classes for
+     * Header$CFooS, Header$CfooS, Header$CFoOs and so on! We solve this by
+     * generating unique case-insensitive names for nested classes.
+     */
+    String uniqueNestedClassName(String name) {
+        name = Utils.javaSafeIdentifier(name);
+        return nestedClassNames.add(name.toLowerCase()) ? name : (name + "$" + nestedClassNameCount++);
     }
 }
