diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderBuilder.java
@@ -44,10 +44,13 @@
  */
 class HeaderBuilder extends JavaSourceBuilder {
 
     protected final StringBuffer sb;
 
+    // current line alignment (number of 4-spaces)
+    private int align;
+
     HeaderBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         super(className, pkgName, constantHelper);
         this.sb = new StringBuffer();
     }
 
@@ -69,10 +72,27 @@
     @Override
     void append(long l) {
         sb.append(l);
     }
 
+    @Override
+    void indent() {
+        for (int i = 0; i < align; i++) {
+            append("    ");
+        }
+    }
+
+    @Override
+    void incrAlign() {
+        align++;
+    }
+
+    @Override
+    void decrAlign() {
+        align--;
+    }
+
     void addFunctionalInterface(String name, MethodType mtype, FunctionDescriptor fDesc) {
         incrAlign();
         indent();
         append("public interface " + name + " {\n");
         incrAlign();
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
@@ -42,31 +42,34 @@
     static final String PUB_CLS_MODS = "public final ";
     static final String PUB_MODS = "public static ";
     protected final String className;
     protected final String pkgName;
     protected final ConstantHelper constantHelper;
-    // current line alignment (number of 4-spaces)
-    private int align;
 
     Set<String> nestedClassNames = new HashSet<>();
     int nestedClassNameCount = 0;
 
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper, int align) {
         this.className = className;
         this.pkgName = pkgName;
         this.constantHelper = constantHelper;
-        this.align = align;
     }
 
     abstract JavaSourceBuilder prev();
 
     abstract void append(String s);
 
     abstract void append(char c);
 
     abstract void append(long l);
 
+    abstract void indent();
+
+    abstract void incrAlign();
+
+    abstract void decrAlign();
+
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         this(className, pkgName, constantHelper, 0);
     }
 
     protected String getClassModifiers() {
@@ -207,24 +210,10 @@
 
     protected String addressGetCallString(String javaName, String nativeName, MemoryLayout layout) {
         return getCallString(constantHelper.addAddress(javaName, nativeName, layout));
     }
 
-    protected void indent() {
-        for (int i = 0; i < align; i++) {
-            append("    ");
-        }
-    }
-
-    protected void incrAlign() {
-        align++;
-    }
-
-    protected void decrAlign() {
-        align--;
-    }
-
     /*
      * We may have case-insensitive name collision! A C program may have
      * defined structs/unions/typedefs with the names FooS, fooS, FoOs, fOOs.
      * Because we map structs/unions/typedefs to nested classes of header classes,
      * such a case-insensitive name collision is problematic. This is because in
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/OutputFactory.java
@@ -218,10 +218,11 @@
             }
         }
         d.members().forEach(fieldTree -> fieldTree.accept(this, d));
         if (structClass) {
             currentBuilder = currentBuilder.classEnd();
+            currentBuilder.decrAlign();
         }
         return null;
     }
 
     @Override
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
@@ -56,10 +56,25 @@
     @Override
     void append(long l) {
         prev.append(l);
     }
 
+    @Override
+    void indent() {
+        prev.indent();
+    }
+
+    @Override
+    void incrAlign() {
+        prev.incrAlign();
+    }
+
+    @Override
+    void decrAlign() {
+        prev.decrAlign();
+    }
+
     @Override
     protected String getClassModifiers() {
         return PUB_MODS;
     }
 
