diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/JavaSourceBuilder.java
@@ -42,31 +42,34 @@
     static final String PUB_CLS_MODS = "public final ";
     static final String PUB_MODS = "public static ";
     protected final String className;
     protected final String pkgName;
     protected final ConstantHelper constantHelper;
-    // current line alignment (number of 4-spaces)
-    private int align;
 
     Set<String> nestedClassNames = new HashSet<>();
     int nestedClassNameCount = 0;
 
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper, int align) {
         this.className = className;
         this.pkgName = pkgName;
         this.constantHelper = constantHelper;
-        this.align = align;
     }
 
     abstract JavaSourceBuilder prev();
 
     abstract void append(String s);
 
     abstract void append(char c);
 
     abstract void append(long l);
 
+    abstract void indent();
+
+    abstract void incrAlign();
+
+    abstract void decrAlign();
+
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         this(className, pkgName, constantHelper, 0);
     }
 
     protected String getClassModifiers() {
@@ -207,24 +210,10 @@
 
     protected String addressGetCallString(String javaName, String nativeName, MemoryLayout layout) {
         return getCallString(constantHelper.addAddress(javaName, nativeName, layout));
     }
 
-    protected void indent() {
-        for (int i = 0; i < align; i++) {
-            append("    ");
-        }
-    }
-
-    protected void incrAlign() {
-        align++;
-    }
-
-    protected void decrAlign() {
-        align--;
-    }
-
     /*
      * We may have case-insensitive name collision! A C program may have
      * defined structs/unions/typedefs with the names FooS, fooS, FoOs, fOOs.
      * Because we map structs/unions/typedefs to nested classes of header classes,
      * such a case-insensitive name collision is problematic. This is because in
