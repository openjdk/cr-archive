diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
@@ -26,7266 +26,7532 @@
 
 // Generated by jextract
 
 package jdk.internal.clang.libclang;
 
-import jdk.incubator.foreign.CSupport;
-import jdk.incubator.foreign.FunctionDescriptor;
-import jdk.incubator.foreign.LibraryLookup;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemoryLayout.PathElement;
-import jdk.incubator.foreign.MemorySegment;
-
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.VarHandle;
-
+import jdk.incubator.foreign.*;
+import jdk.incubator.foreign.MemoryLayout.PathElement;
+import static jdk.incubator.foreign.CSupport.*;
 public final class Index_h {
 
-    private static String libName() {
-        if (System.getProperty("os.name").startsWith("Windows")) {
-            return "libclang";
-        }
-        return "clang";
+    private Index_h() {}
+    public static int CINDEX_VERSION_MAJOR() {
+        return Index_h$constants_0.CINDEX_VERSION_MAJOR();
     }
-
-    private static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {libName()}, new String[] {});
-    public static final long NULL = 0L;
-    public static final int CINDEX_VERSION_MAJOR = (int)0L;
-    public static final int CINDEX_VERSION_MINOR = (int)59L;
-    public static final int CINDEX_VERSION = (int)59L;
-    public static final int CXError_Success = (int)0L;
-    public static final int CXError_Failure = (int)1L;
-    public static final int CXError_Crashed = (int)2L;
-    public static final int CXError_InvalidArguments = (int)3L;
-    public static final int CXError_ASTReadError = (int)4L;
-    public static final MemoryLayout CXString$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("data"),
-        CSupport.C_INT.withName("private_flags"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXString$private_flags = CXString$LAYOUT.varHandle(int.class, PathElement.groupElement("private_flags"));
-    public static final int CXString$private_flags$get(MemorySegment seg) {
-        return (int)CXString$private_flags.get(seg);
+    public static int CINDEX_VERSION_MINOR() {
+        return Index_h$constants_0.CINDEX_VERSION_MINOR();
     }
-    public static final void CXString$private_flags$set(MemorySegment seg, int x) {
-        CXString$private_flags.set(seg, x);
+    public static int CXError_Success() {
+        return Index_h$constants_0.CXError_Success();
     }
-    public static final MemoryLayout CXStringSet$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("Strings"),
-        CSupport.C_INT.withName("Count"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXStringSet$Count = CXStringSet$LAYOUT.varHandle(int.class, PathElement.groupElement("Count"));
-    public static final int CXStringSet$Count$get(MemorySegment seg) {
-        return (int)CXStringSet$Count.get(seg);
+    public static int CXError_Failure() {
+        return Index_h$constants_0.CXError_Failure();
     }
-    public static final void CXStringSet$Count$set(MemorySegment seg, int x) {
-        CXStringSet$Count.set(seg, x);
+    public static int CXError_Crashed() {
+        return Index_h$constants_0.CXError_Crashed();
     }
-    public static final MethodHandle clang_getCString = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCString",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("data"),
-                CSupport.C_INT.withName("private_flags"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemoryAddress clang_getCString (MemorySegment string) {
-        try {
-            return (MemoryAddress)clang_getCString.invokeExact(string);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXError_InvalidArguments() {
+        return Index_h$constants_0.CXError_InvalidArguments();
     }
-    public static final MethodHandle clang_disposeString = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeString",
-        "(Ljdk/incubator/foreign/MemorySegment;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("data"),
-                CSupport.C_INT.withName("private_flags"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final void clang_disposeString (MemorySegment string) {
-        try {
-            clang_disposeString.invokeExact(string);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXError_ASTReadError() {
+        return Index_h$constants_0.CXError_ASTReadError();
     }
-    public static final MethodHandle clang_disposeStringSet = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeStringSet",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeStringSet (MemoryAddress set) {
-        try {
-            clang_disposeStringSet.invokeExact(set);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+    public static class CXString {
+
+        private CXString() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXString$struct$LAYOUT();
         }
-    }
-    public static final MethodHandle clang_getBuildSessionTimestamp = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getBuildSessionTimestamp",
-        "()J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG)
-    );
-    public static final long clang_getBuildSessionTimestamp () {
-        try {
-            return (long)clang_getBuildSessionTimestamp.invokeExact();
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle data$VH() {
+            return Index_h$constants_0.data$VH();
         }
-    }
-    public static final MethodHandle clang_VirtualFileOverlay_create = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_VirtualFileOverlay_create",
-        "(I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_VirtualFileOverlay_create (int options) {
-        try {
-            return (MemoryAddress)clang_VirtualFileOverlay_create.invokeExact(options);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress data$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.data$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_VirtualFileOverlay_addFileMapping = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_VirtualFileOverlay_addFileMapping",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_VirtualFileOverlay_addFileMapping (MemoryAddress x0, MemoryAddress virtualPath, MemoryAddress realPath) {
-        try {
-            return (int)clang_VirtualFileOverlay_addFileMapping.invokeExact(x0, virtualPath, realPath);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress data$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.data$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_VirtualFileOverlay_setCaseSensitivity = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_VirtualFileOverlay_setCaseSensitivity",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_VirtualFileOverlay_setCaseSensitivity (MemoryAddress x0, int caseSensitive) {
-        try {
-            return (int)clang_VirtualFileOverlay_setCaseSensitivity.invokeExact(x0, caseSensitive);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void data$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.data$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_VirtualFileOverlay_writeToBuffer = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_VirtualFileOverlay_writeToBuffer",
-        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_VirtualFileOverlay_writeToBuffer (MemoryAddress x0, int options, MemoryAddress out_buffer_ptr, MemoryAddress out_buffer_size) {
-        try {
-            return (int)clang_VirtualFileOverlay_writeToBuffer.invokeExact(x0, options, out_buffer_ptr, out_buffer_size);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void data$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.data$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_free = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_free",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_free (MemoryAddress buffer) {
-        try {
-            clang_free.invokeExact(buffer);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle private_flags$VH() {
+            return Index_h$constants_0.private_flags$VH();
+        }
+        public static int private_flags$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.private_flags$VH().get(seg);
+        }
+        public static int private_flags$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.private_flags$VH().get(addr.asSlice(index*sizeof()));
         }
+        public static void private_flags$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.private_flags$VH().set(seg, x);
+        }
+        public static void private_flags$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.private_flags$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
     }
-    public static final MethodHandle clang_VirtualFileOverlay_dispose = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_VirtualFileOverlay_dispose",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_VirtualFileOverlay_dispose (MemoryAddress x0) {
-        try {
-            clang_VirtualFileOverlay_dispose.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+
+    public static class CXStringSet {
+
+        private CXStringSet() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXStringSet$struct$LAYOUT();
+        }
+        public static VarHandle Strings$VH() {
+            return Index_h$constants_0.Strings$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress Strings$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.Strings$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress Strings$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.Strings$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Strings$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.Strings$VH().set(seg, x);
+        }
+        public static void Strings$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.Strings$VH().set(addr.asSlice(index*sizeof()), x);
         }
+        public static VarHandle Count$VH() {
+            return Index_h$constants_0.Count$VH();
+        }
+        public static int Count$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.Count$VH().get(seg);
+        }
+        public static int Count$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.Count$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Count$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.Count$VH().set(seg, x);
+        }
+        public static void Count$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.Count$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getCString$MH() {
+        return Index_h$constants_0.clang_getCString$MH();
     }
-    public static final MethodHandle clang_ModuleMapDescriptor_create = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_ModuleMapDescriptor_create",
-        "(I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_ModuleMapDescriptor_create (int options) {
+    public static jdk.incubator.foreign.MemoryAddress clang_getCString (jdk.incubator.foreign.MemorySegment string) {
         try {
-            return (MemoryAddress)clang_ModuleMapDescriptor_create.invokeExact(options);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getCString$MH().invokeExact(string);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_ModuleMapDescriptor_setFrameworkModuleName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_ModuleMapDescriptor_setFrameworkModuleName",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_ModuleMapDescriptor_setFrameworkModuleName (MemoryAddress x0, MemoryAddress name) {
+    public static MethodHandle clang_disposeString$MH() {
+        return Index_h$constants_0.clang_disposeString$MH();
+    }
+    public static void clang_disposeString (jdk.incubator.foreign.MemorySegment string) {
         try {
-            return (int)clang_ModuleMapDescriptor_setFrameworkModuleName.invokeExact(x0, name);
+            Index_h$constants_0.clang_disposeString$MH().invokeExact(string);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_ModuleMapDescriptor_setUmbrellaHeader = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_ModuleMapDescriptor_setUmbrellaHeader",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_ModuleMapDescriptor_setUmbrellaHeader (MemoryAddress x0, MemoryAddress name) {
+    public static MethodHandle clang_disposeStringSet$MH() {
+        return Index_h$constants_0.clang_disposeStringSet$MH();
+    }
+    public static void clang_disposeStringSet (jdk.incubator.foreign.Addressable set) {
         try {
-            return (int)clang_ModuleMapDescriptor_setUmbrellaHeader.invokeExact(x0, name);
+            Index_h$constants_0.clang_disposeStringSet$MH().invokeExact(set.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_ModuleMapDescriptor_writeToBuffer = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_ModuleMapDescriptor_writeToBuffer",
-        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_ModuleMapDescriptor_writeToBuffer (MemoryAddress x0, int options, MemoryAddress out_buffer_ptr, MemoryAddress out_buffer_size) {
-        try {
-            return (int)clang_ModuleMapDescriptor_writeToBuffer.invokeExact(x0, options, out_buffer_ptr, out_buffer_size);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+    public static class CXUnsavedFile {
+
+        private CXUnsavedFile() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXUnsavedFile$struct$LAYOUT();
+        }
+        public static VarHandle Filename$VH() {
+            return Index_h$constants_0.Filename$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress Filename$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.Filename$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress Filename$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.Filename$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Filename$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.Filename$VH().set(seg, x);
+        }
+        public static void Filename$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.Filename$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle Contents$VH() {
+            return Index_h$constants_0.Contents$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress Contents$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.Contents$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress Contents$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.Contents$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Contents$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.Contents$VH().set(seg, x);
+        }
+        public static void Contents$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.Contents$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle Length$VH() {
+            return Index_h$constants_0.Length$VH();
         }
+        public static long Length$get(MemorySegment seg) {
+            return (long)Index_h$constants_0.Length$VH().get(seg);
+        }
+        public static long Length$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (long)Index_h$constants_0.Length$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Length$set(jdk.incubator.foreign.MemorySegment seg, long x) {
+            Index_h$constants_0.Length$VH().set(seg, x);
+        }
+        public static void Length$set(jdk.incubator.foreign.MemorySegment addr, long index, long x) {
+            Index_h$constants_0.Length$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
     }
-    public static final MethodHandle clang_ModuleMapDescriptor_dispose = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_ModuleMapDescriptor_dispose",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_ModuleMapDescriptor_dispose (MemoryAddress x0) {
-        try {
-            clang_ModuleMapDescriptor_dispose.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+
+    public static int CXAvailability_Available() {
+        return Index_h$constants_0.CXAvailability_Available();
+    }
+    public static int CXAvailability_Deprecated() {
+        return Index_h$constants_0.CXAvailability_Deprecated();
+    }
+    public static int CXAvailability_NotAvailable() {
+        return Index_h$constants_0.CXAvailability_NotAvailable();
+    }
+    public static int CXAvailability_NotAccessible() {
+        return Index_h$constants_0.CXAvailability_NotAccessible();
+    }
+    public static class CXVersion {
+
+        private CXVersion() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXVersion$struct$LAYOUT();
+        }
+        public static VarHandle Major$VH() {
+            return Index_h$constants_0.Major$VH();
+        }
+        public static int Major$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.Major$VH().get(seg);
+        }
+        public static int Major$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.Major$VH().get(addr.asSlice(index*sizeof()));
         }
+        public static void Major$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.Major$VH().set(seg, x);
+        }
+        public static void Major$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.Major$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle Minor$VH() {
+            return Index_h$constants_0.Minor$VH();
+        }
+        public static int Minor$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.Minor$VH().get(seg);
+        }
+        public static int Minor$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.Minor$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Minor$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.Minor$VH().set(seg, x);
+        }
+        public static void Minor$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.Minor$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle Subminor$VH() {
+            return Index_h$constants_0.Subminor$VH();
+        }
+        public static int Subminor$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.Subminor$VH().get(seg);
+        }
+        public static int Subminor$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.Subminor$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Subminor$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.Subminor$VH().set(seg, x);
+        }
+        public static void Subminor$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.Subminor$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static int CXCursor_ExceptionSpecificationKind_None() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_None();
+    }
+    public static int CXCursor_ExceptionSpecificationKind_DynamicNone() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_DynamicNone();
+    }
+    public static int CXCursor_ExceptionSpecificationKind_Dynamic() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Dynamic();
     }
-    public static final MemoryLayout CXUnsavedFile$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("Filename"),
-        CSupport.C_POINTER.withName("Contents"),
-        CSupport.C_LONGLONG.withName("Length")
-    ).withName("CXUnsavedFile");
-    public static final VarHandle CXUnsavedFile$Length = CXUnsavedFile$LAYOUT.varHandle(long.class, PathElement.groupElement("Length"));
-    public static final long CXUnsavedFile$Length$get(MemorySegment seg) {
-        return (long)CXUnsavedFile$Length.get(seg);
+    public static int CXCursor_ExceptionSpecificationKind_MSAny() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_MSAny();
     }
-    public static final void CXUnsavedFile$Length$set(MemorySegment seg, long x) {
-        CXUnsavedFile$Length.set(seg, x);
+    public static int CXCursor_ExceptionSpecificationKind_BasicNoexcept() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_BasicNoexcept();
     }
-    public static final int CXAvailability_Available = (int)0L;
-    public static final int CXAvailability_Deprecated = (int)1L;
-    public static final int CXAvailability_NotAvailable = (int)2L;
-    public static final int CXAvailability_NotAccessible = (int)3L;
-    public static final MemoryLayout CXVersion$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("Major"),
-        CSupport.C_INT.withName("Minor"),
-        CSupport.C_INT.withName("Subminor")
-    ).withName("CXVersion");
-    public static final VarHandle CXVersion$Major = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Major"));
-    public static final int CXVersion$Major$get(MemorySegment seg) {
-        return (int)CXVersion$Major.get(seg);
+    public static int CXCursor_ExceptionSpecificationKind_ComputedNoexcept() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_ComputedNoexcept();
     }
-    public static final void CXVersion$Major$set(MemorySegment seg, int x) {
-        CXVersion$Major.set(seg, x);
+    public static int CXCursor_ExceptionSpecificationKind_Unevaluated() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Unevaluated();
     }
-    public static final VarHandle CXVersion$Minor = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Minor"));
-    public static final int CXVersion$Minor$get(MemorySegment seg) {
-        return (int)CXVersion$Minor.get(seg);
+    public static int CXCursor_ExceptionSpecificationKind_Uninstantiated() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Uninstantiated();
     }
-    public static final void CXVersion$Minor$set(MemorySegment seg, int x) {
-        CXVersion$Minor.set(seg, x);
+    public static int CXCursor_ExceptionSpecificationKind_Unparsed() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Unparsed();
     }
-    public static final VarHandle CXVersion$Subminor = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Subminor"));
-    public static final int CXVersion$Subminor$get(MemorySegment seg) {
-        return (int)CXVersion$Subminor.get(seg);
+    public static int CXCursor_ExceptionSpecificationKind_NoThrow() {
+        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_NoThrow();
     }
-    public static final void CXVersion$Subminor$set(MemorySegment seg, int x) {
-        CXVersion$Subminor.set(seg, x);
+    public static MethodHandle clang_createIndex$MH() {
+        return Index_h$constants_0.clang_createIndex$MH();
     }
-    public static final int CXCursor_ExceptionSpecificationKind_None = (int)0L;
-    public static final int CXCursor_ExceptionSpecificationKind_DynamicNone = (int)1L;
-    public static final int CXCursor_ExceptionSpecificationKind_Dynamic = (int)2L;
-    public static final int CXCursor_ExceptionSpecificationKind_MSAny = (int)3L;
-    public static final int CXCursor_ExceptionSpecificationKind_BasicNoexcept = (int)4L;
-    public static final int CXCursor_ExceptionSpecificationKind_ComputedNoexcept = (int)5L;
-    public static final int CXCursor_ExceptionSpecificationKind_Unevaluated = (int)6L;
-    public static final int CXCursor_ExceptionSpecificationKind_Uninstantiated = (int)7L;
-    public static final int CXCursor_ExceptionSpecificationKind_Unparsed = (int)8L;
-    public static final int CXCursor_ExceptionSpecificationKind_NoThrow = (int)9L;
-    public static final MethodHandle clang_createIndex = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_createIndex",
-        "(II)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_createIndex (int excludeDeclarationsFromPCH, int displayDiagnostics) {
+    public static jdk.incubator.foreign.MemoryAddress clang_createIndex (int excludeDeclarationsFromPCH, int displayDiagnostics) {
         try {
-            return (MemoryAddress)clang_createIndex.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createIndex$MH().invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_disposeIndex = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeIndex",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeIndex (MemoryAddress index) {
+    public static MethodHandle clang_disposeIndex$MH() {
+        return Index_h$constants_0.clang_disposeIndex$MH();
+    }
+    public static void clang_disposeIndex (jdk.incubator.foreign.Addressable index) {
         try {
-            clang_disposeIndex.invokeExact(index);
+            Index_h$constants_0.clang_disposeIndex$MH().invokeExact(index.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXGlobalOpt_None = (int)0L;
-    public static final int CXGlobalOpt_ThreadBackgroundPriorityForIndexing = (int)1L;
-    public static final int CXGlobalOpt_ThreadBackgroundPriorityForEditing = (int)2L;
-    public static final int CXGlobalOpt_ThreadBackgroundPriorityForAll = (int)3L;
-    public static final MethodHandle clang_CXIndex_setGlobalOptions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXIndex_setGlobalOptions",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final void clang_CXIndex_setGlobalOptions (MemoryAddress x0, int options) {
+    public static int CXGlobalOpt_None() {
+        return Index_h$constants_0.CXGlobalOpt_None();
+    }
+    public static int CXGlobalOpt_ThreadBackgroundPriorityForIndexing() {
+        return Index_h$constants_0.CXGlobalOpt_ThreadBackgroundPriorityForIndexing();
+    }
+    public static int CXGlobalOpt_ThreadBackgroundPriorityForEditing() {
+        return Index_h$constants_0.CXGlobalOpt_ThreadBackgroundPriorityForEditing();
+    }
+    public static int CXGlobalOpt_ThreadBackgroundPriorityForAll() {
+        return Index_h$constants_0.CXGlobalOpt_ThreadBackgroundPriorityForAll();
+    }
+    public static MethodHandle clang_CXIndex_setGlobalOptions$MH() {
+        return Index_h$constants_0.clang_CXIndex_setGlobalOptions$MH();
+    }
+    public static void clang_CXIndex_setGlobalOptions (jdk.incubator.foreign.Addressable x0, int options) {
         try {
-            clang_CXIndex_setGlobalOptions.invokeExact(x0, options);
+            Index_h$constants_0.clang_CXIndex_setGlobalOptions$MH().invokeExact(x0.address(), options);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_CXIndex_getGlobalOptions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXIndex_getGlobalOptions",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_CXIndex_getGlobalOptions (MemoryAddress x0) {
+    public static MethodHandle clang_CXIndex_getGlobalOptions$MH() {
+        return Index_h$constants_0.clang_CXIndex_getGlobalOptions$MH();
+    }
+    public static int clang_CXIndex_getGlobalOptions (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_CXIndex_getGlobalOptions.invokeExact(x0);
+            return (int)Index_h$constants_0.clang_CXIndex_getGlobalOptions$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_CXIndex_setInvocationEmissionPathOption = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXIndex_setInvocationEmissionPathOption",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_CXIndex_setInvocationEmissionPathOption (MemoryAddress x0, MemoryAddress Path) {
+    public static MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH() {
+        return Index_h$constants_0.clang_CXIndex_setInvocationEmissionPathOption$MH();
+    }
+    public static void clang_CXIndex_setInvocationEmissionPathOption (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable Path) {
         try {
-            clang_CXIndex_setInvocationEmissionPathOption.invokeExact(x0, Path);
+            Index_h$constants_0.clang_CXIndex_setInvocationEmissionPathOption$MH().invokeExact(x0.address(), Path.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getFileName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFileName",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getFileName (MemoryAddress SFile) {
+    public static MethodHandle clang_getFileName$MH() {
+        return Index_h$constants_0.clang_getFileName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getFileName (jdk.incubator.foreign.Addressable SFile) {
         try {
-            return (MemorySegment)clang_getFileName.invokeExact(SFile);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getFileName$MH().invokeExact(SFile.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getFileTime = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFileTime",
-        "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            CSupport.C_POINTER
-        )
-    );
-    public static final long clang_getFileTime (MemoryAddress SFile) {
+    public static MethodHandle clang_getFileTime$MH() {
+        return Index_h$constants_0.clang_getFileTime$MH();
+    }
+    public static long clang_getFileTime (jdk.incubator.foreign.Addressable SFile) {
         try {
-            return (long)clang_getFileTime.invokeExact(SFile);
+            return (long)Index_h$constants_0.clang_getFileTime$MH().invokeExact(SFile.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MemoryLayout CXFileUniqueID$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(3, CSupport.C_LONGLONG).withName("data")
-    );
-    public static final MethodHandle clang_getFileUniqueID = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFileUniqueID",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getFileUniqueID (MemoryAddress file, MemoryAddress outID) {
+    public static class CXFileUniqueID {
+
+        private CXFileUniqueID() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXFileUniqueID$struct$LAYOUT();
+        }
+        public static MemorySegment data$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 24));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getFileUniqueID$MH() {
+        return Index_h$constants_0.clang_getFileUniqueID$MH();
+    }
+    public static int clang_getFileUniqueID (jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable outID) {
         try {
-            return (int)clang_getFileUniqueID.invokeExact(file, outID);
+            return (int)Index_h$constants_0.clang_getFileUniqueID$MH().invokeExact(file.address(), outID.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_isFileMultipleIncludeGuarded = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isFileMultipleIncludeGuarded",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_isFileMultipleIncludeGuarded (MemoryAddress tu, MemoryAddress file) {
+    public static MethodHandle clang_isFileMultipleIncludeGuarded$MH() {
+        return Index_h$constants_0.clang_isFileMultipleIncludeGuarded$MH();
+    }
+    public static int clang_isFileMultipleIncludeGuarded (jdk.incubator.foreign.Addressable tu, jdk.incubator.foreign.Addressable file) {
         try {
-            return (int)clang_isFileMultipleIncludeGuarded.invokeExact(tu, file);
+            return (int)Index_h$constants_0.clang_isFileMultipleIncludeGuarded$MH().invokeExact(tu.address(), file.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFile",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getFile (MemoryAddress tu, MemoryAddress file_name) {
+    public static MethodHandle clang_getFile$MH() {
+        return Index_h$constants_0.clang_getFile$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getFile (jdk.incubator.foreign.Addressable tu, jdk.incubator.foreign.Addressable file_name) {
         try {
-            return (MemoryAddress)clang_getFile.invokeExact(tu, file_name);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getFile$MH().invokeExact(tu.address(), file_name.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getFileContents = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFileContents",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getFileContents (MemoryAddress tu, MemoryAddress file, MemoryAddress size) {
+    public static MethodHandle clang_getFileContents$MH() {
+        return Index_h$constants_0.clang_getFileContents$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getFileContents (jdk.incubator.foreign.Addressable tu, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable size) {
         try {
-            return (MemoryAddress)clang_getFileContents.invokeExact(tu, file, size);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getFileContents$MH().invokeExact(tu.address(), file.address(), size.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_File_isEqual = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_File_isEqual",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_File_isEqual (MemoryAddress file1, MemoryAddress file2) {
+    public static MethodHandle clang_File_isEqual$MH() {
+        return Index_h$constants_0.clang_File_isEqual$MH();
+    }
+    public static int clang_File_isEqual (jdk.incubator.foreign.Addressable file1, jdk.incubator.foreign.Addressable file2) {
         try {
-            return (int)clang_File_isEqual.invokeExact(file1, file2);
+            return (int)Index_h$constants_0.clang_File_isEqual$MH().invokeExact(file1.address(), file2.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_File_tryGetRealPathName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_File_tryGetRealPathName",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_File_tryGetRealPathName (MemoryAddress file) {
+    public static MethodHandle clang_File_tryGetRealPathName$MH() {
+        return Index_h$constants_0.clang_File_tryGetRealPathName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_File_tryGetRealPathName (jdk.incubator.foreign.Addressable file) {
         try {
-            return (MemorySegment)clang_File_tryGetRealPathName.invokeExact(file);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_File_tryGetRealPathName$MH().invokeExact(file.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MemoryLayout CXSourceLocation$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-        CSupport.C_INT.withName("int_data"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXSourceLocation$int_data = CXSourceLocation$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
-    public static final int CXSourceLocation$int_data$get(MemorySegment seg) {
-        return (int)CXSourceLocation$int_data.get(seg);
-    }
-    public static final void CXSourceLocation$int_data$set(MemorySegment seg, int x) {
-        CXSourceLocation$int_data.set(seg, x);
-    }
-    public static final MemoryLayout CXSourceRange$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-        CSupport.C_INT.withName("begin_int_data"),
-        CSupport.C_INT.withName("end_int_data")
-    );
-    public static final VarHandle CXSourceRange$begin_int_data = CXSourceRange$LAYOUT.varHandle(int.class, PathElement.groupElement("begin_int_data"));
-    public static final int CXSourceRange$begin_int_data$get(MemorySegment seg) {
-        return (int)CXSourceRange$begin_int_data.get(seg);
-    }
-    public static final void CXSourceRange$begin_int_data$set(MemorySegment seg, int x) {
-        CXSourceRange$begin_int_data.set(seg, x);
+    public static class CXSourceLocation {
+
+        private CXSourceLocation() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXSourceLocation$struct$LAYOUT();
+        }
+        public static MemorySegment ptr_data$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
+        }
+        public static VarHandle int_data$VH() {
+            return Index_h$constants_0.int_data$VH();
+        }
+        public static int int_data$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.int_data$VH().get(seg);
+        }
+        public static int int_data$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.int_data$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void int_data$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.int_data$VH().set(seg, x);
+        }
+        public static void int_data$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.int_data$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
     }
-    public static final VarHandle CXSourceRange$end_int_data = CXSourceRange$LAYOUT.varHandle(int.class, PathElement.groupElement("end_int_data"));
-    public static final int CXSourceRange$end_int_data$get(MemorySegment seg) {
-        return (int)CXSourceRange$end_int_data.get(seg);
+
+    public static class CXSourceRange {
+
+        private CXSourceRange() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXSourceRange$struct$LAYOUT();
+        }
+        public static MemorySegment ptr_data$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
+        }
+        public static VarHandle begin_int_data$VH() {
+            return Index_h$constants_0.begin_int_data$VH();
+        }
+        public static int begin_int_data$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.begin_int_data$VH().get(seg);
+        }
+        public static int begin_int_data$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.begin_int_data$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void begin_int_data$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.begin_int_data$VH().set(seg, x);
+        }
+        public static void begin_int_data$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.begin_int_data$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle end_int_data$VH() {
+            return Index_h$constants_0.end_int_data$VH();
+        }
+        public static int end_int_data$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.end_int_data$VH().get(seg);
+        }
+        public static int end_int_data$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.end_int_data$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void end_int_data$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.end_int_data$VH().set(seg, x);
+        }
+        public static void end_int_data$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.end_int_data$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
     }
-    public static final void CXSourceRange$end_int_data$set(MemorySegment seg, int x) {
-        CXSourceRange$end_int_data.set(seg, x);
+
+    public static MethodHandle clang_getNullLocation$MH() {
+        return Index_h$constants_0.clang_getNullLocation$MH();
     }
-    public static final MethodHandle clang_getNullLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNullLocation",
-        "()Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ))
-    );
-    public static final MemorySegment clang_getNullLocation () {
+    public static jdk.incubator.foreign.MemorySegment clang_getNullLocation () {
         try {
-            return (MemorySegment)clang_getNullLocation.invokeExact();
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getNullLocation$MH().invokeExact();
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_equalLocations = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_equalLocations",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final int clang_equalLocations (MemorySegment loc1, MemorySegment loc2) {
+    public static MethodHandle clang_equalLocations$MH() {
+        return Index_h$constants_0.clang_equalLocations$MH();
+    }
+    public static int clang_equalLocations (jdk.incubator.foreign.MemorySegment loc1, jdk.incubator.foreign.MemorySegment loc2) {
         try {
-            return (int)clang_equalLocations.invokeExact(loc1, loc2);
+            return (int)Index_h$constants_0.clang_equalLocations$MH().invokeExact(loc1, loc2);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getLocation",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getLocation (MemoryAddress tu, MemoryAddress file, int line, int column) {
-        try {
-            return (MemorySegment)clang_getLocation.invokeExact(tu, file, line, column);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_getLocation$MH() {
+        return Index_h$constants_0.clang_getLocation$MH();
     }
-    public static final MethodHandle clang_getLocationForOffset = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getLocationForOffset",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getLocationForOffset (MemoryAddress tu, MemoryAddress file, int offset) {
-        try {
-            return (MemorySegment)clang_getLocationForOffset.invokeExact(tu, file, offset);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Location_isInSystemHeader = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Location_isInSystemHeader",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final int clang_Location_isInSystemHeader (MemorySegment location) {
-        try {
-            return (int)clang_Location_isInSystemHeader.invokeExact(location);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Location_isFromMainFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Location_isFromMainFile",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final int clang_Location_isFromMainFile (MemorySegment location) {
+    public static jdk.incubator.foreign.MemorySegment clang_getLocation (jdk.incubator.foreign.Addressable tu, jdk.incubator.foreign.Addressable file, int line, int column) {
         try {
-            return (int)clang_Location_isFromMainFile.invokeExact(location);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getNullRange = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNullRange",
-        "()Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ))
-    );
-    public static final MemorySegment clang_getNullRange () {
-        try {
-            return (MemorySegment)clang_getNullRange.invokeExact();
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getLocation$MH().invokeExact(tu.address(), file.address(), line, column);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getRange = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getRange",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ),
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemorySegment clang_getRange (MemorySegment begin, MemorySegment end) {
+    public static MethodHandle clang_getLocationForOffset$MH() {
+        return Index_h$constants_0.clang_getLocationForOffset$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getLocationForOffset (jdk.incubator.foreign.Addressable tu, jdk.incubator.foreign.Addressable file, int offset) {
         try {
-            return (MemorySegment)clang_getRange.invokeExact(begin, end);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_equalRanges = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_equalRanges",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("begin_int_data"),
-                CSupport.C_INT.withName("end_int_data")
-            ),
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("begin_int_data"),
-                CSupport.C_INT.withName("end_int_data")
-            )
-        )
-    );
-    public static final int clang_equalRanges (MemorySegment range1, MemorySegment range2) {
-        try {
-            return (int)clang_equalRanges.invokeExact(range1, range2);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Range_isNull = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Range_isNull",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("begin_int_data"),
-                CSupport.C_INT.withName("end_int_data")
-            )
-        )
-    );
-    public static final int clang_Range_isNull (MemorySegment range) {
-        try {
-            return (int)clang_Range_isNull.invokeExact(range);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getExpansionLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getExpansionLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getExpansionLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
-        try {
-            clang_getExpansionLocation.invokeExact(location, file, line, column, offset);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getPresumedLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getPresumedLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getPresumedLocation (MemorySegment location, MemoryAddress filename, MemoryAddress line, MemoryAddress column) {
-        try {
-            clang_getPresumedLocation.invokeExact(location, filename, line, column);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getInstantiationLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getInstantiationLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getInstantiationLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
-        try {
-            clang_getInstantiationLocation.invokeExact(location, file, line, column, offset);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getSpellingLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getSpellingLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getSpellingLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
-        try {
-            clang_getSpellingLocation.invokeExact(location, file, line, column, offset);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getFileLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFileLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getFileLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
-        try {
-            clang_getFileLocation.invokeExact(location, file, line, column, offset);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getLocationForOffset$MH().invokeExact(tu.address(), file.address(), offset);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getRangeStart = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getRangeStart",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("begin_int_data"),
-                CSupport.C_INT.withName("end_int_data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getRangeStart (MemorySegment range) {
+    public static MethodHandle clang_Location_isInSystemHeader$MH() {
+        return Index_h$constants_0.clang_Location_isInSystemHeader$MH();
+    }
+    public static int clang_Location_isInSystemHeader (jdk.incubator.foreign.MemorySegment location) {
         try {
-            return (MemorySegment)clang_getRangeStart.invokeExact(range);
+            return (int)Index_h$constants_0.clang_Location_isInSystemHeader$MH().invokeExact(location);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getRangeEnd = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getRangeEnd",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("begin_int_data"),
-                CSupport.C_INT.withName("end_int_data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getRangeEnd (MemorySegment range) {
+    public static MethodHandle clang_Location_isFromMainFile$MH() {
+        return Index_h$constants_0.clang_Location_isFromMainFile$MH();
+    }
+    public static int clang_Location_isFromMainFile (jdk.incubator.foreign.MemorySegment location) {
         try {
-            return (MemorySegment)clang_getRangeEnd.invokeExact(range);
+            return (int)Index_h$constants_0.clang_Location_isFromMainFile$MH().invokeExact(location);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MemoryLayout CXSourceRangeList$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("count"),
-        MemoryLayout.ofPaddingBits(32),
-        CSupport.C_POINTER.withName("ranges")
-    );
-    public static final VarHandle CXSourceRangeList$count = CXSourceRangeList$LAYOUT.varHandle(int.class, PathElement.groupElement("count"));
-    public static final int CXSourceRangeList$count$get(MemorySegment seg) {
-        return (int)CXSourceRangeList$count.get(seg);
+    public static MethodHandle clang_getNullRange$MH() {
+        return Index_h$constants_0.clang_getNullRange$MH();
     }
-    public static final void CXSourceRangeList$count$set(MemorySegment seg, int x) {
-        CXSourceRangeList$count.set(seg, x);
-    }
-    public static final MethodHandle clang_getSkippedRanges = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getSkippedRanges",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getSkippedRanges (MemoryAddress tu, MemoryAddress file) {
+    public static jdk.incubator.foreign.MemorySegment clang_getNullRange () {
         try {
-            return (MemoryAddress)clang_getSkippedRanges.invokeExact(tu, file);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getNullRange$MH().invokeExact();
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getAllSkippedRanges = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getAllSkippedRanges",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getAllSkippedRanges (MemoryAddress tu) {
+    public static MethodHandle clang_getRange$MH() {
+        return Index_h$constants_0.clang_getRange$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getRange (jdk.incubator.foreign.MemorySegment begin, jdk.incubator.foreign.MemorySegment end) {
         try {
-            return (MemoryAddress)clang_getAllSkippedRanges.invokeExact(tu);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getRange$MH().invokeExact(begin, end);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_disposeSourceRangeList = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeSourceRangeList",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeSourceRangeList (MemoryAddress ranges) {
+    public static MethodHandle clang_equalRanges$MH() {
+        return Index_h$constants_0.clang_equalRanges$MH();
+    }
+    public static int clang_equalRanges (jdk.incubator.foreign.MemorySegment range1, jdk.incubator.foreign.MemorySegment range2) {
         try {
-            clang_disposeSourceRangeList.invokeExact(ranges);
+            return (int)Index_h$constants_0.clang_equalRanges$MH().invokeExact(range1, range2);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXDiagnostic_Ignored = (int)0L;
-    public static final int CXDiagnostic_Note = (int)1L;
-    public static final int CXDiagnostic_Warning = (int)2L;
-    public static final int CXDiagnostic_Error = (int)3L;
-    public static final int CXDiagnostic_Fatal = (int)4L;
-    public static final MethodHandle clang_getNumDiagnosticsInSet = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNumDiagnosticsInSet",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getNumDiagnosticsInSet (MemoryAddress Diags) {
+    public static MethodHandle clang_Range_isNull$MH() {
+        return Index_h$constants_0.clang_Range_isNull$MH();
+    }
+    public static int clang_Range_isNull (jdk.incubator.foreign.MemorySegment range) {
         try {
-            return (int)clang_getNumDiagnosticsInSet.invokeExact(Diags);
+            return (int)Index_h$constants_0.clang_Range_isNull$MH().invokeExact(range);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticInSet = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticInSet",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_getDiagnosticInSet (MemoryAddress Diags, int Index) {
+    public static MethodHandle clang_getExpansionLocation$MH() {
+        return Index_h$constants_0.clang_getExpansionLocation$MH();
+    }
+    public static void clang_getExpansionLocation (jdk.incubator.foreign.MemorySegment location, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable line, jdk.incubator.foreign.Addressable column, jdk.incubator.foreign.Addressable offset) {
         try {
-            return (MemoryAddress)clang_getDiagnosticInSet.invokeExact(Diags, Index);
+            Index_h$constants_0.clang_getExpansionLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXLoadDiag_None = (int)0L;
-    public static final int CXLoadDiag_Unknown = (int)1L;
-    public static final int CXLoadDiag_CannotLoad = (int)2L;
-    public static final int CXLoadDiag_InvalidFile = (int)3L;
-    public static final MethodHandle clang_loadDiagnostics = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_loadDiagnostics",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_loadDiagnostics (MemoryAddress file, MemoryAddress error, MemoryAddress errorString) {
+    public static MethodHandle clang_getPresumedLocation$MH() {
+        return Index_h$constants_0.clang_getPresumedLocation$MH();
+    }
+    public static void clang_getPresumedLocation (jdk.incubator.foreign.MemorySegment location, jdk.incubator.foreign.Addressable filename, jdk.incubator.foreign.Addressable line, jdk.incubator.foreign.Addressable column) {
         try {
-            return (MemoryAddress)clang_loadDiagnostics.invokeExact(file, error, errorString);
+            Index_h$constants_0.clang_getPresumedLocation$MH().invokeExact(location, filename.address(), line.address(), column.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_disposeDiagnosticSet = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeDiagnosticSet",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeDiagnosticSet (MemoryAddress Diags) {
+    public static MethodHandle clang_getInstantiationLocation$MH() {
+        return Index_h$constants_0.clang_getInstantiationLocation$MH();
+    }
+    public static void clang_getInstantiationLocation (jdk.incubator.foreign.MemorySegment location, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable line, jdk.incubator.foreign.Addressable column, jdk.incubator.foreign.Addressable offset) {
         try {
-            clang_disposeDiagnosticSet.invokeExact(Diags);
+            Index_h$constants_0.clang_getInstantiationLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getChildDiagnostics = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getChildDiagnostics",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getChildDiagnostics (MemoryAddress D) {
+    public static MethodHandle clang_getSpellingLocation$MH() {
+        return Index_h$constants_0.clang_getSpellingLocation$MH();
+    }
+    public static void clang_getSpellingLocation (jdk.incubator.foreign.MemorySegment location, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable line, jdk.incubator.foreign.Addressable column, jdk.incubator.foreign.Addressable offset) {
         try {
-            return (MemoryAddress)clang_getChildDiagnostics.invokeExact(D);
+            Index_h$constants_0.clang_getSpellingLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getNumDiagnostics = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNumDiagnostics",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getNumDiagnostics (MemoryAddress Unit) {
+    public static MethodHandle clang_getFileLocation$MH() {
+        return Index_h$constants_0.clang_getFileLocation$MH();
+    }
+    public static void clang_getFileLocation (jdk.incubator.foreign.MemorySegment location, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable line, jdk.incubator.foreign.Addressable column, jdk.incubator.foreign.Addressable offset) {
         try {
-            return (int)clang_getNumDiagnostics.invokeExact(Unit);
+            Index_h$constants_0.clang_getFileLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnostic = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnostic",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_getDiagnostic (MemoryAddress Unit, int Index) {
+    public static MethodHandle clang_getRangeStart$MH() {
+        return Index_h$constants_0.clang_getRangeStart$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getRangeStart (jdk.incubator.foreign.MemorySegment range) {
         try {
-            return (MemoryAddress)clang_getDiagnostic.invokeExact(Unit, Index);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getRangeStart$MH().invokeExact(range);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticSetFromTU = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticSetFromTU",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getDiagnosticSetFromTU (MemoryAddress Unit) {
+    public static MethodHandle clang_getRangeEnd$MH() {
+        return Index_h$constants_0.clang_getRangeEnd$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getRangeEnd (jdk.incubator.foreign.MemorySegment range) {
         try {
-            return (MemoryAddress)clang_getDiagnosticSetFromTU.invokeExact(Unit);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getRangeEnd$MH().invokeExact(range);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_disposeDiagnostic = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeDiagnostic",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeDiagnostic (MemoryAddress Diagnostic) {
+    public static class CXSourceRangeList {
+
+        private CXSourceRangeList() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXSourceRangeList$struct$LAYOUT();
+        }
+        public static VarHandle count$VH() {
+            return Index_h$constants_0.count$VH();
+        }
+        public static int count$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.count$VH().get(seg);
+        }
+        public static int count$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.count$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void count$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.count$VH().set(seg, x);
+        }
+        public static void count$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.count$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle ranges$VH() {
+            return Index_h$constants_0.ranges$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress ranges$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.ranges$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress ranges$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.ranges$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void ranges$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.ranges$VH().set(seg, x);
+        }
+        public static void ranges$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.ranges$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getSkippedRanges$MH() {
+        return Index_h$constants_0.clang_getSkippedRanges$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getSkippedRanges (jdk.incubator.foreign.Addressable tu, jdk.incubator.foreign.Addressable file) {
         try {
-            clang_disposeDiagnostic.invokeExact(Diagnostic);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getSkippedRanges$MH().invokeExact(tu.address(), file.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXDiagnostic_DisplaySourceLocation = (int)1L;
-    public static final int CXDiagnostic_DisplayColumn = (int)2L;
-    public static final int CXDiagnostic_DisplaySourceRanges = (int)4L;
-    public static final int CXDiagnostic_DisplayOption = (int)8L;
-    public static final int CXDiagnostic_DisplayCategoryId = (int)16L;
-    public static final int CXDiagnostic_DisplayCategoryName = (int)32L;
-    public static final MethodHandle clang_formatDiagnostic = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_formatDiagnostic",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_formatDiagnostic (MemoryAddress Diagnostic, int Options) {
+    public static MethodHandle clang_getAllSkippedRanges$MH() {
+        return Index_h$constants_0.clang_getAllSkippedRanges$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getAllSkippedRanges (jdk.incubator.foreign.Addressable tu) {
         try {
-            return (MemorySegment)clang_formatDiagnostic.invokeExact(Diagnostic, Options);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getAllSkippedRanges$MH().invokeExact(tu.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_defaultDiagnosticDisplayOptions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_defaultDiagnosticDisplayOptions",
-        "()I",
-        FunctionDescriptor.of(CSupport.C_INT)
-    );
-    public static final int clang_defaultDiagnosticDisplayOptions () {
+    public static MethodHandle clang_disposeSourceRangeList$MH() {
+        return Index_h$constants_0.clang_disposeSourceRangeList$MH();
+    }
+    public static void clang_disposeSourceRangeList (jdk.incubator.foreign.Addressable ranges) {
         try {
-            return (int)clang_defaultDiagnosticDisplayOptions.invokeExact();
+            Index_h$constants_0.clang_disposeSourceRangeList$MH().invokeExact(ranges.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticSeverity = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticSeverity",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getDiagnosticSeverity (MemoryAddress x0) {
+    public static int CXDiagnostic_Ignored() {
+        return Index_h$constants_0.CXDiagnostic_Ignored();
+    }
+    public static int CXDiagnostic_Note() {
+        return Index_h$constants_0.CXDiagnostic_Note();
+    }
+    public static int CXDiagnostic_Warning() {
+        return Index_h$constants_0.CXDiagnostic_Warning();
+    }
+    public static int CXDiagnostic_Error() {
+        return Index_h$constants_0.CXDiagnostic_Error();
+    }
+    public static int CXDiagnostic_Fatal() {
+        return Index_h$constants_0.CXDiagnostic_Fatal();
+    }
+    public static MethodHandle clang_getNumDiagnosticsInSet$MH() {
+        return Index_h$constants_0.clang_getNumDiagnosticsInSet$MH();
+    }
+    public static int clang_getNumDiagnosticsInSet (jdk.incubator.foreign.Addressable Diags) {
         try {
-            return (int)clang_getDiagnosticSeverity.invokeExact(x0);
+            return (int)Index_h$constants_0.clang_getNumDiagnosticsInSet$MH().invokeExact(Diags.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticLocation",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getDiagnosticLocation (MemoryAddress x0) {
+    public static MethodHandle clang_getDiagnosticInSet$MH() {
+        return Index_h$constants_0.clang_getDiagnosticInSet$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getDiagnosticInSet (jdk.incubator.foreign.Addressable Diags, int Index) {
         try {
-            return (MemorySegment)clang_getDiagnosticLocation.invokeExact(x0);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getDiagnosticInSet$MH().invokeExact(Diags.address(), Index);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticSpelling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticSpelling",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getDiagnosticSpelling (MemoryAddress x0) {
+    public static int CXLoadDiag_None() {
+        return Index_h$constants_0.CXLoadDiag_None();
+    }
+    public static int CXLoadDiag_Unknown() {
+        return Index_h$constants_0.CXLoadDiag_Unknown();
+    }
+    public static int CXLoadDiag_CannotLoad() {
+        return Index_h$constants_0.CXLoadDiag_CannotLoad();
+    }
+    public static int CXLoadDiag_InvalidFile() {
+        return Index_h$constants_0.CXLoadDiag_InvalidFile();
+    }
+    public static MethodHandle clang_loadDiagnostics$MH() {
+        return Index_h$constants_0.clang_loadDiagnostics$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_loadDiagnostics (jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable error, jdk.incubator.foreign.Addressable errorString) {
         try {
-            return (MemorySegment)clang_getDiagnosticSpelling.invokeExact(x0);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_loadDiagnostics$MH().invokeExact(file.address(), error.address(), errorString.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticOption = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticOption",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getDiagnosticOption (MemoryAddress Diag, MemoryAddress Disable) {
+    public static MethodHandle clang_disposeDiagnosticSet$MH() {
+        return Index_h$constants_0.clang_disposeDiagnosticSet$MH();
+    }
+    public static void clang_disposeDiagnosticSet (jdk.incubator.foreign.Addressable Diags) {
         try {
-            return (MemorySegment)clang_getDiagnosticOption.invokeExact(Diag, Disable);
+            Index_h$constants_0.clang_disposeDiagnosticSet$MH().invokeExact(Diags.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticCategory = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticCategory",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getDiagnosticCategory (MemoryAddress x0) {
+    public static MethodHandle clang_getChildDiagnostics$MH() {
+        return Index_h$constants_0.clang_getChildDiagnostics$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getChildDiagnostics (jdk.incubator.foreign.Addressable D) {
         try {
-            return (int)clang_getDiagnosticCategory.invokeExact(x0);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getChildDiagnostics$MH().invokeExact(D.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticCategoryName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticCategoryName",
-        "(I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getDiagnosticCategoryName (int Category) {
+    public static MethodHandle clang_getNumDiagnostics$MH() {
+        return Index_h$constants_0.clang_getNumDiagnostics$MH();
+    }
+    public static int clang_getNumDiagnostics (jdk.incubator.foreign.Addressable Unit) {
         try {
-            return (MemorySegment)clang_getDiagnosticCategoryName.invokeExact(Category);
+            return (int)Index_h$constants_0.clang_getNumDiagnostics$MH().invokeExact(Unit.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticCategoryText = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticCategoryText",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getDiagnosticCategoryText (MemoryAddress x0) {
+    public static MethodHandle clang_getDiagnostic$MH() {
+        return Index_h$constants_0.clang_getDiagnostic$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getDiagnostic (jdk.incubator.foreign.Addressable Unit, int Index) {
         try {
-            return (MemorySegment)clang_getDiagnosticCategoryText.invokeExact(x0);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getDiagnostic$MH().invokeExact(Unit.address(), Index);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticNumRanges = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticNumRanges",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getDiagnosticNumRanges (MemoryAddress x0) {
+    public static MethodHandle clang_getDiagnosticSetFromTU$MH() {
+        return Index_h$constants_0.clang_getDiagnosticSetFromTU$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getDiagnosticSetFromTU (jdk.incubator.foreign.Addressable Unit) {
         try {
-            return (int)clang_getDiagnosticNumRanges.invokeExact(x0);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getDiagnosticSetFromTU$MH().invokeExact(Unit.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticRange = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticRange",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getDiagnosticRange (MemoryAddress Diagnostic, int Range) {
+    public static MethodHandle clang_disposeDiagnostic$MH() {
+        return Index_h$constants_0.clang_disposeDiagnostic$MH();
+    }
+    public static void clang_disposeDiagnostic (jdk.incubator.foreign.Addressable Diagnostic) {
         try {
-            return (MemorySegment)clang_getDiagnosticRange.invokeExact(Diagnostic, Range);
+            Index_h$constants_0.clang_disposeDiagnostic$MH().invokeExact(Diagnostic.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticNumFixIts = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticNumFixIts",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getDiagnosticNumFixIts (MemoryAddress Diagnostic) {
+    public static int CXDiagnostic_DisplaySourceLocation() {
+        return Index_h$constants_0.CXDiagnostic_DisplaySourceLocation();
+    }
+    public static int CXDiagnostic_DisplayColumn() {
+        return Index_h$constants_0.CXDiagnostic_DisplayColumn();
+    }
+    public static int CXDiagnostic_DisplaySourceRanges() {
+        return Index_h$constants_0.CXDiagnostic_DisplaySourceRanges();
+    }
+    public static int CXDiagnostic_DisplayOption() {
+        return Index_h$constants_0.CXDiagnostic_DisplayOption();
+    }
+    public static int CXDiagnostic_DisplayCategoryId() {
+        return Index_h$constants_0.CXDiagnostic_DisplayCategoryId();
+    }
+    public static int CXDiagnostic_DisplayCategoryName() {
+        return Index_h$constants_0.CXDiagnostic_DisplayCategoryName();
+    }
+    public static MethodHandle clang_formatDiagnostic$MH() {
+        return Index_h$constants_0.clang_formatDiagnostic$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_formatDiagnostic (jdk.incubator.foreign.Addressable Diagnostic, int Options) {
         try {
-            return (int)clang_getDiagnosticNumFixIts.invokeExact(Diagnostic);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_formatDiagnostic$MH().invokeExact(Diagnostic.address(), Options);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getDiagnosticFixIt = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDiagnosticFixIt",
-        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getDiagnosticFixIt (MemoryAddress Diagnostic, int FixIt, MemoryAddress ReplacementRange) {
+    public static MethodHandle clang_defaultDiagnosticDisplayOptions$MH() {
+        return Index_h$constants_0.clang_defaultDiagnosticDisplayOptions$MH();
+    }
+    public static int clang_defaultDiagnosticDisplayOptions () {
         try {
-            return (MemorySegment)clang_getDiagnosticFixIt.invokeExact(Diagnostic, FixIt, ReplacementRange);
+            return (int)Index_h$constants_0.clang_defaultDiagnosticDisplayOptions$MH().invokeExact();
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getTranslationUnitSpelling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTranslationUnitSpelling",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getTranslationUnitSpelling (MemoryAddress CTUnit) {
+    public static MethodHandle clang_getDiagnosticSeverity$MH() {
+        return Index_h$constants_0.clang_getDiagnosticSeverity$MH();
+    }
+    public static int clang_getDiagnosticSeverity (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (MemorySegment)clang_getTranslationUnitSpelling.invokeExact(CTUnit);
+            return (int)Index_h$constants_0.clang_getDiagnosticSeverity$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_createTranslationUnitFromSourceFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_createTranslationUnitFromSourceFile",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_createTranslationUnitFromSourceFile (MemoryAddress CIdx, MemoryAddress source_filename, int num_clang_command_line_args, MemoryAddress clang_command_line_args, int num_unsaved_files, MemoryAddress unsaved_files) {
+    public static MethodHandle clang_getDiagnosticLocation$MH() {
+        return Index_h$constants_0.clang_getDiagnosticLocation$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDiagnosticLocation (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (MemoryAddress)clang_createTranslationUnitFromSourceFile.invokeExact(CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticLocation$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_createTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_createTranslationUnit",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_createTranslationUnit (MemoryAddress CIdx, MemoryAddress ast_filename) {
+    public static MethodHandle clang_getDiagnosticSpelling$MH() {
+        return Index_h$constants_0.clang_getDiagnosticSpelling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDiagnosticSpelling (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (MemoryAddress)clang_createTranslationUnit.invokeExact(CIdx, ast_filename);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticSpelling$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_createTranslationUnit2 = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_createTranslationUnit2",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_createTranslationUnit2 (MemoryAddress CIdx, MemoryAddress ast_filename, MemoryAddress out_TU) {
+    public static MethodHandle clang_getDiagnosticOption$MH() {
+        return Index_h$constants_0.clang_getDiagnosticOption$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDiagnosticOption (jdk.incubator.foreign.Addressable Diag, jdk.incubator.foreign.Addressable Disable) {
         try {
-            return (int)clang_createTranslationUnit2.invokeExact(CIdx, ast_filename, out_TU);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticOption$MH().invokeExact(Diag.address(), Disable.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXTranslationUnit_None = (int)0L;
-    public static final int CXTranslationUnit_DetailedPreprocessingRecord = (int)1L;
-    public static final int CXTranslationUnit_Incomplete = (int)2L;
-    public static final int CXTranslationUnit_PrecompiledPreamble = (int)4L;
-    public static final int CXTranslationUnit_CacheCompletionResults = (int)8L;
-    public static final int CXTranslationUnit_ForSerialization = (int)16L;
-    public static final int CXTranslationUnit_CXXChainedPCH = (int)32L;
-    public static final int CXTranslationUnit_SkipFunctionBodies = (int)64L;
-    public static final int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = (int)128L;
-    public static final int CXTranslationUnit_CreatePreambleOnFirstParse = (int)256L;
-    public static final int CXTranslationUnit_KeepGoing = (int)512L;
-    public static final int CXTranslationUnit_SingleFileParse = (int)1024L;
-    public static final int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = (int)2048L;
-    public static final int CXTranslationUnit_IncludeAttributedTypes = (int)4096L;
-    public static final int CXTranslationUnit_VisitImplicitAttributes = (int)8192L;
-    public static final int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = (int)16384L;
-    public static final MethodHandle clang_defaultEditingTranslationUnitOptions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_defaultEditingTranslationUnitOptions",
-        "()I",
-        FunctionDescriptor.of(CSupport.C_INT)
-    );
-    public static final int clang_defaultEditingTranslationUnitOptions () {
+    public static MethodHandle clang_getDiagnosticCategory$MH() {
+        return Index_h$constants_0.clang_getDiagnosticCategory$MH();
+    }
+    public static int clang_getDiagnosticCategory (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_defaultEditingTranslationUnitOptions.invokeExact();
+            return (int)Index_h$constants_0.clang_getDiagnosticCategory$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_parseTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_parseTranslationUnit",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_parseTranslationUnit (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options) {
+    public static MethodHandle clang_getDiagnosticCategoryName$MH() {
+        return Index_h$constants_0.clang_getDiagnosticCategoryName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDiagnosticCategoryName (int Category) {
         try {
-            return (MemoryAddress)clang_parseTranslationUnit.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticCategoryName$MH().invokeExact(Category);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_parseTranslationUnit2 = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_parseTranslationUnit2",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_parseTranslationUnit2 (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options, MemoryAddress out_TU) {
+    public static MethodHandle clang_getDiagnosticCategoryText$MH() {
+        return Index_h$constants_0.clang_getDiagnosticCategoryText$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDiagnosticCategoryText (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_parseTranslationUnit2.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticCategoryText$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_parseTranslationUnit2FullArgv = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_parseTranslationUnit2FullArgv",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_parseTranslationUnit2FullArgv (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options, MemoryAddress out_TU) {
+    public static MethodHandle clang_getDiagnosticNumRanges$MH() {
+        return Index_h$constants_0.clang_getDiagnosticNumRanges$MH();
+    }
+    public static int clang_getDiagnosticNumRanges (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_parseTranslationUnit2FullArgv.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);
+            return (int)Index_h$constants_0.clang_getDiagnosticNumRanges$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXSaveTranslationUnit_None = (int)0L;
-    public static final MethodHandle clang_defaultSaveOptions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_defaultSaveOptions",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_defaultSaveOptions (MemoryAddress TU) {
+    public static MethodHandle clang_getDiagnosticRange$MH() {
+        return Index_h$constants_0.clang_getDiagnosticRange$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDiagnosticRange (jdk.incubator.foreign.Addressable Diagnostic, int Range) {
         try {
-            return (int)clang_defaultSaveOptions.invokeExact(TU);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticRange$MH().invokeExact(Diagnostic.address(), Range);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXSaveError_None = (int)0L;
-    public static final int CXSaveError_Unknown = (int)1L;
-    public static final int CXSaveError_TranslationErrors = (int)2L;
-    public static final int CXSaveError_InvalidTU = (int)3L;
-    public static final MethodHandle clang_saveTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_saveTranslationUnit",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_saveTranslationUnit (MemoryAddress TU, MemoryAddress FileName, int options) {
+    public static MethodHandle clang_getDiagnosticNumFixIts$MH() {
+        return Index_h$constants_0.clang_getDiagnosticNumFixIts$MH();
+    }
+    public static int clang_getDiagnosticNumFixIts (jdk.incubator.foreign.Addressable Diagnostic) {
         try {
-            return (int)clang_saveTranslationUnit.invokeExact(TU, FileName, options);
+            return (int)Index_h$constants_0.clang_getDiagnosticNumFixIts$MH().invokeExact(Diagnostic.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_suspendTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_suspendTranslationUnit",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_suspendTranslationUnit (MemoryAddress x0) {
+    public static MethodHandle clang_getDiagnosticFixIt$MH() {
+        return Index_h$constants_0.clang_getDiagnosticFixIt$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDiagnosticFixIt (jdk.incubator.foreign.Addressable Diagnostic, int FixIt, jdk.incubator.foreign.Addressable ReplacementRange) {
         try {
-            return (int)clang_suspendTranslationUnit.invokeExact(x0);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticFixIt$MH().invokeExact(Diagnostic.address(), FixIt, ReplacementRange.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_disposeTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeTranslationUnit",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeTranslationUnit (MemoryAddress x0) {
+    public static MethodHandle clang_getTranslationUnitSpelling$MH() {
+        return Index_h$constants_0.clang_getTranslationUnitSpelling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTranslationUnitSpelling (jdk.incubator.foreign.Addressable CTUnit) {
         try {
-            clang_disposeTranslationUnit.invokeExact(x0);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTranslationUnitSpelling$MH().invokeExact(CTUnit.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXReparse_None = (int)0L;
-    public static final MethodHandle clang_defaultReparseOptions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_defaultReparseOptions",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_defaultReparseOptions (MemoryAddress TU) {
+    public static MethodHandle clang_createTranslationUnitFromSourceFile$MH() {
+        return Index_h$constants_0.clang_createTranslationUnitFromSourceFile$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_createTranslationUnitFromSourceFile (jdk.incubator.foreign.Addressable CIdx, jdk.incubator.foreign.Addressable source_filename, int num_clang_command_line_args, jdk.incubator.foreign.Addressable clang_command_line_args, int num_unsaved_files, jdk.incubator.foreign.Addressable unsaved_files) {
         try {
-            return (int)clang_defaultReparseOptions.invokeExact(TU);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createTranslationUnitFromSourceFile$MH().invokeExact(CIdx.address(), source_filename.address(), num_clang_command_line_args, clang_command_line_args.address(), num_unsaved_files, unsaved_files.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_reparseTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_reparseTranslationUnit",
-        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_reparseTranslationUnit (MemoryAddress TU, int num_unsaved_files, MemoryAddress unsaved_files, int options) {
+    public static MethodHandle clang_createTranslationUnit$MH() {
+        return Index_h$constants_0.clang_createTranslationUnit$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_createTranslationUnit (jdk.incubator.foreign.Addressable CIdx, jdk.incubator.foreign.Addressable ast_filename) {
         try {
-            return (int)clang_reparseTranslationUnit.invokeExact(TU, num_unsaved_files, unsaved_files, options);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createTranslationUnit$MH().invokeExact(CIdx.address(), ast_filename.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXTUResourceUsage_AST = (int)1L;
-    public static final int CXTUResourceUsage_Identifiers = (int)2L;
-    public static final int CXTUResourceUsage_Selectors = (int)3L;
-    public static final int CXTUResourceUsage_GlobalCompletionResults = (int)4L;
-    public static final int CXTUResourceUsage_SourceManagerContentCache = (int)5L;
-    public static final int CXTUResourceUsage_AST_SideTables = (int)6L;
-    public static final int CXTUResourceUsage_SourceManager_Membuffer_Malloc = (int)7L;
-    public static final int CXTUResourceUsage_SourceManager_Membuffer_MMap = (int)8L;
-    public static final int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = (int)9L;
-    public static final int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = (int)10L;
-    public static final int CXTUResourceUsage_Preprocessor = (int)11L;
-    public static final int CXTUResourceUsage_PreprocessingRecord = (int)12L;
-    public static final int CXTUResourceUsage_SourceManager_DataStructures = (int)13L;
-    public static final int CXTUResourceUsage_Preprocessor_HeaderSearch = (int)14L;
-    public static final int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = (int)1L;
-    public static final int CXTUResourceUsage_MEMORY_IN_BYTES_END = (int)14L;
-    public static final int CXTUResourceUsage_First = (int)1L;
-    public static final int CXTUResourceUsage_Last = (int)14L;
-    public static final MethodHandle clang_getTUResourceUsageName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTUResourceUsageName",
-        "(I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_getTUResourceUsageName (int kind) {
+    public static MethodHandle clang_createTranslationUnit2$MH() {
+        return Index_h$constants_0.clang_createTranslationUnit2$MH();
+    }
+    public static int clang_createTranslationUnit2 (jdk.incubator.foreign.Addressable CIdx, jdk.incubator.foreign.Addressable ast_filename, jdk.incubator.foreign.Addressable out_TU) {
         try {
-            return (MemoryAddress)clang_getTUResourceUsageName.invokeExact(kind);
+            return (int)Index_h$constants_0.clang_createTranslationUnit2$MH().invokeExact(CIdx.address(), ast_filename.address(), out_TU.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MemoryLayout CXTUResourceUsageEntry$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("kind"),
-        MemoryLayout.ofPaddingBits(32),
-        CSupport.C_LONGLONG.withName("amount")
-    ).withName("CXTUResourceUsageEntry");
-    public static final VarHandle CXTUResourceUsageEntry$kind = CXTUResourceUsageEntry$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
-    public static final int CXTUResourceUsageEntry$kind$get(MemorySegment seg) {
-        return (int)CXTUResourceUsageEntry$kind.get(seg);
+    public static int CXTranslationUnit_None() {
+        return Index_h$constants_0.CXTranslationUnit_None();
     }
-    public static final void CXTUResourceUsageEntry$kind$set(MemorySegment seg, int x) {
-        CXTUResourceUsageEntry$kind.set(seg, x);
+    public static int CXTranslationUnit_DetailedPreprocessingRecord() {
+        return Index_h$constants_0.CXTranslationUnit_DetailedPreprocessingRecord();
     }
-    public static final VarHandle CXTUResourceUsageEntry$amount = CXTUResourceUsageEntry$LAYOUT.varHandle(long.class, PathElement.groupElement("amount"));
-    public static final long CXTUResourceUsageEntry$amount$get(MemorySegment seg) {
-        return (long)CXTUResourceUsageEntry$amount.get(seg);
+    public static int CXTranslationUnit_Incomplete() {
+        return Index_h$constants_0.CXTranslationUnit_Incomplete();
     }
-    public static final void CXTUResourceUsageEntry$amount$set(MemorySegment seg, long x) {
-        CXTUResourceUsageEntry$amount.set(seg, x);
+    public static int CXTranslationUnit_PrecompiledPreamble() {
+        return Index_h$constants_0.CXTranslationUnit_PrecompiledPreamble();
     }
-    public static final MemoryLayout CXTUResourceUsage$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("data"),
-        CSupport.C_INT.withName("numEntries"),
-        MemoryLayout.ofPaddingBits(32),
-        CSupport.C_POINTER.withName("entries")
-    ).withName("CXTUResourceUsage");
-    public static final VarHandle CXTUResourceUsage$numEntries = CXTUResourceUsage$LAYOUT.varHandle(int.class, PathElement.groupElement("numEntries"));
-    public static final int CXTUResourceUsage$numEntries$get(MemorySegment seg) {
-        return (int)CXTUResourceUsage$numEntries.get(seg);
+    public static int CXTranslationUnit_CacheCompletionResults() {
+        return Index_h$constants_0.CXTranslationUnit_CacheCompletionResults();
     }
-    public static final void CXTUResourceUsage$numEntries$set(MemorySegment seg, int x) {
-        CXTUResourceUsage$numEntries.set(seg, x);
+    public static int CXTranslationUnit_ForSerialization() {
+        return Index_h$constants_0.CXTranslationUnit_ForSerialization();
     }
-    public static final MethodHandle clang_getCXTUResourceUsage = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCXTUResourceUsage",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("numEntries"),
-            MemoryLayout.ofPaddingBits(32),
-            CSupport.C_POINTER.withName("entries")
-        ).withName("CXTUResourceUsage"),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getCXTUResourceUsage (MemoryAddress TU) {
-        try {
-            return (MemorySegment)clang_getCXTUResourceUsage.invokeExact(TU);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_disposeCXTUResourceUsage = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeCXTUResourceUsage",
-        "(Ljdk/incubator/foreign/MemorySegment;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("data"),
-                CSupport.C_INT.withName("numEntries"),
-                MemoryLayout.ofPaddingBits(32),
-                CSupport.C_POINTER.withName("entries")
-            ).withName("CXTUResourceUsage")
-        )
-    );
-    public static final void clang_disposeCXTUResourceUsage (MemorySegment usage) {
-        try {
-            clang_disposeCXTUResourceUsage.invokeExact(usage);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getTranslationUnitTargetInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTranslationUnitTargetInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getTranslationUnitTargetInfo (MemoryAddress CTUnit) {
-        try {
-            return (MemoryAddress)clang_getTranslationUnitTargetInfo.invokeExact(CTUnit);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_TargetInfo_dispose = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_TargetInfo_dispose",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_TargetInfo_dispose (MemoryAddress Info) {
-        try {
-            clang_TargetInfo_dispose.invokeExact(Info);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_TargetInfo_getTriple = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_TargetInfo_getTriple",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_TargetInfo_getTriple (MemoryAddress Info) {
-        try {
-            return (MemorySegment)clang_TargetInfo_getTriple.invokeExact(Info);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_TargetInfo_getPointerWidth = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_TargetInfo_getPointerWidth",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_TargetInfo_getPointerWidth (MemoryAddress Info) {
-        try {
-            return (int)clang_TargetInfo_getPointerWidth.invokeExact(Info);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXCursor_UnexposedDecl = (int)1L;
-    public static final int CXCursor_StructDecl = (int)2L;
-    public static final int CXCursor_UnionDecl = (int)3L;
-    public static final int CXCursor_ClassDecl = (int)4L;
-    public static final int CXCursor_EnumDecl = (int)5L;
-    public static final int CXCursor_FieldDecl = (int)6L;
-    public static final int CXCursor_EnumConstantDecl = (int)7L;
-    public static final int CXCursor_FunctionDecl = (int)8L;
-    public static final int CXCursor_VarDecl = (int)9L;
-    public static final int CXCursor_ParmDecl = (int)10L;
-    public static final int CXCursor_ObjCInterfaceDecl = (int)11L;
-    public static final int CXCursor_ObjCCategoryDecl = (int)12L;
-    public static final int CXCursor_ObjCProtocolDecl = (int)13L;
-    public static final int CXCursor_ObjCPropertyDecl = (int)14L;
-    public static final int CXCursor_ObjCIvarDecl = (int)15L;
-    public static final int CXCursor_ObjCInstanceMethodDecl = (int)16L;
-    public static final int CXCursor_ObjCClassMethodDecl = (int)17L;
-    public static final int CXCursor_ObjCImplementationDecl = (int)18L;
-    public static final int CXCursor_ObjCCategoryImplDecl = (int)19L;
-    public static final int CXCursor_TypedefDecl = (int)20L;
-    public static final int CXCursor_CXXMethod = (int)21L;
-    public static final int CXCursor_Namespace = (int)22L;
-    public static final int CXCursor_LinkageSpec = (int)23L;
-    public static final int CXCursor_Constructor = (int)24L;
-    public static final int CXCursor_Destructor = (int)25L;
-    public static final int CXCursor_ConversionFunction = (int)26L;
-    public static final int CXCursor_TemplateTypeParameter = (int)27L;
-    public static final int CXCursor_NonTypeTemplateParameter = (int)28L;
-    public static final int CXCursor_TemplateTemplateParameter = (int)29L;
-    public static final int CXCursor_FunctionTemplate = (int)30L;
-    public static final int CXCursor_ClassTemplate = (int)31L;
-    public static final int CXCursor_ClassTemplatePartialSpecialization = (int)32L;
-    public static final int CXCursor_NamespaceAlias = (int)33L;
-    public static final int CXCursor_UsingDirective = (int)34L;
-    public static final int CXCursor_UsingDeclaration = (int)35L;
-    public static final int CXCursor_TypeAliasDecl = (int)36L;
-    public static final int CXCursor_ObjCSynthesizeDecl = (int)37L;
-    public static final int CXCursor_ObjCDynamicDecl = (int)38L;
-    public static final int CXCursor_CXXAccessSpecifier = (int)39L;
-    public static final int CXCursor_FirstDecl = (int)1L;
-    public static final int CXCursor_LastDecl = (int)39L;
-    public static final int CXCursor_FirstRef = (int)40L;
-    public static final int CXCursor_ObjCSuperClassRef = (int)40L;
-    public static final int CXCursor_ObjCProtocolRef = (int)41L;
-    public static final int CXCursor_ObjCClassRef = (int)42L;
-    public static final int CXCursor_TypeRef = (int)43L;
-    public static final int CXCursor_CXXBaseSpecifier = (int)44L;
-    public static final int CXCursor_TemplateRef = (int)45L;
-    public static final int CXCursor_NamespaceRef = (int)46L;
-    public static final int CXCursor_MemberRef = (int)47L;
-    public static final int CXCursor_LabelRef = (int)48L;
-    public static final int CXCursor_OverloadedDeclRef = (int)49L;
-    public static final int CXCursor_VariableRef = (int)50L;
-    public static final int CXCursor_LastRef = (int)50L;
-    public static final int CXCursor_FirstInvalid = (int)70L;
-    public static final int CXCursor_InvalidFile = (int)70L;
-    public static final int CXCursor_NoDeclFound = (int)71L;
-    public static final int CXCursor_NotImplemented = (int)72L;
-    public static final int CXCursor_InvalidCode = (int)73L;
-    public static final int CXCursor_LastInvalid = (int)73L;
-    public static final int CXCursor_FirstExpr = (int)100L;
-    public static final int CXCursor_UnexposedExpr = (int)100L;
-    public static final int CXCursor_DeclRefExpr = (int)101L;
-    public static final int CXCursor_MemberRefExpr = (int)102L;
-    public static final int CXCursor_CallExpr = (int)103L;
-    public static final int CXCursor_ObjCMessageExpr = (int)104L;
-    public static final int CXCursor_BlockExpr = (int)105L;
-    public static final int CXCursor_IntegerLiteral = (int)106L;
-    public static final int CXCursor_FloatingLiteral = (int)107L;
-    public static final int CXCursor_ImaginaryLiteral = (int)108L;
-    public static final int CXCursor_StringLiteral = (int)109L;
-    public static final int CXCursor_CharacterLiteral = (int)110L;
-    public static final int CXCursor_ParenExpr = (int)111L;
-    public static final int CXCursor_UnaryOperator = (int)112L;
-    public static final int CXCursor_ArraySubscriptExpr = (int)113L;
-    public static final int CXCursor_BinaryOperator = (int)114L;
-    public static final int CXCursor_CompoundAssignOperator = (int)115L;
-    public static final int CXCursor_ConditionalOperator = (int)116L;
-    public static final int CXCursor_CStyleCastExpr = (int)117L;
-    public static final int CXCursor_CompoundLiteralExpr = (int)118L;
-    public static final int CXCursor_InitListExpr = (int)119L;
-    public static final int CXCursor_AddrLabelExpr = (int)120L;
-    public static final int CXCursor_StmtExpr = (int)121L;
-    public static final int CXCursor_GenericSelectionExpr = (int)122L;
-    public static final int CXCursor_GNUNullExpr = (int)123L;
-    public static final int CXCursor_CXXStaticCastExpr = (int)124L;
-    public static final int CXCursor_CXXDynamicCastExpr = (int)125L;
-    public static final int CXCursor_CXXReinterpretCastExpr = (int)126L;
-    public static final int CXCursor_CXXConstCastExpr = (int)127L;
-    public static final int CXCursor_CXXFunctionalCastExpr = (int)128L;
-    public static final int CXCursor_CXXTypeidExpr = (int)129L;
-    public static final int CXCursor_CXXBoolLiteralExpr = (int)130L;
-    public static final int CXCursor_CXXNullPtrLiteralExpr = (int)131L;
-    public static final int CXCursor_CXXThisExpr = (int)132L;
-    public static final int CXCursor_CXXThrowExpr = (int)133L;
-    public static final int CXCursor_CXXNewExpr = (int)134L;
-    public static final int CXCursor_CXXDeleteExpr = (int)135L;
-    public static final int CXCursor_UnaryExpr = (int)136L;
-    public static final int CXCursor_ObjCStringLiteral = (int)137L;
-    public static final int CXCursor_ObjCEncodeExpr = (int)138L;
-    public static final int CXCursor_ObjCSelectorExpr = (int)139L;
-    public static final int CXCursor_ObjCProtocolExpr = (int)140L;
-    public static final int CXCursor_ObjCBridgedCastExpr = (int)141L;
-    public static final int CXCursor_PackExpansionExpr = (int)142L;
-    public static final int CXCursor_SizeOfPackExpr = (int)143L;
-    public static final int CXCursor_LambdaExpr = (int)144L;
-    public static final int CXCursor_ObjCBoolLiteralExpr = (int)145L;
-    public static final int CXCursor_ObjCSelfExpr = (int)146L;
-    public static final int CXCursor_OMPArraySectionExpr = (int)147L;
-    public static final int CXCursor_ObjCAvailabilityCheckExpr = (int)148L;
-    public static final int CXCursor_FixedPointLiteral = (int)149L;
-    public static final int CXCursor_LastExpr = (int)149L;
-    public static final int CXCursor_FirstStmt = (int)200L;
-    public static final int CXCursor_UnexposedStmt = (int)200L;
-    public static final int CXCursor_LabelStmt = (int)201L;
-    public static final int CXCursor_CompoundStmt = (int)202L;
-    public static final int CXCursor_CaseStmt = (int)203L;
-    public static final int CXCursor_DefaultStmt = (int)204L;
-    public static final int CXCursor_IfStmt = (int)205L;
-    public static final int CXCursor_SwitchStmt = (int)206L;
-    public static final int CXCursor_WhileStmt = (int)207L;
-    public static final int CXCursor_DoStmt = (int)208L;
-    public static final int CXCursor_ForStmt = (int)209L;
-    public static final int CXCursor_GotoStmt = (int)210L;
-    public static final int CXCursor_IndirectGotoStmt = (int)211L;
-    public static final int CXCursor_ContinueStmt = (int)212L;
-    public static final int CXCursor_BreakStmt = (int)213L;
-    public static final int CXCursor_ReturnStmt = (int)214L;
-    public static final int CXCursor_GCCAsmStmt = (int)215L;
-    public static final int CXCursor_AsmStmt = (int)215L;
-    public static final int CXCursor_ObjCAtTryStmt = (int)216L;
-    public static final int CXCursor_ObjCAtCatchStmt = (int)217L;
-    public static final int CXCursor_ObjCAtFinallyStmt = (int)218L;
-    public static final int CXCursor_ObjCAtThrowStmt = (int)219L;
-    public static final int CXCursor_ObjCAtSynchronizedStmt = (int)220L;
-    public static final int CXCursor_ObjCAutoreleasePoolStmt = (int)221L;
-    public static final int CXCursor_ObjCForCollectionStmt = (int)222L;
-    public static final int CXCursor_CXXCatchStmt = (int)223L;
-    public static final int CXCursor_CXXTryStmt = (int)224L;
-    public static final int CXCursor_CXXForRangeStmt = (int)225L;
-    public static final int CXCursor_SEHTryStmt = (int)226L;
-    public static final int CXCursor_SEHExceptStmt = (int)227L;
-    public static final int CXCursor_SEHFinallyStmt = (int)228L;
-    public static final int CXCursor_MSAsmStmt = (int)229L;
-    public static final int CXCursor_NullStmt = (int)230L;
-    public static final int CXCursor_DeclStmt = (int)231L;
-    public static final int CXCursor_OMPParallelDirective = (int)232L;
-    public static final int CXCursor_OMPSimdDirective = (int)233L;
-    public static final int CXCursor_OMPForDirective = (int)234L;
-    public static final int CXCursor_OMPSectionsDirective = (int)235L;
-    public static final int CXCursor_OMPSectionDirective = (int)236L;
-    public static final int CXCursor_OMPSingleDirective = (int)237L;
-    public static final int CXCursor_OMPParallelForDirective = (int)238L;
-    public static final int CXCursor_OMPParallelSectionsDirective = (int)239L;
-    public static final int CXCursor_OMPTaskDirective = (int)240L;
-    public static final int CXCursor_OMPMasterDirective = (int)241L;
-    public static final int CXCursor_OMPCriticalDirective = (int)242L;
-    public static final int CXCursor_OMPTaskyieldDirective = (int)243L;
-    public static final int CXCursor_OMPBarrierDirective = (int)244L;
-    public static final int CXCursor_OMPTaskwaitDirective = (int)245L;
-    public static final int CXCursor_OMPFlushDirective = (int)246L;
-    public static final int CXCursor_SEHLeaveStmt = (int)247L;
-    public static final int CXCursor_OMPOrderedDirective = (int)248L;
-    public static final int CXCursor_OMPAtomicDirective = (int)249L;
-    public static final int CXCursor_OMPForSimdDirective = (int)250L;
-    public static final int CXCursor_OMPParallelForSimdDirective = (int)251L;
-    public static final int CXCursor_OMPTargetDirective = (int)252L;
-    public static final int CXCursor_OMPTeamsDirective = (int)253L;
-    public static final int CXCursor_OMPTaskgroupDirective = (int)254L;
-    public static final int CXCursor_OMPCancellationPointDirective = (int)255L;
-    public static final int CXCursor_OMPCancelDirective = (int)256L;
-    public static final int CXCursor_OMPTargetDataDirective = (int)257L;
-    public static final int CXCursor_OMPTaskLoopDirective = (int)258L;
-    public static final int CXCursor_OMPTaskLoopSimdDirective = (int)259L;
-    public static final int CXCursor_OMPDistributeDirective = (int)260L;
-    public static final int CXCursor_OMPTargetEnterDataDirective = (int)261L;
-    public static final int CXCursor_OMPTargetExitDataDirective = (int)262L;
-    public static final int CXCursor_OMPTargetParallelDirective = (int)263L;
-    public static final int CXCursor_OMPTargetParallelForDirective = (int)264L;
-    public static final int CXCursor_OMPTargetUpdateDirective = (int)265L;
-    public static final int CXCursor_OMPDistributeParallelForDirective = (int)266L;
-    public static final int CXCursor_OMPDistributeParallelForSimdDirective = (int)267L;
-    public static final int CXCursor_OMPDistributeSimdDirective = (int)268L;
-    public static final int CXCursor_OMPTargetParallelForSimdDirective = (int)269L;
-    public static final int CXCursor_OMPTargetSimdDirective = (int)270L;
-    public static final int CXCursor_OMPTeamsDistributeDirective = (int)271L;
-    public static final int CXCursor_OMPTeamsDistributeSimdDirective = (int)272L;
-    public static final int CXCursor_OMPTeamsDistributeParallelForSimdDirective = (int)273L;
-    public static final int CXCursor_OMPTeamsDistributeParallelForDirective = (int)274L;
-    public static final int CXCursor_OMPTargetTeamsDirective = (int)275L;
-    public static final int CXCursor_OMPTargetTeamsDistributeDirective = (int)276L;
-    public static final int CXCursor_OMPTargetTeamsDistributeParallelForDirective = (int)277L;
-    public static final int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = (int)278L;
-    public static final int CXCursor_OMPTargetTeamsDistributeSimdDirective = (int)279L;
-    public static final int CXCursor_BuiltinBitCastExpr = (int)280L;
-    public static final int CXCursor_LastStmt = (int)280L;
-    public static final int CXCursor_TranslationUnit = (int)300L;
-    public static final int CXCursor_FirstAttr = (int)400L;
-    public static final int CXCursor_UnexposedAttr = (int)400L;
-    public static final int CXCursor_IBActionAttr = (int)401L;
-    public static final int CXCursor_IBOutletAttr = (int)402L;
-    public static final int CXCursor_IBOutletCollectionAttr = (int)403L;
-    public static final int CXCursor_CXXFinalAttr = (int)404L;
-    public static final int CXCursor_CXXOverrideAttr = (int)405L;
-    public static final int CXCursor_AnnotateAttr = (int)406L;
-    public static final int CXCursor_AsmLabelAttr = (int)407L;
-    public static final int CXCursor_PackedAttr = (int)408L;
-    public static final int CXCursor_PureAttr = (int)409L;
-    public static final int CXCursor_ConstAttr = (int)410L;
-    public static final int CXCursor_NoDuplicateAttr = (int)411L;
-    public static final int CXCursor_CUDAConstantAttr = (int)412L;
-    public static final int CXCursor_CUDADeviceAttr = (int)413L;
-    public static final int CXCursor_CUDAGlobalAttr = (int)414L;
-    public static final int CXCursor_CUDAHostAttr = (int)415L;
-    public static final int CXCursor_CUDASharedAttr = (int)416L;
-    public static final int CXCursor_VisibilityAttr = (int)417L;
-    public static final int CXCursor_DLLExport = (int)418L;
-    public static final int CXCursor_DLLImport = (int)419L;
-    public static final int CXCursor_NSReturnsRetained = (int)420L;
-    public static final int CXCursor_NSReturnsNotRetained = (int)421L;
-    public static final int CXCursor_NSReturnsAutoreleased = (int)422L;
-    public static final int CXCursor_NSConsumesSelf = (int)423L;
-    public static final int CXCursor_NSConsumed = (int)424L;
-    public static final int CXCursor_ObjCException = (int)425L;
-    public static final int CXCursor_ObjCNSObject = (int)426L;
-    public static final int CXCursor_ObjCIndependentClass = (int)427L;
-    public static final int CXCursor_ObjCPreciseLifetime = (int)428L;
-    public static final int CXCursor_ObjCReturnsInnerPointer = (int)429L;
-    public static final int CXCursor_ObjCRequiresSuper = (int)430L;
-    public static final int CXCursor_ObjCRootClass = (int)431L;
-    public static final int CXCursor_ObjCSubclassingRestricted = (int)432L;
-    public static final int CXCursor_ObjCExplicitProtocolImpl = (int)433L;
-    public static final int CXCursor_ObjCDesignatedInitializer = (int)434L;
-    public static final int CXCursor_ObjCRuntimeVisible = (int)435L;
-    public static final int CXCursor_ObjCBoxable = (int)436L;
-    public static final int CXCursor_FlagEnum = (int)437L;
-    public static final int CXCursor_ConvergentAttr = (int)438L;
-    public static final int CXCursor_WarnUnusedAttr = (int)439L;
-    public static final int CXCursor_WarnUnusedResultAttr = (int)440L;
-    public static final int CXCursor_AlignedAttr = (int)441L;
-    public static final int CXCursor_LastAttr = (int)441L;
-    public static final int CXCursor_PreprocessingDirective = (int)500L;
-    public static final int CXCursor_MacroDefinition = (int)501L;
-    public static final int CXCursor_MacroExpansion = (int)502L;
-    public static final int CXCursor_MacroInstantiation = (int)502L;
-    public static final int CXCursor_InclusionDirective = (int)503L;
-    public static final int CXCursor_FirstPreprocessing = (int)500L;
-    public static final int CXCursor_LastPreprocessing = (int)503L;
-    public static final int CXCursor_ModuleImportDecl = (int)600L;
-    public static final int CXCursor_TypeAliasTemplateDecl = (int)601L;
-    public static final int CXCursor_StaticAssert = (int)602L;
-    public static final int CXCursor_FriendDecl = (int)603L;
-    public static final int CXCursor_FirstExtraDecl = (int)600L;
-    public static final int CXCursor_LastExtraDecl = (int)603L;
-    public static final int CXCursor_OverloadCandidate = (int)700L;
-    public static final MemoryLayout CXCursor$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("kind"),
-        CSupport.C_INT.withName("xdata"),
-        MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-    );
-    public static final VarHandle CXCursor$kind = CXCursor$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
-    public static final int CXCursor$kind$get(MemorySegment seg) {
-        return (int)CXCursor$kind.get(seg);
-    }
-    public static final void CXCursor$kind$set(MemorySegment seg, int x) {
-        CXCursor$kind.set(seg, x);
-    }
-    public static final VarHandle CXCursor$xdata = CXCursor$LAYOUT.varHandle(int.class, PathElement.groupElement("xdata"));
-    public static final int CXCursor$xdata$get(MemorySegment seg) {
-        return (int)CXCursor$xdata.get(seg);
-    }
-    public static final void CXCursor$xdata$set(MemorySegment seg, int x) {
-        CXCursor$xdata.set(seg, x);
-    }
-    public static final MethodHandle clang_getNullCursor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNullCursor",
-        "()Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ))
-    );
-    public static final MemorySegment clang_getNullCursor () {
-        try {
-            return (MemorySegment)clang_getNullCursor.invokeExact();
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getTranslationUnitCursor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTranslationUnitCursor",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getTranslationUnitCursor (MemoryAddress x0) {
-        try {
-            return (MemorySegment)clang_getTranslationUnitCursor.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_equalCursors = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_equalCursors",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_equalCursors (MemorySegment x0, MemorySegment x1) {
-        try {
-            return (int)clang_equalCursors.invokeExact(x0, x1);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_isNull = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isNull",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isNull (MemorySegment cursor) {
+    public static int CXTranslationUnit_CXXChainedPCH() {
+        return Index_h$constants_0.CXTranslationUnit_CXXChainedPCH();
+    }
+    public static int CXTranslationUnit_SkipFunctionBodies() {
+        return Index_h$constants_0.CXTranslationUnit_SkipFunctionBodies();
+    }
+    public static int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion() {
+        return Index_h$constants_0.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion();
+    }
+    public static int CXTranslationUnit_CreatePreambleOnFirstParse() {
+        return Index_h$constants_0.CXTranslationUnit_CreatePreambleOnFirstParse();
+    }
+    public static int CXTranslationUnit_KeepGoing() {
+        return Index_h$constants_0.CXTranslationUnit_KeepGoing();
+    }
+    public static int CXTranslationUnit_SingleFileParse() {
+        return Index_h$constants_0.CXTranslationUnit_SingleFileParse();
+    }
+    public static int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble() {
+        return Index_h$constants_0.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble();
+    }
+    public static int CXTranslationUnit_IncludeAttributedTypes() {
+        return Index_h$constants_0.CXTranslationUnit_IncludeAttributedTypes();
+    }
+    public static int CXTranslationUnit_VisitImplicitAttributes() {
+        return Index_h$constants_0.CXTranslationUnit_VisitImplicitAttributes();
+    }
+    public static int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles() {
+        return Index_h$constants_0.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles();
+    }
+    public static int CXTranslationUnit_RetainExcludedConditionalBlocks() {
+        return Index_h$constants_0.CXTranslationUnit_RetainExcludedConditionalBlocks();
+    }
+    public static MethodHandle clang_defaultEditingTranslationUnitOptions$MH() {
+        return Index_h$constants_0.clang_defaultEditingTranslationUnitOptions$MH();
+    }
+    public static int clang_defaultEditingTranslationUnitOptions () {
         try {
-            return (int)clang_Cursor_isNull.invokeExact(cursor);
+            return (int)Index_h$constants_0.clang_defaultEditingTranslationUnitOptions$MH().invokeExact();
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_hashCursor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_hashCursor",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_hashCursor (MemorySegment x0) {
+    public static MethodHandle clang_parseTranslationUnit$MH() {
+        return Index_h$constants_0.clang_parseTranslationUnit$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_parseTranslationUnit (jdk.incubator.foreign.Addressable CIdx, jdk.incubator.foreign.Addressable source_filename, jdk.incubator.foreign.Addressable command_line_args, int num_command_line_args, jdk.incubator.foreign.Addressable unsaved_files, int num_unsaved_files, int options) {
         try {
-            return (int)clang_hashCursor.invokeExact(x0);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_parseTranslationUnit$MH().invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getCursorKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorKind",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCursorKind (MemorySegment x0) {
+    public static MethodHandle clang_parseTranslationUnit2$MH() {
+        return Index_h$constants_0.clang_parseTranslationUnit2$MH();
+    }
+    public static int clang_parseTranslationUnit2 (jdk.incubator.foreign.Addressable CIdx, jdk.incubator.foreign.Addressable source_filename, jdk.incubator.foreign.Addressable command_line_args, int num_command_line_args, jdk.incubator.foreign.Addressable unsaved_files, int num_unsaved_files, int options, jdk.incubator.foreign.Addressable out_TU) {
         try {
-            return (int)clang_getCursorKind.invokeExact(x0);
+            return (int)Index_h$constants_0.clang_parseTranslationUnit2$MH().invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options, out_TU.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_isDeclaration = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isDeclaration",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isDeclaration (int x0) {
+    public static MethodHandle clang_parseTranslationUnit2FullArgv$MH() {
+        return Index_h$constants_0.clang_parseTranslationUnit2FullArgv$MH();
+    }
+    public static int clang_parseTranslationUnit2FullArgv (jdk.incubator.foreign.Addressable CIdx, jdk.incubator.foreign.Addressable source_filename, jdk.incubator.foreign.Addressable command_line_args, int num_command_line_args, jdk.incubator.foreign.Addressable unsaved_files, int num_unsaved_files, int options, jdk.incubator.foreign.Addressable out_TU) {
         try {
-            return (int)clang_isDeclaration.invokeExact(x0);
+            return (int)Index_h$constants_0.clang_parseTranslationUnit2FullArgv$MH().invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options, out_TU.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_isInvalidDeclaration = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isInvalidDeclaration",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isInvalidDeclaration (MemorySegment x0) {
+    public static int CXSaveTranslationUnit_None() {
+        return Index_h$constants_0.CXSaveTranslationUnit_None();
+    }
+    public static MethodHandle clang_defaultSaveOptions$MH() {
+        return Index_h$constants_0.clang_defaultSaveOptions$MH();
+    }
+    public static int clang_defaultSaveOptions (jdk.incubator.foreign.Addressable TU) {
         try {
-            return (int)clang_isInvalidDeclaration.invokeExact(x0);
+            return (int)Index_h$constants_0.clang_defaultSaveOptions$MH().invokeExact(TU.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_isReference = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isReference",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isReference (int x0) {
-        try {
-            return (int)clang_isReference.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXSaveError_None() {
+        return Index_h$constants_0.CXSaveError_None();
     }
-    public static final MethodHandle clang_isExpression = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isExpression",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isExpression (int x0) {
-        try {
-            return (int)clang_isExpression.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXSaveError_Unknown() {
+        return Index_h$constants_0.CXSaveError_Unknown();
     }
-    public static final MethodHandle clang_isStatement = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isStatement",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isStatement (int x0) {
-        try {
-            return (int)clang_isStatement.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXSaveError_TranslationErrors() {
+        return Index_h$constants_0.CXSaveError_TranslationErrors();
     }
-    public static final MethodHandle clang_isAttribute = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isAttribute",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isAttribute (int x0) {
-        try {
-            return (int)clang_isAttribute.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXSaveError_InvalidTU() {
+        return Index_h$constants_0.CXSaveError_InvalidTU();
     }
-    public static final MethodHandle clang_Cursor_hasAttrs = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_hasAttrs",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_hasAttrs (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_hasAttrs.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_saveTranslationUnit$MH() {
+        return Index_h$constants_0.clang_saveTranslationUnit$MH();
     }
-    public static final MethodHandle clang_isInvalid = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isInvalid",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isInvalid (int x0) {
+    public static int clang_saveTranslationUnit (jdk.incubator.foreign.Addressable TU, jdk.incubator.foreign.Addressable FileName, int options) {
         try {
-            return (int)clang_isInvalid.invokeExact(x0);
+            return (int)Index_h$constants_0.clang_saveTranslationUnit$MH().invokeExact(TU.address(), FileName.address(), options);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_isTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isTranslationUnit",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isTranslationUnit (int x0) {
-        try {
-            return (int)clang_isTranslationUnit.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_suspendTranslationUnit$MH() {
+        return Index_h$constants_0.clang_suspendTranslationUnit$MH();
     }
-    public static final MethodHandle clang_isPreprocessing = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isPreprocessing",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isPreprocessing (int x0) {
+    public static int clang_suspendTranslationUnit (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_isPreprocessing.invokeExact(x0);
+            return (int)Index_h$constants_0.clang_suspendTranslationUnit$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_isUnexposed = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isUnexposed",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_isUnexposed (int x0) {
+    public static MethodHandle clang_disposeTranslationUnit$MH() {
+        return Index_h$constants_0.clang_disposeTranslationUnit$MH();
+    }
+    public static void clang_disposeTranslationUnit (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_isUnexposed.invokeExact(x0);
+            Index_h$constants_0.clang_disposeTranslationUnit$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXLinkage_Invalid = (int)0L;
-    public static final int CXLinkage_NoLinkage = (int)1L;
-    public static final int CXLinkage_Internal = (int)2L;
-    public static final int CXLinkage_UniqueExternal = (int)3L;
-    public static final int CXLinkage_External = (int)4L;
-    public static final MethodHandle clang_getCursorLinkage = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorLinkage",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCursorLinkage (MemorySegment cursor) {
-        try {
-            return (int)clang_getCursorLinkage.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXReparse_None() {
+        return Index_h$constants_0.CXReparse_None();
     }
-    public static final int CXVisibility_Invalid = (int)0L;
-    public static final int CXVisibility_Hidden = (int)1L;
-    public static final int CXVisibility_Protected = (int)2L;
-    public static final int CXVisibility_Default = (int)3L;
-    public static final MethodHandle clang_getCursorVisibility = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorVisibility",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCursorVisibility (MemorySegment cursor) {
-        try {
-            return (int)clang_getCursorVisibility.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursorAvailability = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorAvailability",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCursorAvailability (MemorySegment cursor) {
-        try {
-            return (int)clang_getCursorAvailability.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MemoryLayout CXPlatformAvailability$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("Platform"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("Major"),
-            CSupport.C_INT.withName("Minor"),
-            CSupport.C_INT.withName("Subminor")
-        ).withName("Introduced"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("Major"),
-            CSupport.C_INT.withName("Minor"),
-            CSupport.C_INT.withName("Subminor")
-        ).withName("Deprecated"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("Major"),
-            CSupport.C_INT.withName("Minor"),
-            CSupport.C_INT.withName("Subminor")
-        ).withName("Obsoleted"),
-        CSupport.C_INT.withName("Unavailable"),
-        MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("Message")
-    ).withName("CXPlatformAvailability");
-    public static final VarHandle CXPlatformAvailability$Unavailable = CXPlatformAvailability$LAYOUT.varHandle(int.class, PathElement.groupElement("Unavailable"));
-    public static final int CXPlatformAvailability$Unavailable$get(MemorySegment seg) {
-        return (int)CXPlatformAvailability$Unavailable.get(seg);
-    }
-    public static final void CXPlatformAvailability$Unavailable$set(MemorySegment seg, int x) {
-        CXPlatformAvailability$Unavailable.set(seg, x);
-    }
-    public static final MethodHandle clang_getCursorPlatformAvailability = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorPlatformAvailability",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_getCursorPlatformAvailability (MemorySegment cursor, MemoryAddress always_deprecated, MemoryAddress deprecated_message, MemoryAddress always_unavailable, MemoryAddress unavailable_message, MemoryAddress availability, int availability_size) {
-        try {
-            return (int)clang_getCursorPlatformAvailability.invokeExact(cursor, always_deprecated, deprecated_message, always_unavailable, unavailable_message, availability, availability_size);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_disposeCXPlatformAvailability = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeCXPlatformAvailability",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeCXPlatformAvailability (MemoryAddress availability) {
-        try {
-            clang_disposeCXPlatformAvailability.invokeExact(availability);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXLanguage_Invalid = (int)0L;
-    public static final int CXLanguage_C = (int)1L;
-    public static final int CXLanguage_ObjC = (int)2L;
-    public static final int CXLanguage_CPlusPlus = (int)3L;
-    public static final MethodHandle clang_getCursorLanguage = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorLanguage",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCursorLanguage (MemorySegment cursor) {
-        try {
-            return (int)clang_getCursorLanguage.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXTLS_None = (int)0L;
-    public static final int CXTLS_Dynamic = (int)1L;
-    public static final int CXTLS_Static = (int)2L;
-    public static final MethodHandle clang_getCursorTLSKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorTLSKind",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCursorTLSKind (MemorySegment cursor) {
-        try {
-            return (int)clang_getCursorTLSKind.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getTranslationUnit",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_Cursor_getTranslationUnit (MemorySegment x0) {
-        try {
-            return (MemoryAddress)clang_Cursor_getTranslationUnit.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_defaultReparseOptions$MH() {
+        return Index_h$constants_0.clang_defaultReparseOptions$MH();
     }
-    public static final MethodHandle clang_createCXCursorSet = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_createCXCursorSet",
-        "()Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER)
-    );
-    public static final MemoryAddress clang_createCXCursorSet () {
+    public static int clang_defaultReparseOptions (jdk.incubator.foreign.Addressable TU) {
         try {
-            return (MemoryAddress)clang_createCXCursorSet.invokeExact();
+            return (int)Index_h$constants_0.clang_defaultReparseOptions$MH().invokeExact(TU.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_disposeCXCursorSet = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeCXCursorSet",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeCXCursorSet (MemoryAddress cset) {
-        try {
-            clang_disposeCXCursorSet.invokeExact(cset);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_reparseTranslationUnit$MH() {
+        return Index_h$constants_0.clang_reparseTranslationUnit$MH();
     }
-    public static final MethodHandle clang_CXCursorSet_contains = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXCursorSet_contains",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXCursorSet_contains (MemoryAddress cset, MemorySegment cursor) {
+    public static int clang_reparseTranslationUnit (jdk.incubator.foreign.Addressable TU, int num_unsaved_files, jdk.incubator.foreign.Addressable unsaved_files, int options) {
         try {
-            return (int)clang_CXCursorSet_contains.invokeExact(cset, cursor);
+            return (int)Index_h$constants_0.clang_reparseTranslationUnit$MH().invokeExact(TU.address(), num_unsaved_files, unsaved_files.address(), options);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_CXCursorSet_insert = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXCursorSet_insert",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXCursorSet_insert (MemoryAddress cset, MemorySegment cursor) {
-        try {
-            return (int)clang_CXCursorSet_insert.invokeExact(cset, cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_AST() {
+        return Index_h$constants_0.CXTUResourceUsage_AST();
     }
-    public static final MethodHandle clang_getCursorSemanticParent = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorSemanticParent",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorSemanticParent (MemorySegment cursor) {
-        try {
-            return (MemorySegment)clang_getCursorSemanticParent.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_Identifiers() {
+        return Index_h$constants_0.CXTUResourceUsage_Identifiers();
     }
-    public static final MethodHandle clang_getCursorLexicalParent = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorLexicalParent",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorLexicalParent (MemorySegment cursor) {
-        try {
-            return (MemorySegment)clang_getCursorLexicalParent.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_Selectors() {
+        return Index_h$constants_0.CXTUResourceUsage_Selectors();
     }
-    public static final MethodHandle clang_getOverriddenCursors = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getOverriddenCursors",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getOverriddenCursors (MemorySegment cursor, MemoryAddress overridden, MemoryAddress num_overridden) {
-        try {
-            clang_getOverriddenCursors.invokeExact(cursor, overridden, num_overridden);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_GlobalCompletionResults() {
+        return Index_h$constants_0.CXTUResourceUsage_GlobalCompletionResults();
     }
-    public static final MethodHandle clang_disposeOverriddenCursors = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeOverriddenCursors",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeOverriddenCursors (MemoryAddress overridden) {
-        try {
-            clang_disposeOverriddenCursors.invokeExact(overridden);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getIncludedFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getIncludedFile",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_getIncludedFile (MemorySegment cursor) {
-        try {
-            return (MemoryAddress)clang_getIncludedFile.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursor",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursor (MemoryAddress x0, MemorySegment x1) {
-        try {
-            return (MemorySegment)clang_getCursor.invokeExact(x0, x1);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursorLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorLocation (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_getCursorLocation.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursorExtent = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorExtent",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorExtent (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_getCursorExtent.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXType_Invalid = (int)0L;
-    public static final int CXType_Unexposed = (int)1L;
-    public static final int CXType_Void = (int)2L;
-    public static final int CXType_Bool = (int)3L;
-    public static final int CXType_Char_U = (int)4L;
-    public static final int CXType_UChar = (int)5L;
-    public static final int CXType_Char16 = (int)6L;
-    public static final int CXType_Char32 = (int)7L;
-    public static final int CXType_UShort = (int)8L;
-    public static final int CXType_UInt = (int)9L;
-    public static final int CXType_ULong = (int)10L;
-    public static final int CXType_ULongLong = (int)11L;
-    public static final int CXType_UInt128 = (int)12L;
-    public static final int CXType_Char_S = (int)13L;
-    public static final int CXType_SChar = (int)14L;
-    public static final int CXType_WChar = (int)15L;
-    public static final int CXType_Short = (int)16L;
-    public static final int CXType_Int = (int)17L;
-    public static final int CXType_Long = (int)18L;
-    public static final int CXType_LongLong = (int)19L;
-    public static final int CXType_Int128 = (int)20L;
-    public static final int CXType_Float = (int)21L;
-    public static final int CXType_Double = (int)22L;
-    public static final int CXType_LongDouble = (int)23L;
-    public static final int CXType_NullPtr = (int)24L;
-    public static final int CXType_Overload = (int)25L;
-    public static final int CXType_Dependent = (int)26L;
-    public static final int CXType_ObjCId = (int)27L;
-    public static final int CXType_ObjCClass = (int)28L;
-    public static final int CXType_ObjCSel = (int)29L;
-    public static final int CXType_Float128 = (int)30L;
-    public static final int CXType_Half = (int)31L;
-    public static final int CXType_Float16 = (int)32L;
-    public static final int CXType_ShortAccum = (int)33L;
-    public static final int CXType_Accum = (int)34L;
-    public static final int CXType_LongAccum = (int)35L;
-    public static final int CXType_UShortAccum = (int)36L;
-    public static final int CXType_UAccum = (int)37L;
-    public static final int CXType_ULongAccum = (int)38L;
-    public static final int CXType_FirstBuiltin = (int)2L;
-    public static final int CXType_LastBuiltin = (int)38L;
-    public static final int CXType_Complex = (int)100L;
-    public static final int CXType_Pointer = (int)101L;
-    public static final int CXType_BlockPointer = (int)102L;
-    public static final int CXType_LValueReference = (int)103L;
-    public static final int CXType_RValueReference = (int)104L;
-    public static final int CXType_Record = (int)105L;
-    public static final int CXType_Enum = (int)106L;
-    public static final int CXType_Typedef = (int)107L;
-    public static final int CXType_ObjCInterface = (int)108L;
-    public static final int CXType_ObjCObjectPointer = (int)109L;
-    public static final int CXType_FunctionNoProto = (int)110L;
-    public static final int CXType_FunctionProto = (int)111L;
-    public static final int CXType_ConstantArray = (int)112L;
-    public static final int CXType_Vector = (int)113L;
-    public static final int CXType_IncompleteArray = (int)114L;
-    public static final int CXType_VariableArray = (int)115L;
-    public static final int CXType_DependentSizedArray = (int)116L;
-    public static final int CXType_MemberPointer = (int)117L;
-    public static final int CXType_Auto = (int)118L;
-    public static final int CXType_Elaborated = (int)119L;
-    public static final int CXType_Pipe = (int)120L;
-    public static final int CXType_OCLImage1dRO = (int)121L;
-    public static final int CXType_OCLImage1dArrayRO = (int)122L;
-    public static final int CXType_OCLImage1dBufferRO = (int)123L;
-    public static final int CXType_OCLImage2dRO = (int)124L;
-    public static final int CXType_OCLImage2dArrayRO = (int)125L;
-    public static final int CXType_OCLImage2dDepthRO = (int)126L;
-    public static final int CXType_OCLImage2dArrayDepthRO = (int)127L;
-    public static final int CXType_OCLImage2dMSAARO = (int)128L;
-    public static final int CXType_OCLImage2dArrayMSAARO = (int)129L;
-    public static final int CXType_OCLImage2dMSAADepthRO = (int)130L;
-    public static final int CXType_OCLImage2dArrayMSAADepthRO = (int)131L;
-    public static final int CXType_OCLImage3dRO = (int)132L;
-    public static final int CXType_OCLImage1dWO = (int)133L;
-    public static final int CXType_OCLImage1dArrayWO = (int)134L;
-    public static final int CXType_OCLImage1dBufferWO = (int)135L;
-    public static final int CXType_OCLImage2dWO = (int)136L;
-    public static final int CXType_OCLImage2dArrayWO = (int)137L;
-    public static final int CXType_OCLImage2dDepthWO = (int)138L;
-    public static final int CXType_OCLImage2dArrayDepthWO = (int)139L;
-    public static final int CXType_OCLImage2dMSAAWO = (int)140L;
-    public static final int CXType_OCLImage2dArrayMSAAWO = (int)141L;
-    public static final int CXType_OCLImage2dMSAADepthWO = (int)142L;
-    public static final int CXType_OCLImage2dArrayMSAADepthWO = (int)143L;
-    public static final int CXType_OCLImage3dWO = (int)144L;
-    public static final int CXType_OCLImage1dRW = (int)145L;
-    public static final int CXType_OCLImage1dArrayRW = (int)146L;
-    public static final int CXType_OCLImage1dBufferRW = (int)147L;
-    public static final int CXType_OCLImage2dRW = (int)148L;
-    public static final int CXType_OCLImage2dArrayRW = (int)149L;
-    public static final int CXType_OCLImage2dDepthRW = (int)150L;
-    public static final int CXType_OCLImage2dArrayDepthRW = (int)151L;
-    public static final int CXType_OCLImage2dMSAARW = (int)152L;
-    public static final int CXType_OCLImage2dArrayMSAARW = (int)153L;
-    public static final int CXType_OCLImage2dMSAADepthRW = (int)154L;
-    public static final int CXType_OCLImage2dArrayMSAADepthRW = (int)155L;
-    public static final int CXType_OCLImage3dRW = (int)156L;
-    public static final int CXType_OCLSampler = (int)157L;
-    public static final int CXType_OCLEvent = (int)158L;
-    public static final int CXType_OCLQueue = (int)159L;
-    public static final int CXType_OCLReserveID = (int)160L;
-    public static final int CXType_ObjCObject = (int)161L;
-    public static final int CXType_ObjCTypeParam = (int)162L;
-    public static final int CXType_Attributed = (int)163L;
-    public static final int CXType_OCLIntelSubgroupAVCMcePayload = (int)164L;
-    public static final int CXType_OCLIntelSubgroupAVCImePayload = (int)165L;
-    public static final int CXType_OCLIntelSubgroupAVCRefPayload = (int)166L;
-    public static final int CXType_OCLIntelSubgroupAVCSicPayload = (int)167L;
-    public static final int CXType_OCLIntelSubgroupAVCMceResult = (int)168L;
-    public static final int CXType_OCLIntelSubgroupAVCImeResult = (int)169L;
-    public static final int CXType_OCLIntelSubgroupAVCRefResult = (int)170L;
-    public static final int CXType_OCLIntelSubgroupAVCSicResult = (int)171L;
-    public static final int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = (int)172L;
-    public static final int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = (int)173L;
-    public static final int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = (int)174L;
-    public static final int CXType_OCLIntelSubgroupAVCImeDualRefStreamin = (int)175L;
-    public static final int CXType_ExtVector = (int)176L;
-    public static final int CXCallingConv_Default = (int)0L;
-    public static final int CXCallingConv_C = (int)1L;
-    public static final int CXCallingConv_X86StdCall = (int)2L;
-    public static final int CXCallingConv_X86FastCall = (int)3L;
-    public static final int CXCallingConv_X86ThisCall = (int)4L;
-    public static final int CXCallingConv_X86Pascal = (int)5L;
-    public static final int CXCallingConv_AAPCS = (int)6L;
-    public static final int CXCallingConv_AAPCS_VFP = (int)7L;
-    public static final int CXCallingConv_X86RegCall = (int)8L;
-    public static final int CXCallingConv_IntelOclBicc = (int)9L;
-    public static final int CXCallingConv_Win64 = (int)10L;
-    public static final int CXCallingConv_X86_64Win64 = (int)10L;
-    public static final int CXCallingConv_X86_64SysV = (int)11L;
-    public static final int CXCallingConv_X86VectorCall = (int)12L;
-    public static final int CXCallingConv_Swift = (int)13L;
-    public static final int CXCallingConv_PreserveMost = (int)14L;
-    public static final int CXCallingConv_PreserveAll = (int)15L;
-    public static final int CXCallingConv_AArch64VectorCall = (int)16L;
-    public static final int CXCallingConv_Invalid = (int)100L;
-    public static final int CXCallingConv_Unexposed = (int)200L;
-    public static final MemoryLayout CXType$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("kind"),
-        MemoryLayout.ofPaddingBits(32),
-        MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-    );
-    public static final VarHandle CXType$kind = CXType$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
-    public static final int CXType$kind$get(MemorySegment seg) {
-        return (int)CXType$kind.get(seg);
-    }
-    public static final void CXType$kind$set(MemorySegment seg, int x) {
-        CXType$kind.set(seg, x);
-    }
-    public static final MethodHandle clang_getCursorType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorType (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_getCursorType.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getTypeSpelling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTypeSpelling",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getTypeSpelling (MemorySegment CT) {
-        try {
-            return (MemorySegment)clang_getTypeSpelling.invokeExact(CT);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getTypedefDeclUnderlyingType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTypedefDeclUnderlyingType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getTypedefDeclUnderlyingType (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_getTypedefDeclUnderlyingType.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getEnumDeclIntegerType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getEnumDeclIntegerType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getEnumDeclIntegerType (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_getEnumDeclIntegerType.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getEnumConstantDeclValue = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getEnumConstantDeclValue",
-        "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final long clang_getEnumConstantDeclValue (MemorySegment C) {
-        try {
-            return (long)clang_getEnumConstantDeclValue.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getEnumConstantDeclUnsignedValue = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getEnumConstantDeclUnsignedValue",
-        "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final long clang_getEnumConstantDeclUnsignedValue (MemorySegment C) {
-        try {
-            return (long)clang_getEnumConstantDeclUnsignedValue.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getFieldDeclBitWidth = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFieldDeclBitWidth",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getFieldDeclBitWidth (MemorySegment C) {
-        try {
-            return (int)clang_getFieldDeclBitWidth.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getNumArguments = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getNumArguments",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_getNumArguments (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_getNumArguments.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_SourceManagerContentCache() {
+        return Index_h$constants_0.CXTUResourceUsage_SourceManagerContentCache();
     }
-    public static final MethodHandle clang_Cursor_getArgument = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getArgument",
-        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_Cursor_getArgument (MemorySegment C, int i) {
-        try {
-            return (MemorySegment)clang_Cursor_getArgument.invokeExact(C, i);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_AST_SideTables() {
+        return Index_h$constants_0.CXTUResourceUsage_AST_SideTables();
     }
-    public static final int CXTemplateArgumentKind_Null = (int)0L;
-    public static final int CXTemplateArgumentKind_Type = (int)1L;
-    public static final int CXTemplateArgumentKind_Declaration = (int)2L;
-    public static final int CXTemplateArgumentKind_NullPtr = (int)3L;
-    public static final int CXTemplateArgumentKind_Integral = (int)4L;
-    public static final int CXTemplateArgumentKind_Template = (int)5L;
-    public static final int CXTemplateArgumentKind_TemplateExpansion = (int)6L;
-    public static final int CXTemplateArgumentKind_Expression = (int)7L;
-    public static final int CXTemplateArgumentKind_Pack = (int)8L;
-    public static final int CXTemplateArgumentKind_Invalid = (int)9L;
-    public static final MethodHandle clang_Cursor_getNumTemplateArguments = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getNumTemplateArguments",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_getNumTemplateArguments (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_getNumTemplateArguments.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getTemplateArgumentKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getTemplateArgumentKind",
-        "(Ljdk/incubator/foreign/MemorySegment;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_Cursor_getTemplateArgumentKind (MemorySegment C, int I) {
-        try {
-            return (int)clang_Cursor_getTemplateArgumentKind.invokeExact(C, I);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getTemplateArgumentType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getTemplateArgumentType",
-        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_Cursor_getTemplateArgumentType (MemorySegment C, int I) {
-        try {
-            return (MemorySegment)clang_Cursor_getTemplateArgumentType.invokeExact(C, I);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getTemplateArgumentValue = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getTemplateArgumentValue",
-        "(Ljdk/incubator/foreign/MemorySegment;I)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final long clang_Cursor_getTemplateArgumentValue (MemorySegment C, int I) {
-        try {
-            return (long)clang_Cursor_getTemplateArgumentValue.invokeExact(C, I);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_SourceManager_Membuffer_Malloc() {
+        return Index_h$constants_0.CXTUResourceUsage_SourceManager_Membuffer_Malloc();
     }
-    public static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getTemplateArgumentUnsignedValue",
-        "(Ljdk/incubator/foreign/MemorySegment;I)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final long clang_Cursor_getTemplateArgumentUnsignedValue (MemorySegment C, int I) {
-        try {
-            return (long)clang_Cursor_getTemplateArgumentUnsignedValue.invokeExact(C, I);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_SourceManager_Membuffer_MMap() {
+        return Index_h$constants_0.CXTUResourceUsage_SourceManager_Membuffer_MMap();
     }
-    public static final MethodHandle clang_equalTypes = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_equalTypes",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_equalTypes (MemorySegment A, MemorySegment B) {
-        try {
-            return (int)clang_equalTypes.invokeExact(A, B);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc() {
+        return Index_h$constants_0.CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc();
     }
-    public static final MethodHandle clang_getCanonicalType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCanonicalType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCanonicalType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_getCanonicalType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap() {
+        return Index_h$constants_0.CXTUResourceUsage_ExternalASTSource_Membuffer_MMap();
     }
-    public static final MethodHandle clang_isConstQualifiedType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isConstQualifiedType",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isConstQualifiedType (MemorySegment T) {
-        try {
-            return (int)clang_isConstQualifiedType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_Preprocessor() {
+        return Index_h$constants_0.CXTUResourceUsage_Preprocessor();
     }
-    public static final MethodHandle clang_Cursor_isMacroFunctionLike = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isMacroFunctionLike",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isMacroFunctionLike (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isMacroFunctionLike.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_PreprocessingRecord() {
+        return Index_h$constants_0.CXTUResourceUsage_PreprocessingRecord();
     }
-    public static final MethodHandle clang_Cursor_isMacroBuiltin = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isMacroBuiltin",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isMacroBuiltin (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isMacroBuiltin.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_SourceManager_DataStructures() {
+        return Index_h$constants_0.CXTUResourceUsage_SourceManager_DataStructures();
     }
-    public static final MethodHandle clang_Cursor_isFunctionInlined = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isFunctionInlined",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isFunctionInlined (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isFunctionInlined.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_Preprocessor_HeaderSearch() {
+        return Index_h$constants_0.CXTUResourceUsage_Preprocessor_HeaderSearch();
     }
-    public static final MethodHandle clang_isVolatileQualifiedType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isVolatileQualifiedType",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isVolatileQualifiedType (MemorySegment T) {
-        try {
-            return (int)clang_isVolatileQualifiedType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN() {
+        return Index_h$constants_0.CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN();
     }
-    public static final MethodHandle clang_isRestrictQualifiedType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isRestrictQualifiedType",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isRestrictQualifiedType (MemorySegment T) {
-        try {
-            return (int)clang_isRestrictQualifiedType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_MEMORY_IN_BYTES_END() {
+        return Index_h$constants_0.CXTUResourceUsage_MEMORY_IN_BYTES_END();
     }
-    public static final MethodHandle clang_getAddressSpace = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getAddressSpace",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getAddressSpace (MemorySegment T) {
-        try {
-            return (int)clang_getAddressSpace.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_First() {
+        return Index_h$constants_0.CXTUResourceUsage_First();
     }
-    public static final MethodHandle clang_getTypedefName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTypedefName",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getTypedefName (MemorySegment CT) {
-        try {
-            return (MemorySegment)clang_getTypedefName.invokeExact(CT);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXTUResourceUsage_Last() {
+        return Index_h$constants_0.CXTUResourceUsage_Last();
     }
-    public static final MethodHandle clang_getPointeeType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getPointeeType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getPointeeType (MemorySegment T) {
+    public static MethodHandle clang_getTUResourceUsageName$MH() {
+        return Index_h$constants_0.clang_getTUResourceUsageName$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getTUResourceUsageName (int kind) {
         try {
-            return (MemorySegment)clang_getPointeeType.invokeExact(T);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getTUResourceUsageName$MH().invokeExact(kind);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getTypeDeclaration = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTypeDeclaration",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getTypeDeclaration (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_getTypeDeclaration.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getDeclObjCTypeEncoding = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDeclObjCTypeEncoding",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getDeclObjCTypeEncoding (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_getDeclObjCTypeEncoding.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+    public static class CXTUResourceUsageEntry {
+
+        private CXTUResourceUsageEntry() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXTUResourceUsageEntry$struct$LAYOUT();
         }
-    }
-    public static final MethodHandle clang_Type_getObjCEncoding = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getObjCEncoding",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Type_getObjCEncoding (MemorySegment type) {
-        try {
-            return (MemorySegment)clang_Type_getObjCEncoding.invokeExact(type);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle kind$VH() {
+            return Index_h$constants_0.kind$VH();
         }
-    }
-    public static final MethodHandle clang_getTypeKindSpelling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTypeKindSpelling",
-        "(I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getTypeKindSpelling (int K) {
-        try {
-            return (MemorySegment)clang_getTypeKindSpelling.invokeExact(K);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static int kind$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.kind$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_getFunctionTypeCallingConv = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getFunctionTypeCallingConv",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getFunctionTypeCallingConv (MemorySegment T) {
-        try {
-            return (int)clang_getFunctionTypeCallingConv.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getResultType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getResultType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getResultType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_getResultType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static int kind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.kind$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_getExceptionSpecificationType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getExceptionSpecificationType",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getExceptionSpecificationType (MemorySegment T) {
-        try {
-            return (int)clang_getExceptionSpecificationType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void kind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.kind$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_getNumArgTypes = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNumArgTypes",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getNumArgTypes (MemorySegment T) {
-        try {
-            return (int)clang_getNumArgTypes.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void kind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.kind$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_getArgType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getArgType",
-        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getArgType (MemorySegment T, int i) {
-        try {
-            return (MemorySegment)clang_getArgType.invokeExact(T, i);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Type_getObjCObjectBaseType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getObjCObjectBaseType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Type_getObjCObjectBaseType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_Type_getObjCObjectBaseType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Type_getNumObjCProtocolRefs = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getNumObjCProtocolRefs",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Type_getNumObjCProtocolRefs (MemorySegment T) {
-        try {
-            return (int)clang_Type_getNumObjCProtocolRefs.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Type_getObjCProtocolDecl = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getObjCProtocolDecl",
-        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_Type_getObjCProtocolDecl (MemorySegment T, int i) {
-        try {
-            return (MemorySegment)clang_Type_getObjCProtocolDecl.invokeExact(T, i);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle amount$VH() {
+            return Index_h$constants_0.amount$VH();
         }
-    }
-    public static final MethodHandle clang_Type_getNumObjCTypeArgs = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getNumObjCTypeArgs",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Type_getNumObjCTypeArgs (MemorySegment T) {
-        try {
-            return (int)clang_Type_getNumObjCTypeArgs.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static long amount$get(MemorySegment seg) {
+            return (long)Index_h$constants_0.amount$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_Type_getObjCTypeArg = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getObjCTypeArg",
-        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_Type_getObjCTypeArg (MemorySegment T, int i) {
-        try {
-            return (MemorySegment)clang_Type_getObjCTypeArg.invokeExact(T, i);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static long amount$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (long)Index_h$constants_0.amount$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_isFunctionTypeVariadic = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isFunctionTypeVariadic",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isFunctionTypeVariadic (MemorySegment T) {
-        try {
-            return (int)clang_isFunctionTypeVariadic.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void amount$set(jdk.incubator.foreign.MemorySegment seg, long x) {
+            Index_h$constants_0.amount$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_getCursorResultType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorResultType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorResultType (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_getCursorResultType.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void amount$set(jdk.incubator.foreign.MemorySegment addr, long index, long x) {
+            Index_h$constants_0.amount$VH().set(addr.asSlice(index*sizeof()), x);
         }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
     }
-    public static final MethodHandle clang_getCursorExceptionSpecificationType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorExceptionSpecificationType",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCursorExceptionSpecificationType (MemorySegment C) {
-        try {
-            return (int)clang_getCursorExceptionSpecificationType.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+
+    public static class CXTUResourceUsage {
+
+        private CXTUResourceUsage() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXTUResourceUsage$struct$LAYOUT();
         }
-    }
-    public static final MethodHandle clang_isPODType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isPODType",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isPODType (MemorySegment T) {
-        try {
-            return (int)clang_isPODType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle data$VH() {
+            return Index_h$constants_0.data$VH();
         }
-    }
-    public static final MethodHandle clang_getElementType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getElementType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getElementType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_getElementType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress data$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.data$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_getNumElements = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNumElements",
-        "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final long clang_getNumElements (MemorySegment T) {
-        try {
-            return (long)clang_getNumElements.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress data$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.data$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_getArrayElementType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getArrayElementType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getArrayElementType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_getArrayElementType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void data$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.data$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_getArraySize = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getArraySize",
-        "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final long clang_getArraySize (MemorySegment T) {
-        try {
-            return (long)clang_getArraySize.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Type_getNamedType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getNamedType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Type_getNamedType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_Type_getNamedType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Type_isTransparentTagTypedef = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_isTransparentTagTypedef",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Type_isTransparentTagTypedef (MemorySegment T) {
-        try {
-            return (int)clang_Type_isTransparentTagTypedef.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXTypeNullability_NonNull = (int)0L;
-    public static final int CXTypeNullability_Nullable = (int)1L;
-    public static final int CXTypeNullability_Unspecified = (int)2L;
-    public static final int CXTypeNullability_Invalid = (int)3L;
-    public static final MethodHandle clang_Type_getNullability = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getNullability",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Type_getNullability (MemorySegment T) {
-        try {
-            return (int)clang_Type_getNullability.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXTypeLayoutError_Invalid = (int)-1L;
-    public static final int CXTypeLayoutError_Incomplete = (int)-2L;
-    public static final int CXTypeLayoutError_Dependent = (int)-3L;
-    public static final int CXTypeLayoutError_NotConstantSize = (int)-4L;
-    public static final int CXTypeLayoutError_InvalidFieldName = (int)-5L;
-    public static final int CXTypeLayoutError_Undeduced = (int)-6L;
-    public static final MethodHandle clang_Type_getAlignOf = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getAlignOf",
-        "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final long clang_Type_getAlignOf (MemorySegment T) {
-        try {
-            return (long)clang_Type_getAlignOf.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void data$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.data$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_Type_getClassType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getClassType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Type_getClassType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_Type_getClassType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle numEntries$VH() {
+            return Index_h$constants_0.numEntries$VH();
         }
-    }
-    public static final MethodHandle clang_Type_getSizeOf = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getSizeOf",
-        "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final long clang_Type_getSizeOf (MemorySegment T) {
-        try {
-            return (long)clang_Type_getSizeOf.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static int numEntries$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.numEntries$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_Type_getOffsetOf = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getOffsetOf",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final long clang_Type_getOffsetOf (MemorySegment T, MemoryAddress S) {
-        try {
-            return (long)clang_Type_getOffsetOf.invokeExact(T, S);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static int numEntries$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.numEntries$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_Type_getModifiedType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getModifiedType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Type_getModifiedType (MemorySegment T) {
-        try {
-            return (MemorySegment)clang_Type_getModifiedType.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void numEntries$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.numEntries$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_Cursor_getOffsetOfField = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getOffsetOfField",
-        "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final long clang_Cursor_getOffsetOfField (MemorySegment C) {
-        try {
-            return (long)clang_Cursor_getOffsetOfField.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void numEntries$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.numEntries$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_Cursor_isAnonymous = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isAnonymous",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isAnonymous (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isAnonymous.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle entries$VH() {
+            return Index_h$constants_0.entries$VH();
         }
-    }
-    public static final MethodHandle clang_Cursor_isAnonymousRecordDecl = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isAnonymousRecordDecl",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isAnonymousRecordDecl (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isAnonymousRecordDecl.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress entries$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.entries$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_Cursor_isInlineNamespace = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isInlineNamespace",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isInlineNamespace (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isInlineNamespace.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress entries$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.entries$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final int CXRefQualifier_None = (int)0L;
-    public static final int CXRefQualifier_LValue = (int)1L;
-    public static final int CXRefQualifier_RValue = (int)2L;
-    public static final MethodHandle clang_Type_getNumTemplateArguments = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getNumTemplateArguments",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Type_getNumTemplateArguments (MemorySegment T) {
-        try {
-            return (int)clang_Type_getNumTemplateArguments.invokeExact(T);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void entries$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.entries$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_Type_getTemplateArgumentAsType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getTemplateArgumentAsType",
-        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_Type_getTemplateArgumentAsType (MemorySegment T, int i) {
-        try {
-            return (MemorySegment)clang_Type_getTemplateArgumentAsType.invokeExact(T, i);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void entries$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_0.entries$VH().set(addr.asSlice(index*sizeof()), x);
         }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getCXTUResourceUsage$MH() {
+        return Index_h$constants_0.clang_getCXTUResourceUsage$MH();
     }
-    public static final MethodHandle clang_Type_getCXXRefQualifier = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_getCXXRefQualifier",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Type_getCXXRefQualifier (MemorySegment T) {
+    public static jdk.incubator.foreign.MemorySegment clang_getCXTUResourceUsage (jdk.incubator.foreign.Addressable TU) {
         try {
-            return (int)clang_Type_getCXXRefQualifier.invokeExact(T);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCXTUResourceUsage$MH().invokeExact(TU.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_Cursor_isBitField = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isBitField",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isBitField (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isBitField.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_isVirtualBase = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isVirtualBase",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isVirtualBase (MemorySegment x0) {
-        try {
-            return (int)clang_isVirtualBase.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CX_CXXInvalidAccessSpecifier = (int)0L;
-    public static final int CX_CXXPublic = (int)1L;
-    public static final int CX_CXXProtected = (int)2L;
-    public static final int CX_CXXPrivate = (int)3L;
-    public static final MethodHandle clang_getCXXAccessSpecifier = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCXXAccessSpecifier",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getCXXAccessSpecifier (MemorySegment x0) {
-        try {
-            return (int)clang_getCXXAccessSpecifier.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CX_SC_Invalid = (int)0L;
-    public static final int CX_SC_None = (int)1L;
-    public static final int CX_SC_Extern = (int)2L;
-    public static final int CX_SC_Static = (int)3L;
-    public static final int CX_SC_PrivateExtern = (int)4L;
-    public static final int CX_SC_OpenCLWorkGroupLocal = (int)5L;
-    public static final int CX_SC_Auto = (int)6L;
-    public static final int CX_SC_Register = (int)7L;
-    public static final MethodHandle clang_Cursor_getStorageClass = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getStorageClass",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_getStorageClass (MemorySegment x0) {
-        try {
-            return (int)clang_Cursor_getStorageClass.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getNumOverloadedDecls = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNumOverloadedDecls",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getNumOverloadedDecls (MemorySegment cursor) {
-        try {
-            return (int)clang_getNumOverloadedDecls.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getOverloadedDecl = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getOverloadedDecl",
-        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getOverloadedDecl (MemorySegment cursor, int index) {
-        try {
-            return (MemorySegment)clang_getOverloadedDecl.invokeExact(cursor, index);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getIBOutletCollectionType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getIBOutletCollectionType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getIBOutletCollectionType (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_getIBOutletCollectionType.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXChildVisit_Break = (int)0L;
-    public static final int CXChildVisit_Continue = (int)1L;
-    public static final int CXChildVisit_Recurse = (int)2L;
-    public static final MethodHandle clang_visitChildren = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_visitChildren",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_visitChildren (MemorySegment parent, MemoryAddress visitor, MemoryAddress client_data) {
-        try {
-            return (int)clang_visitChildren.invokeExact(parent, visitor, client_data);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    private static final FunctionDescriptor clang_visitChildren$visitor$DESC = FunctionDescriptor.of(CSupport.C_INT,
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-        CSupport.C_POINTER
-    );
-    public interface clang_visitChildren$visitor {
-        int apply(MemorySegment x0, MemorySegment x1, MemoryAddress x2);
-    }
-    public static final MemoryAddress clang_visitChildren$visitor$allocate(clang_visitChildren$visitor fi) {
-        return RuntimeHelper.upcallStub(clang_visitChildren$visitor.class, fi, clang_visitChildren$visitor$DESC, "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
+    public static MethodHandle clang_disposeCXTUResourceUsage$MH() {
+        return Index_h$constants_0.clang_disposeCXTUResourceUsage$MH();
     }
-    public static final MethodHandle clang_getCursorUSR = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorUSR",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorUSR (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_getCursorUSR.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_constructUSR_ObjCClass = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_constructUSR_ObjCClass",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_constructUSR_ObjCClass (MemoryAddress class_name) {
-        try {
-            return (MemorySegment)clang_constructUSR_ObjCClass.invokeExact(class_name);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_constructUSR_ObjCCategory = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_constructUSR_ObjCCategory",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_constructUSR_ObjCCategory (MemoryAddress class_name, MemoryAddress category_name) {
-        try {
-            return (MemorySegment)clang_constructUSR_ObjCCategory.invokeExact(class_name, category_name);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_constructUSR_ObjCProtocol = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_constructUSR_ObjCProtocol",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_constructUSR_ObjCProtocol (MemoryAddress protocol_name) {
-        try {
-            return (MemorySegment)clang_constructUSR_ObjCProtocol.invokeExact(protocol_name);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_constructUSR_ObjCIvar = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_constructUSR_ObjCIvar",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("data"),
-                CSupport.C_INT.withName("private_flags"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemorySegment clang_constructUSR_ObjCIvar (MemoryAddress name, MemorySegment classUSR) {
-        try {
-            return (MemorySegment)clang_constructUSR_ObjCIvar.invokeExact(name, classUSR);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_constructUSR_ObjCMethod = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_constructUSR_ObjCMethod",
-        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("data"),
-                CSupport.C_INT.withName("private_flags"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemorySegment clang_constructUSR_ObjCMethod (MemoryAddress name, int isInstanceMethod, MemorySegment classUSR) {
-        try {
-            return (MemorySegment)clang_constructUSR_ObjCMethod.invokeExact(name, isInstanceMethod, classUSR);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_constructUSR_ObjCProperty = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_constructUSR_ObjCProperty",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("data"),
-                CSupport.C_INT.withName("private_flags"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemorySegment clang_constructUSR_ObjCProperty (MemoryAddress property, MemorySegment classUSR) {
-        try {
-            return (MemorySegment)clang_constructUSR_ObjCProperty.invokeExact(property, classUSR);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursorSpelling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorSpelling",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorSpelling (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_getCursorSpelling.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getSpellingNameRange = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getSpellingNameRange",
-        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_Cursor_getSpellingNameRange (MemorySegment x0, int pieceIndex, int options) {
-        try {
-            return (MemorySegment)clang_Cursor_getSpellingNameRange.invokeExact(x0, pieceIndex, options);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXPrintingPolicy_Indentation = (int)0L;
-    public static final int CXPrintingPolicy_SuppressSpecifiers = (int)1L;
-    public static final int CXPrintingPolicy_SuppressTagKeyword = (int)2L;
-    public static final int CXPrintingPolicy_IncludeTagDefinition = (int)3L;
-    public static final int CXPrintingPolicy_SuppressScope = (int)4L;
-    public static final int CXPrintingPolicy_SuppressUnwrittenScope = (int)5L;
-    public static final int CXPrintingPolicy_SuppressInitializers = (int)6L;
-    public static final int CXPrintingPolicy_ConstantArraySizeAsWritten = (int)7L;
-    public static final int CXPrintingPolicy_AnonymousTagLocations = (int)8L;
-    public static final int CXPrintingPolicy_SuppressStrongLifetime = (int)9L;
-    public static final int CXPrintingPolicy_SuppressLifetimeQualifiers = (int)10L;
-    public static final int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = (int)11L;
-    public static final int CXPrintingPolicy_Bool = (int)12L;
-    public static final int CXPrintingPolicy_Restrict = (int)13L;
-    public static final int CXPrintingPolicy_Alignof = (int)14L;
-    public static final int CXPrintingPolicy_UnderscoreAlignof = (int)15L;
-    public static final int CXPrintingPolicy_UseVoidForZeroParams = (int)16L;
-    public static final int CXPrintingPolicy_TerseOutput = (int)17L;
-    public static final int CXPrintingPolicy_PolishForDeclaration = (int)18L;
-    public static final int CXPrintingPolicy_Half = (int)19L;
-    public static final int CXPrintingPolicy_MSWChar = (int)20L;
-    public static final int CXPrintingPolicy_IncludeNewlines = (int)21L;
-    public static final int CXPrintingPolicy_MSVCFormatting = (int)22L;
-    public static final int CXPrintingPolicy_ConstantsAsWritten = (int)23L;
-    public static final int CXPrintingPolicy_SuppressImplicitBase = (int)24L;
-    public static final int CXPrintingPolicy_FullyQualifiedName = (int)25L;
-    public static final int CXPrintingPolicy_LastProperty = (int)25L;
-    public static final MethodHandle clang_PrintingPolicy_getProperty = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_PrintingPolicy_getProperty",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_PrintingPolicy_getProperty (MemoryAddress Policy, int Property) {
-        try {
-            return (int)clang_PrintingPolicy_getProperty.invokeExact(Policy, Property);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_PrintingPolicy_setProperty = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_PrintingPolicy_setProperty",
-        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final void clang_PrintingPolicy_setProperty (MemoryAddress Policy, int Property, int Value) {
-        try {
-            clang_PrintingPolicy_setProperty.invokeExact(Policy, Property, Value);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursorPrintingPolicy = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorPrintingPolicy",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_getCursorPrintingPolicy (MemorySegment x0) {
-        try {
-            return (MemoryAddress)clang_getCursorPrintingPolicy.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_PrintingPolicy_dispose = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_PrintingPolicy_dispose",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_PrintingPolicy_dispose (MemoryAddress Policy) {
-        try {
-            clang_PrintingPolicy_dispose.invokeExact(Policy);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursorPrettyPrinted = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorPrettyPrinted",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getCursorPrettyPrinted (MemorySegment Cursor, MemoryAddress Policy) {
-        try {
-            return (MemorySegment)clang_getCursorPrettyPrinted.invokeExact(Cursor, Policy);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCursorDisplayName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorDisplayName",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorDisplayName (MemorySegment x0) {
+    public static void clang_disposeCXTUResourceUsage (jdk.incubator.foreign.MemorySegment usage) {
         try {
-            return (MemorySegment)clang_getCursorDisplayName.invokeExact(x0);
+            Index_h$constants_0.clang_disposeCXTUResourceUsage$MH().invokeExact(usage);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getCursorReferenced = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorReferenced",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorReferenced (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_getCursorReferenced.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_getTranslationUnitTargetInfo$MH() {
+        return Index_h$constants_0.clang_getTranslationUnitTargetInfo$MH();
     }
-    public static final MethodHandle clang_getCursorDefinition = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorDefinition",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCursorDefinition (MemorySegment x0) {
+    public static jdk.incubator.foreign.MemoryAddress clang_getTranslationUnitTargetInfo (jdk.incubator.foreign.Addressable CTUnit) {
         try {
-            return (MemorySegment)clang_getCursorDefinition.invokeExact(x0);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getTranslationUnitTargetInfo$MH().invokeExact(CTUnit.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_isCursorDefinition = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_isCursorDefinition",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_isCursorDefinition (MemorySegment x0) {
-        try {
-            return (int)clang_isCursorDefinition.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCanonicalCursor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCanonicalCursor",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getCanonicalCursor (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_getCanonicalCursor.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getObjCSelectorIndex = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getObjCSelectorIndex",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_getObjCSelectorIndex (MemorySegment x0) {
-        try {
-            return (int)clang_Cursor_getObjCSelectorIndex.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_isDynamicCall = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isDynamicCall",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isDynamicCall (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isDynamicCall.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getReceiverType = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getReceiverType",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Cursor_getReceiverType (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_Cursor_getReceiverType.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXObjCPropertyAttr_noattr = (int)0L;
-    public static final int CXObjCPropertyAttr_readonly = (int)1L;
-    public static final int CXObjCPropertyAttr_getter = (int)2L;
-    public static final int CXObjCPropertyAttr_assign = (int)4L;
-    public static final int CXObjCPropertyAttr_readwrite = (int)8L;
-    public static final int CXObjCPropertyAttr_retain = (int)16L;
-    public static final int CXObjCPropertyAttr_copy = (int)32L;
-    public static final int CXObjCPropertyAttr_nonatomic = (int)64L;
-    public static final int CXObjCPropertyAttr_setter = (int)128L;
-    public static final int CXObjCPropertyAttr_atomic = (int)256L;
-    public static final int CXObjCPropertyAttr_weak = (int)512L;
-    public static final int CXObjCPropertyAttr_strong = (int)1024L;
-    public static final int CXObjCPropertyAttr_unsafe_unretained = (int)2048L;
-    public static final int CXObjCPropertyAttr_class = (int)4096L;
-    public static final MethodHandle clang_Cursor_getObjCPropertyAttributes = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getObjCPropertyAttributes",
-        "(Ljdk/incubator/foreign/MemorySegment;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_Cursor_getObjCPropertyAttributes (MemorySegment C, int reserved) {
-        try {
-            return (int)clang_Cursor_getObjCPropertyAttributes.invokeExact(C, reserved);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getObjCPropertyGetterName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getObjCPropertyGetterName",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Cursor_getObjCPropertyGetterName (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_Cursor_getObjCPropertyGetterName.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getObjCPropertySetterName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getObjCPropertySetterName",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Cursor_getObjCPropertySetterName (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_Cursor_getObjCPropertySetterName.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXObjCDeclQualifier_None = (int)0L;
-    public static final int CXObjCDeclQualifier_In = (int)1L;
-    public static final int CXObjCDeclQualifier_Inout = (int)2L;
-    public static final int CXObjCDeclQualifier_Out = (int)4L;
-    public static final int CXObjCDeclQualifier_Bycopy = (int)8L;
-    public static final int CXObjCDeclQualifier_Byref = (int)16L;
-    public static final int CXObjCDeclQualifier_Oneway = (int)32L;
-    public static final MethodHandle clang_Cursor_getObjCDeclQualifiers = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getObjCDeclQualifiers",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_getObjCDeclQualifiers (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_getObjCDeclQualifiers.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_isObjCOptional = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isObjCOptional",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isObjCOptional (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isObjCOptional.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_isVariadic = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isVariadic",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_Cursor_isVariadic (MemorySegment C) {
-        try {
-            return (int)clang_Cursor_isVariadic.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_isExternalSymbol = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_isExternalSymbol",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_Cursor_isExternalSymbol (MemorySegment C, MemoryAddress language, MemoryAddress definedIn, MemoryAddress isGenerated) {
-        try {
-            return (int)clang_Cursor_isExternalSymbol.invokeExact(C, language, definedIn, isGenerated);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getCommentRange = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getCommentRange",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Cursor_getCommentRange (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_Cursor_getCommentRange.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Cursor_getRawCommentText = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getRawCommentText",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Cursor_getRawCommentText (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_Cursor_getRawCommentText.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_TargetInfo_dispose$MH() {
+        return Index_h$constants_0.clang_TargetInfo_dispose$MH();
     }
-    public static final MethodHandle clang_Cursor_getBriefCommentText = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getBriefCommentText",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Cursor_getBriefCommentText (MemorySegment C) {
+    public static void clang_TargetInfo_dispose (jdk.incubator.foreign.Addressable Info) {
         try {
-            return (MemorySegment)clang_Cursor_getBriefCommentText.invokeExact(C);
+            Index_h$constants_0.clang_TargetInfo_dispose$MH().invokeExact(Info.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_Cursor_getMangling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getMangling",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_Cursor_getMangling (MemorySegment x0) {
-        try {
-            return (MemorySegment)clang_Cursor_getMangling.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_TargetInfo_getTriple$MH() {
+        return Index_h$constants_0.clang_TargetInfo_getTriple$MH();
     }
-    public static final MethodHandle clang_Cursor_getCXXManglings = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getCXXManglings",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_Cursor_getCXXManglings (MemorySegment x0) {
+    public static jdk.incubator.foreign.MemorySegment clang_TargetInfo_getTriple (jdk.incubator.foreign.Addressable Info) {
         try {
-            return (MemoryAddress)clang_Cursor_getCXXManglings.invokeExact(x0);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_TargetInfo_getTriple$MH().invokeExact(Info.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_Cursor_getObjCManglings = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getObjCManglings",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_Cursor_getObjCManglings (MemorySegment x0) {
-        try {
-            return (MemoryAddress)clang_Cursor_getObjCManglings.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_TargetInfo_getPointerWidth$MH() {
+        return Index_h$constants_0.clang_TargetInfo_getPointerWidth$MH();
     }
-    public static final MethodHandle clang_Cursor_getModule = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_getModule",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_Cursor_getModule (MemorySegment C) {
+    public static int clang_TargetInfo_getPointerWidth (jdk.incubator.foreign.Addressable Info) {
         try {
-            return (MemoryAddress)clang_Cursor_getModule.invokeExact(C);
+            return (int)Index_h$constants_0.clang_TargetInfo_getPointerWidth$MH().invokeExact(Info.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getModuleForFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getModuleForFile",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getModuleForFile (MemoryAddress x0, MemoryAddress x1) {
-        try {
-            return (MemoryAddress)clang_getModuleForFile.invokeExact(x0, x1);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXCursor_UnexposedDecl() {
+        return Index_h$constants_0.CXCursor_UnexposedDecl();
     }
-    public static final MethodHandle clang_Module_getASTFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Module_getASTFile",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_Module_getASTFile (MemoryAddress Module) {
-        try {
-            return (MemoryAddress)clang_Module_getASTFile.invokeExact(Module);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+    public static int CXCursor_StructDecl() {
+        return Index_h$constants_0.CXCursor_StructDecl();
+    }
+    public static int CXCursor_UnionDecl() {
+        return Index_h$constants_0.CXCursor_UnionDecl();
+    }
+    public static int CXCursor_ClassDecl() {
+        return Index_h$constants_0.CXCursor_ClassDecl();
+    }
+    public static int CXCursor_EnumDecl() {
+        return Index_h$constants_0.CXCursor_EnumDecl();
+    }
+    public static int CXCursor_FieldDecl() {
+        return Index_h$constants_0.CXCursor_FieldDecl();
+    }
+    public static int CXCursor_EnumConstantDecl() {
+        return Index_h$constants_0.CXCursor_EnumConstantDecl();
+    }
+    public static int CXCursor_FunctionDecl() {
+        return Index_h$constants_0.CXCursor_FunctionDecl();
+    }
+    public static int CXCursor_VarDecl() {
+        return Index_h$constants_0.CXCursor_VarDecl();
+    }
+    public static int CXCursor_ParmDecl() {
+        return Index_h$constants_0.CXCursor_ParmDecl();
+    }
+    public static int CXCursor_ObjCInterfaceDecl() {
+        return Index_h$constants_0.CXCursor_ObjCInterfaceDecl();
+    }
+    public static int CXCursor_ObjCCategoryDecl() {
+        return Index_h$constants_0.CXCursor_ObjCCategoryDecl();
+    }
+    public static int CXCursor_ObjCProtocolDecl() {
+        return Index_h$constants_0.CXCursor_ObjCProtocolDecl();
+    }
+    public static int CXCursor_ObjCPropertyDecl() {
+        return Index_h$constants_0.CXCursor_ObjCPropertyDecl();
+    }
+    public static int CXCursor_ObjCIvarDecl() {
+        return Index_h$constants_0.CXCursor_ObjCIvarDecl();
+    }
+    public static int CXCursor_ObjCInstanceMethodDecl() {
+        return Index_h$constants_0.CXCursor_ObjCInstanceMethodDecl();
+    }
+    public static int CXCursor_ObjCClassMethodDecl() {
+        return Index_h$constants_0.CXCursor_ObjCClassMethodDecl();
+    }
+    public static int CXCursor_ObjCImplementationDecl() {
+        return Index_h$constants_0.CXCursor_ObjCImplementationDecl();
+    }
+    public static int CXCursor_ObjCCategoryImplDecl() {
+        return Index_h$constants_0.CXCursor_ObjCCategoryImplDecl();
+    }
+    public static int CXCursor_TypedefDecl() {
+        return Index_h$constants_0.CXCursor_TypedefDecl();
+    }
+    public static int CXCursor_CXXMethod() {
+        return Index_h$constants_0.CXCursor_CXXMethod();
+    }
+    public static int CXCursor_Namespace() {
+        return Index_h$constants_0.CXCursor_Namespace();
+    }
+    public static int CXCursor_LinkageSpec() {
+        return Index_h$constants_0.CXCursor_LinkageSpec();
+    }
+    public static int CXCursor_Constructor() {
+        return Index_h$constants_0.CXCursor_Constructor();
+    }
+    public static int CXCursor_Destructor() {
+        return Index_h$constants_0.CXCursor_Destructor();
+    }
+    public static int CXCursor_ConversionFunction() {
+        return Index_h$constants_0.CXCursor_ConversionFunction();
+    }
+    public static int CXCursor_TemplateTypeParameter() {
+        return Index_h$constants_0.CXCursor_TemplateTypeParameter();
+    }
+    public static int CXCursor_NonTypeTemplateParameter() {
+        return Index_h$constants_0.CXCursor_NonTypeTemplateParameter();
+    }
+    public static int CXCursor_TemplateTemplateParameter() {
+        return Index_h$constants_0.CXCursor_TemplateTemplateParameter();
+    }
+    public static int CXCursor_FunctionTemplate() {
+        return Index_h$constants_0.CXCursor_FunctionTemplate();
+    }
+    public static int CXCursor_ClassTemplate() {
+        return Index_h$constants_0.CXCursor_ClassTemplate();
+    }
+    public static int CXCursor_ClassTemplatePartialSpecialization() {
+        return Index_h$constants_0.CXCursor_ClassTemplatePartialSpecialization();
+    }
+    public static int CXCursor_NamespaceAlias() {
+        return Index_h$constants_0.CXCursor_NamespaceAlias();
+    }
+    public static int CXCursor_UsingDirective() {
+        return Index_h$constants_0.CXCursor_UsingDirective();
+    }
+    public static int CXCursor_UsingDeclaration() {
+        return Index_h$constants_0.CXCursor_UsingDeclaration();
+    }
+    public static int CXCursor_TypeAliasDecl() {
+        return Index_h$constants_0.CXCursor_TypeAliasDecl();
+    }
+    public static int CXCursor_ObjCSynthesizeDecl() {
+        return Index_h$constants_0.CXCursor_ObjCSynthesizeDecl();
+    }
+    public static int CXCursor_ObjCDynamicDecl() {
+        return Index_h$constants_0.CXCursor_ObjCDynamicDecl();
+    }
+    public static int CXCursor_CXXAccessSpecifier() {
+        return Index_h$constants_0.CXCursor_CXXAccessSpecifier();
+    }
+    public static int CXCursor_FirstDecl() {
+        return Index_h$constants_0.CXCursor_FirstDecl();
+    }
+    public static int CXCursor_LastDecl() {
+        return Index_h$constants_0.CXCursor_LastDecl();
+    }
+    public static int CXCursor_FirstRef() {
+        return Index_h$constants_0.CXCursor_FirstRef();
+    }
+    public static int CXCursor_ObjCSuperClassRef() {
+        return Index_h$constants_0.CXCursor_ObjCSuperClassRef();
+    }
+    public static int CXCursor_ObjCProtocolRef() {
+        return Index_h$constants_0.CXCursor_ObjCProtocolRef();
+    }
+    public static int CXCursor_ObjCClassRef() {
+        return Index_h$constants_0.CXCursor_ObjCClassRef();
+    }
+    public static int CXCursor_TypeRef() {
+        return Index_h$constants_0.CXCursor_TypeRef();
+    }
+    public static int CXCursor_CXXBaseSpecifier() {
+        return Index_h$constants_0.CXCursor_CXXBaseSpecifier();
+    }
+    public static int CXCursor_TemplateRef() {
+        return Index_h$constants_0.CXCursor_TemplateRef();
+    }
+    public static int CXCursor_NamespaceRef() {
+        return Index_h$constants_0.CXCursor_NamespaceRef();
+    }
+    public static int CXCursor_MemberRef() {
+        return Index_h$constants_0.CXCursor_MemberRef();
+    }
+    public static int CXCursor_LabelRef() {
+        return Index_h$constants_0.CXCursor_LabelRef();
+    }
+    public static int CXCursor_OverloadedDeclRef() {
+        return Index_h$constants_0.CXCursor_OverloadedDeclRef();
+    }
+    public static int CXCursor_VariableRef() {
+        return Index_h$constants_0.CXCursor_VariableRef();
+    }
+    public static int CXCursor_LastRef() {
+        return Index_h$constants_0.CXCursor_LastRef();
+    }
+    public static int CXCursor_FirstInvalid() {
+        return Index_h$constants_0.CXCursor_FirstInvalid();
+    }
+    public static int CXCursor_InvalidFile() {
+        return Index_h$constants_0.CXCursor_InvalidFile();
+    }
+    public static int CXCursor_NoDeclFound() {
+        return Index_h$constants_0.CXCursor_NoDeclFound();
+    }
+    public static int CXCursor_NotImplemented() {
+        return Index_h$constants_0.CXCursor_NotImplemented();
+    }
+    public static int CXCursor_InvalidCode() {
+        return Index_h$constants_0.CXCursor_InvalidCode();
+    }
+    public static int CXCursor_LastInvalid() {
+        return Index_h$constants_0.CXCursor_LastInvalid();
+    }
+    public static int CXCursor_FirstExpr() {
+        return Index_h$constants_0.CXCursor_FirstExpr();
+    }
+    public static int CXCursor_UnexposedExpr() {
+        return Index_h$constants_0.CXCursor_UnexposedExpr();
+    }
+    public static int CXCursor_DeclRefExpr() {
+        return Index_h$constants_0.CXCursor_DeclRefExpr();
+    }
+    public static int CXCursor_MemberRefExpr() {
+        return Index_h$constants_0.CXCursor_MemberRefExpr();
+    }
+    public static int CXCursor_CallExpr() {
+        return Index_h$constants_0.CXCursor_CallExpr();
+    }
+    public static int CXCursor_ObjCMessageExpr() {
+        return Index_h$constants_0.CXCursor_ObjCMessageExpr();
+    }
+    public static int CXCursor_BlockExpr() {
+        return Index_h$constants_0.CXCursor_BlockExpr();
+    }
+    public static int CXCursor_IntegerLiteral() {
+        return Index_h$constants_0.CXCursor_IntegerLiteral();
+    }
+    public static int CXCursor_FloatingLiteral() {
+        return Index_h$constants_0.CXCursor_FloatingLiteral();
+    }
+    public static int CXCursor_ImaginaryLiteral() {
+        return Index_h$constants_0.CXCursor_ImaginaryLiteral();
+    }
+    public static int CXCursor_StringLiteral() {
+        return Index_h$constants_0.CXCursor_StringLiteral();
+    }
+    public static int CXCursor_CharacterLiteral() {
+        return Index_h$constants_0.CXCursor_CharacterLiteral();
+    }
+    public static int CXCursor_ParenExpr() {
+        return Index_h$constants_0.CXCursor_ParenExpr();
+    }
+    public static int CXCursor_UnaryOperator() {
+        return Index_h$constants_0.CXCursor_UnaryOperator();
+    }
+    public static int CXCursor_ArraySubscriptExpr() {
+        return Index_h$constants_0.CXCursor_ArraySubscriptExpr();
+    }
+    public static int CXCursor_BinaryOperator() {
+        return Index_h$constants_0.CXCursor_BinaryOperator();
+    }
+    public static int CXCursor_CompoundAssignOperator() {
+        return Index_h$constants_0.CXCursor_CompoundAssignOperator();
+    }
+    public static int CXCursor_ConditionalOperator() {
+        return Index_h$constants_0.CXCursor_ConditionalOperator();
+    }
+    public static int CXCursor_CStyleCastExpr() {
+        return Index_h$constants_0.CXCursor_CStyleCastExpr();
+    }
+    public static int CXCursor_CompoundLiteralExpr() {
+        return Index_h$constants_0.CXCursor_CompoundLiteralExpr();
+    }
+    public static int CXCursor_InitListExpr() {
+        return Index_h$constants_0.CXCursor_InitListExpr();
+    }
+    public static int CXCursor_AddrLabelExpr() {
+        return Index_h$constants_0.CXCursor_AddrLabelExpr();
+    }
+    public static int CXCursor_StmtExpr() {
+        return Index_h$constants_0.CXCursor_StmtExpr();
+    }
+    public static int CXCursor_GenericSelectionExpr() {
+        return Index_h$constants_0.CXCursor_GenericSelectionExpr();
+    }
+    public static int CXCursor_GNUNullExpr() {
+        return Index_h$constants_0.CXCursor_GNUNullExpr();
+    }
+    public static int CXCursor_CXXStaticCastExpr() {
+        return Index_h$constants_0.CXCursor_CXXStaticCastExpr();
+    }
+    public static int CXCursor_CXXDynamicCastExpr() {
+        return Index_h$constants_0.CXCursor_CXXDynamicCastExpr();
+    }
+    public static int CXCursor_CXXReinterpretCastExpr() {
+        return Index_h$constants_0.CXCursor_CXXReinterpretCastExpr();
+    }
+    public static int CXCursor_CXXConstCastExpr() {
+        return Index_h$constants_0.CXCursor_CXXConstCastExpr();
+    }
+    public static int CXCursor_CXXFunctionalCastExpr() {
+        return Index_h$constants_0.CXCursor_CXXFunctionalCastExpr();
+    }
+    public static int CXCursor_CXXTypeidExpr() {
+        return Index_h$constants_0.CXCursor_CXXTypeidExpr();
+    }
+    public static int CXCursor_CXXBoolLiteralExpr() {
+        return Index_h$constants_0.CXCursor_CXXBoolLiteralExpr();
+    }
+    public static int CXCursor_CXXNullPtrLiteralExpr() {
+        return Index_h$constants_0.CXCursor_CXXNullPtrLiteralExpr();
+    }
+    public static int CXCursor_CXXThisExpr() {
+        return Index_h$constants_0.CXCursor_CXXThisExpr();
+    }
+    public static int CXCursor_CXXThrowExpr() {
+        return Index_h$constants_0.CXCursor_CXXThrowExpr();
+    }
+    public static int CXCursor_CXXNewExpr() {
+        return Index_h$constants_0.CXCursor_CXXNewExpr();
+    }
+    public static int CXCursor_CXXDeleteExpr() {
+        return Index_h$constants_0.CXCursor_CXXDeleteExpr();
+    }
+    public static int CXCursor_UnaryExpr() {
+        return Index_h$constants_0.CXCursor_UnaryExpr();
+    }
+    public static int CXCursor_ObjCStringLiteral() {
+        return Index_h$constants_0.CXCursor_ObjCStringLiteral();
+    }
+    public static int CXCursor_ObjCEncodeExpr() {
+        return Index_h$constants_0.CXCursor_ObjCEncodeExpr();
+    }
+    public static int CXCursor_ObjCSelectorExpr() {
+        return Index_h$constants_0.CXCursor_ObjCSelectorExpr();
+    }
+    public static int CXCursor_ObjCProtocolExpr() {
+        return Index_h$constants_0.CXCursor_ObjCProtocolExpr();
+    }
+    public static int CXCursor_ObjCBridgedCastExpr() {
+        return Index_h$constants_0.CXCursor_ObjCBridgedCastExpr();
+    }
+    public static int CXCursor_PackExpansionExpr() {
+        return Index_h$constants_0.CXCursor_PackExpansionExpr();
+    }
+    public static int CXCursor_SizeOfPackExpr() {
+        return Index_h$constants_0.CXCursor_SizeOfPackExpr();
+    }
+    public static int CXCursor_LambdaExpr() {
+        return Index_h$constants_0.CXCursor_LambdaExpr();
+    }
+    public static int CXCursor_ObjCBoolLiteralExpr() {
+        return Index_h$constants_0.CXCursor_ObjCBoolLiteralExpr();
+    }
+    public static int CXCursor_ObjCSelfExpr() {
+        return Index_h$constants_0.CXCursor_ObjCSelfExpr();
+    }
+    public static int CXCursor_OMPArraySectionExpr() {
+        return Index_h$constants_0.CXCursor_OMPArraySectionExpr();
+    }
+    public static int CXCursor_ObjCAvailabilityCheckExpr() {
+        return Index_h$constants_0.CXCursor_ObjCAvailabilityCheckExpr();
+    }
+    public static int CXCursor_FixedPointLiteral() {
+        return Index_h$constants_0.CXCursor_FixedPointLiteral();
+    }
+    public static int CXCursor_LastExpr() {
+        return Index_h$constants_0.CXCursor_LastExpr();
+    }
+    public static int CXCursor_FirstStmt() {
+        return Index_h$constants_0.CXCursor_FirstStmt();
+    }
+    public static int CXCursor_UnexposedStmt() {
+        return Index_h$constants_0.CXCursor_UnexposedStmt();
+    }
+    public static int CXCursor_LabelStmt() {
+        return Index_h$constants_0.CXCursor_LabelStmt();
+    }
+    public static int CXCursor_CompoundStmt() {
+        return Index_h$constants_0.CXCursor_CompoundStmt();
+    }
+    public static int CXCursor_CaseStmt() {
+        return Index_h$constants_0.CXCursor_CaseStmt();
+    }
+    public static int CXCursor_DefaultStmt() {
+        return Index_h$constants_0.CXCursor_DefaultStmt();
+    }
+    public static int CXCursor_IfStmt() {
+        return Index_h$constants_0.CXCursor_IfStmt();
+    }
+    public static int CXCursor_SwitchStmt() {
+        return Index_h$constants_0.CXCursor_SwitchStmt();
+    }
+    public static int CXCursor_WhileStmt() {
+        return Index_h$constants_0.CXCursor_WhileStmt();
+    }
+    public static int CXCursor_DoStmt() {
+        return Index_h$constants_0.CXCursor_DoStmt();
+    }
+    public static int CXCursor_ForStmt() {
+        return Index_h$constants_0.CXCursor_ForStmt();
+    }
+    public static int CXCursor_GotoStmt() {
+        return Index_h$constants_0.CXCursor_GotoStmt();
+    }
+    public static int CXCursor_IndirectGotoStmt() {
+        return Index_h$constants_0.CXCursor_IndirectGotoStmt();
+    }
+    public static int CXCursor_ContinueStmt() {
+        return Index_h$constants_0.CXCursor_ContinueStmt();
+    }
+    public static int CXCursor_BreakStmt() {
+        return Index_h$constants_0.CXCursor_BreakStmt();
+    }
+    public static int CXCursor_ReturnStmt() {
+        return Index_h$constants_0.CXCursor_ReturnStmt();
+    }
+    public static int CXCursor_GCCAsmStmt() {
+        return Index_h$constants_0.CXCursor_GCCAsmStmt();
+    }
+    public static int CXCursor_AsmStmt() {
+        return Index_h$constants_0.CXCursor_AsmStmt();
+    }
+    public static int CXCursor_ObjCAtTryStmt() {
+        return Index_h$constants_0.CXCursor_ObjCAtTryStmt();
+    }
+    public static int CXCursor_ObjCAtCatchStmt() {
+        return Index_h$constants_0.CXCursor_ObjCAtCatchStmt();
+    }
+    public static int CXCursor_ObjCAtFinallyStmt() {
+        return Index_h$constants_0.CXCursor_ObjCAtFinallyStmt();
+    }
+    public static int CXCursor_ObjCAtThrowStmt() {
+        return Index_h$constants_0.CXCursor_ObjCAtThrowStmt();
+    }
+    public static int CXCursor_ObjCAtSynchronizedStmt() {
+        return Index_h$constants_0.CXCursor_ObjCAtSynchronizedStmt();
+    }
+    public static int CXCursor_ObjCAutoreleasePoolStmt() {
+        return Index_h$constants_0.CXCursor_ObjCAutoreleasePoolStmt();
+    }
+    public static int CXCursor_ObjCForCollectionStmt() {
+        return Index_h$constants_0.CXCursor_ObjCForCollectionStmt();
+    }
+    public static int CXCursor_CXXCatchStmt() {
+        return Index_h$constants_0.CXCursor_CXXCatchStmt();
+    }
+    public static int CXCursor_CXXTryStmt() {
+        return Index_h$constants_0.CXCursor_CXXTryStmt();
+    }
+    public static int CXCursor_CXXForRangeStmt() {
+        return Index_h$constants_0.CXCursor_CXXForRangeStmt();
+    }
+    public static int CXCursor_SEHTryStmt() {
+        return Index_h$constants_0.CXCursor_SEHTryStmt();
+    }
+    public static int CXCursor_SEHExceptStmt() {
+        return Index_h$constants_0.CXCursor_SEHExceptStmt();
+    }
+    public static int CXCursor_SEHFinallyStmt() {
+        return Index_h$constants_0.CXCursor_SEHFinallyStmt();
+    }
+    public static int CXCursor_MSAsmStmt() {
+        return Index_h$constants_0.CXCursor_MSAsmStmt();
+    }
+    public static int CXCursor_NullStmt() {
+        return Index_h$constants_0.CXCursor_NullStmt();
+    }
+    public static int CXCursor_DeclStmt() {
+        return Index_h$constants_0.CXCursor_DeclStmt();
+    }
+    public static int CXCursor_OMPParallelDirective() {
+        return Index_h$constants_0.CXCursor_OMPParallelDirective();
+    }
+    public static int CXCursor_OMPSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPSimdDirective();
+    }
+    public static int CXCursor_OMPForDirective() {
+        return Index_h$constants_0.CXCursor_OMPForDirective();
+    }
+    public static int CXCursor_OMPSectionsDirective() {
+        return Index_h$constants_0.CXCursor_OMPSectionsDirective();
+    }
+    public static int CXCursor_OMPSectionDirective() {
+        return Index_h$constants_0.CXCursor_OMPSectionDirective();
+    }
+    public static int CXCursor_OMPSingleDirective() {
+        return Index_h$constants_0.CXCursor_OMPSingleDirective();
+    }
+    public static int CXCursor_OMPParallelForDirective() {
+        return Index_h$constants_0.CXCursor_OMPParallelForDirective();
+    }
+    public static int CXCursor_OMPParallelSectionsDirective() {
+        return Index_h$constants_0.CXCursor_OMPParallelSectionsDirective();
+    }
+    public static int CXCursor_OMPTaskDirective() {
+        return Index_h$constants_0.CXCursor_OMPTaskDirective();
+    }
+    public static int CXCursor_OMPMasterDirective() {
+        return Index_h$constants_0.CXCursor_OMPMasterDirective();
+    }
+    public static int CXCursor_OMPCriticalDirective() {
+        return Index_h$constants_0.CXCursor_OMPCriticalDirective();
+    }
+    public static int CXCursor_OMPTaskyieldDirective() {
+        return Index_h$constants_0.CXCursor_OMPTaskyieldDirective();
+    }
+    public static int CXCursor_OMPBarrierDirective() {
+        return Index_h$constants_0.CXCursor_OMPBarrierDirective();
+    }
+    public static int CXCursor_OMPTaskwaitDirective() {
+        return Index_h$constants_0.CXCursor_OMPTaskwaitDirective();
+    }
+    public static int CXCursor_OMPFlushDirective() {
+        return Index_h$constants_0.CXCursor_OMPFlushDirective();
+    }
+    public static int CXCursor_SEHLeaveStmt() {
+        return Index_h$constants_0.CXCursor_SEHLeaveStmt();
+    }
+    public static int CXCursor_OMPOrderedDirective() {
+        return Index_h$constants_0.CXCursor_OMPOrderedDirective();
+    }
+    public static int CXCursor_OMPAtomicDirective() {
+        return Index_h$constants_0.CXCursor_OMPAtomicDirective();
+    }
+    public static int CXCursor_OMPForSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPForSimdDirective();
+    }
+    public static int CXCursor_OMPParallelForSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPParallelForSimdDirective();
+    }
+    public static int CXCursor_OMPTargetDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetDirective();
+    }
+    public static int CXCursor_OMPTeamsDirective() {
+        return Index_h$constants_0.CXCursor_OMPTeamsDirective();
+    }
+    public static int CXCursor_OMPTaskgroupDirective() {
+        return Index_h$constants_0.CXCursor_OMPTaskgroupDirective();
+    }
+    public static int CXCursor_OMPCancellationPointDirective() {
+        return Index_h$constants_0.CXCursor_OMPCancellationPointDirective();
+    }
+    public static int CXCursor_OMPCancelDirective() {
+        return Index_h$constants_0.CXCursor_OMPCancelDirective();
+    }
+    public static int CXCursor_OMPTargetDataDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetDataDirective();
+    }
+    public static int CXCursor_OMPTaskLoopDirective() {
+        return Index_h$constants_0.CXCursor_OMPTaskLoopDirective();
+    }
+    public static int CXCursor_OMPTaskLoopSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPTaskLoopSimdDirective();
+    }
+    public static int CXCursor_OMPDistributeDirective() {
+        return Index_h$constants_0.CXCursor_OMPDistributeDirective();
+    }
+    public static int CXCursor_OMPTargetEnterDataDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetEnterDataDirective();
+    }
+    public static int CXCursor_OMPTargetExitDataDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetExitDataDirective();
+    }
+    public static int CXCursor_OMPTargetParallelDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetParallelDirective();
+    }
+    public static int CXCursor_OMPTargetParallelForDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetParallelForDirective();
+    }
+    public static int CXCursor_OMPTargetUpdateDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetUpdateDirective();
+    }
+    public static int CXCursor_OMPDistributeParallelForDirective() {
+        return Index_h$constants_0.CXCursor_OMPDistributeParallelForDirective();
+    }
+    public static int CXCursor_OMPDistributeParallelForSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPDistributeParallelForSimdDirective();
+    }
+    public static int CXCursor_OMPDistributeSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPDistributeSimdDirective();
+    }
+    public static int CXCursor_OMPTargetParallelForSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetParallelForSimdDirective();
+    }
+    public static int CXCursor_OMPTargetSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetSimdDirective();
+    }
+    public static int CXCursor_OMPTeamsDistributeDirective() {
+        return Index_h$constants_0.CXCursor_OMPTeamsDistributeDirective();
+    }
+    public static int CXCursor_OMPTeamsDistributeSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPTeamsDistributeSimdDirective();
+    }
+    public static int CXCursor_OMPTeamsDistributeParallelForSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPTeamsDistributeParallelForSimdDirective();
+    }
+    public static int CXCursor_OMPTeamsDistributeParallelForDirective() {
+        return Index_h$constants_0.CXCursor_OMPTeamsDistributeParallelForDirective();
+    }
+    public static int CXCursor_OMPTargetTeamsDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetTeamsDirective();
+    }
+    public static int CXCursor_OMPTargetTeamsDistributeDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeDirective();
+    }
+    public static int CXCursor_OMPTargetTeamsDistributeParallelForDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeParallelForDirective();
+    }
+    public static int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective();
+    }
+    public static int CXCursor_OMPTargetTeamsDistributeSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeSimdDirective();
+    }
+    public static int CXCursor_BuiltinBitCastExpr() {
+        return Index_h$constants_0.CXCursor_BuiltinBitCastExpr();
+    }
+    public static int CXCursor_OMPMasterTaskLoopDirective() {
+        return Index_h$constants_0.CXCursor_OMPMasterTaskLoopDirective();
+    }
+    public static int CXCursor_OMPParallelMasterTaskLoopDirective() {
+        return Index_h$constants_0.CXCursor_OMPParallelMasterTaskLoopDirective();
+    }
+    public static int CXCursor_OMPMasterTaskLoopSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPMasterTaskLoopSimdDirective();
+    }
+    public static int CXCursor_OMPParallelMasterTaskLoopSimdDirective() {
+        return Index_h$constants_0.CXCursor_OMPParallelMasterTaskLoopSimdDirective();
+    }
+    public static int CXCursor_LastStmt() {
+        return Index_h$constants_0.CXCursor_LastStmt();
+    }
+    public static int CXCursor_TranslationUnit() {
+        return Index_h$constants_0.CXCursor_TranslationUnit();
+    }
+    public static int CXCursor_FirstAttr() {
+        return Index_h$constants_0.CXCursor_FirstAttr();
+    }
+    public static int CXCursor_UnexposedAttr() {
+        return Index_h$constants_0.CXCursor_UnexposedAttr();
+    }
+    public static int CXCursor_IBActionAttr() {
+        return Index_h$constants_0.CXCursor_IBActionAttr();
+    }
+    public static int CXCursor_IBOutletAttr() {
+        return Index_h$constants_0.CXCursor_IBOutletAttr();
+    }
+    public static int CXCursor_IBOutletCollectionAttr() {
+        return Index_h$constants_0.CXCursor_IBOutletCollectionAttr();
+    }
+    public static int CXCursor_CXXFinalAttr() {
+        return Index_h$constants_0.CXCursor_CXXFinalAttr();
+    }
+    public static int CXCursor_CXXOverrideAttr() {
+        return Index_h$constants_0.CXCursor_CXXOverrideAttr();
+    }
+    public static int CXCursor_AnnotateAttr() {
+        return Index_h$constants_0.CXCursor_AnnotateAttr();
+    }
+    public static int CXCursor_AsmLabelAttr() {
+        return Index_h$constants_0.CXCursor_AsmLabelAttr();
+    }
+    public static int CXCursor_PackedAttr() {
+        return Index_h$constants_0.CXCursor_PackedAttr();
+    }
+    public static int CXCursor_PureAttr() {
+        return Index_h$constants_0.CXCursor_PureAttr();
+    }
+    public static int CXCursor_ConstAttr() {
+        return Index_h$constants_0.CXCursor_ConstAttr();
+    }
+    public static int CXCursor_NoDuplicateAttr() {
+        return Index_h$constants_0.CXCursor_NoDuplicateAttr();
+    }
+    public static int CXCursor_CUDAConstantAttr() {
+        return Index_h$constants_0.CXCursor_CUDAConstantAttr();
+    }
+    public static int CXCursor_CUDADeviceAttr() {
+        return Index_h$constants_0.CXCursor_CUDADeviceAttr();
+    }
+    public static int CXCursor_CUDAGlobalAttr() {
+        return Index_h$constants_0.CXCursor_CUDAGlobalAttr();
+    }
+    public static int CXCursor_CUDAHostAttr() {
+        return Index_h$constants_0.CXCursor_CUDAHostAttr();
+    }
+    public static int CXCursor_CUDASharedAttr() {
+        return Index_h$constants_0.CXCursor_CUDASharedAttr();
+    }
+    public static int CXCursor_VisibilityAttr() {
+        return Index_h$constants_0.CXCursor_VisibilityAttr();
+    }
+    public static int CXCursor_DLLExport() {
+        return Index_h$constants_0.CXCursor_DLLExport();
+    }
+    public static int CXCursor_DLLImport() {
+        return Index_h$constants_0.CXCursor_DLLImport();
+    }
+    public static int CXCursor_NSReturnsRetained() {
+        return Index_h$constants_0.CXCursor_NSReturnsRetained();
+    }
+    public static int CXCursor_NSReturnsNotRetained() {
+        return Index_h$constants_0.CXCursor_NSReturnsNotRetained();
+    }
+    public static int CXCursor_NSReturnsAutoreleased() {
+        return Index_h$constants_0.CXCursor_NSReturnsAutoreleased();
+    }
+    public static int CXCursor_NSConsumesSelf() {
+        return Index_h$constants_0.CXCursor_NSConsumesSelf();
+    }
+    public static int CXCursor_NSConsumed() {
+        return Index_h$constants_0.CXCursor_NSConsumed();
+    }
+    public static int CXCursor_ObjCException() {
+        return Index_h$constants_0.CXCursor_ObjCException();
+    }
+    public static int CXCursor_ObjCNSObject() {
+        return Index_h$constants_0.CXCursor_ObjCNSObject();
+    }
+    public static int CXCursor_ObjCIndependentClass() {
+        return Index_h$constants_0.CXCursor_ObjCIndependentClass();
+    }
+    public static int CXCursor_ObjCPreciseLifetime() {
+        return Index_h$constants_0.CXCursor_ObjCPreciseLifetime();
+    }
+    public static int CXCursor_ObjCReturnsInnerPointer() {
+        return Index_h$constants_0.CXCursor_ObjCReturnsInnerPointer();
+    }
+    public static int CXCursor_ObjCRequiresSuper() {
+        return Index_h$constants_0.CXCursor_ObjCRequiresSuper();
+    }
+    public static int CXCursor_ObjCRootClass() {
+        return Index_h$constants_0.CXCursor_ObjCRootClass();
+    }
+    public static int CXCursor_ObjCSubclassingRestricted() {
+        return Index_h$constants_0.CXCursor_ObjCSubclassingRestricted();
+    }
+    public static int CXCursor_ObjCExplicitProtocolImpl() {
+        return Index_h$constants_0.CXCursor_ObjCExplicitProtocolImpl();
+    }
+    public static int CXCursor_ObjCDesignatedInitializer() {
+        return Index_h$constants_0.CXCursor_ObjCDesignatedInitializer();
+    }
+    public static int CXCursor_ObjCRuntimeVisible() {
+        return Index_h$constants_0.CXCursor_ObjCRuntimeVisible();
+    }
+    public static int CXCursor_ObjCBoxable() {
+        return Index_h$constants_0.CXCursor_ObjCBoxable();
+    }
+    public static int CXCursor_FlagEnum() {
+        return Index_h$constants_0.CXCursor_FlagEnum();
+    }
+    public static int CXCursor_ConvergentAttr() {
+        return Index_h$constants_0.CXCursor_ConvergentAttr();
+    }
+    public static int CXCursor_WarnUnusedAttr() {
+        return Index_h$constants_0.CXCursor_WarnUnusedAttr();
+    }
+    public static int CXCursor_WarnUnusedResultAttr() {
+        return Index_h$constants_0.CXCursor_WarnUnusedResultAttr();
+    }
+    public static int CXCursor_AlignedAttr() {
+        return Index_h$constants_0.CXCursor_AlignedAttr();
+    }
+    public static int CXCursor_LastAttr() {
+        return Index_h$constants_0.CXCursor_LastAttr();
+    }
+    public static int CXCursor_PreprocessingDirective() {
+        return Index_h$constants_0.CXCursor_PreprocessingDirective();
+    }
+    public static int CXCursor_MacroDefinition() {
+        return Index_h$constants_0.CXCursor_MacroDefinition();
+    }
+    public static int CXCursor_MacroExpansion() {
+        return Index_h$constants_0.CXCursor_MacroExpansion();
+    }
+    public static int CXCursor_MacroInstantiation() {
+        return Index_h$constants_0.CXCursor_MacroInstantiation();
+    }
+    public static int CXCursor_InclusionDirective() {
+        return Index_h$constants_0.CXCursor_InclusionDirective();
+    }
+    public static int CXCursor_FirstPreprocessing() {
+        return Index_h$constants_0.CXCursor_FirstPreprocessing();
+    }
+    public static int CXCursor_LastPreprocessing() {
+        return Index_h$constants_0.CXCursor_LastPreprocessing();
+    }
+    public static int CXCursor_ModuleImportDecl() {
+        return Index_h$constants_0.CXCursor_ModuleImportDecl();
+    }
+    public static int CXCursor_TypeAliasTemplateDecl() {
+        return Index_h$constants_0.CXCursor_TypeAliasTemplateDecl();
+    }
+    public static int CXCursor_StaticAssert() {
+        return Index_h$constants_0.CXCursor_StaticAssert();
+    }
+    public static int CXCursor_FriendDecl() {
+        return Index_h$constants_0.CXCursor_FriendDecl();
+    }
+    public static int CXCursor_FirstExtraDecl() {
+        return Index_h$constants_0.CXCursor_FirstExtraDecl();
+    }
+    public static int CXCursor_LastExtraDecl() {
+        return Index_h$constants_0.CXCursor_LastExtraDecl();
+    }
+    public static int CXCursor_OverloadCandidate() {
+        return Index_h$constants_0.CXCursor_OverloadCandidate();
+    }
+    public static int CXTSK_Undeclared() {
+        return Index_h$constants_0.CXTSK_Undeclared();
+    }
+    public static int CXTSK_ImplicitInstantiation() {
+        return Index_h$constants_0.CXTSK_ImplicitInstantiation();
+    }
+    public static int CXTSK_ExplicitSpecialization() {
+        return Index_h$constants_0.CXTSK_ExplicitSpecialization();
+    }
+    public static int CXTSK_ExplicitInstantiationDeclaration() {
+        return Index_h$constants_0.CXTSK_ExplicitInstantiationDeclaration();
+    }
+    public static int CXTSK_ExplicitInstantiationDefinition() {
+        return Index_h$constants_0.CXTSK_ExplicitInstantiationDefinition();
+    }
+    public static class CXCursor {
+
+        private CXCursor() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXCursor$struct$LAYOUT();
+        }
+        public static VarHandle kind$VH() {
+            return Index_h$constants_0.kind$VH();
+        }
+        public static int kind$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.kind$VH().get(seg);
+        }
+        public static int kind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.kind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.kind$VH().set(seg, x);
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.kind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle xdata$VH() {
+            return Index_h$constants_0.xdata$VH();
+        }
+        public static int xdata$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.xdata$VH().get(seg);
+        }
+        public static int xdata$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.xdata$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void xdata$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.xdata$VH().set(seg, x);
+        }
+        public static void xdata$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.xdata$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment data$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 24));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getNullCursor$MH() {
+        return Index_h$constants_0.clang_getNullCursor$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getNullCursor () {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getNullCursor$MH().invokeExact();
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTranslationUnitCursor$MH() {
+        return Index_h$constants_0.clang_getTranslationUnitCursor$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTranslationUnitCursor (jdk.incubator.foreign.Addressable x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTranslationUnitCursor$MH().invokeExact(x0.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_equalCursors$MH() {
+        return Index_h$constants_0.clang_equalCursors$MH();
+    }
+    public static int clang_equalCursors (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1) {
+        try {
+            return (int)Index_h$constants_0.clang_equalCursors$MH().invokeExact(x0, x1);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isNull$MH() {
+        return Index_h$constants_0.clang_Cursor_isNull$MH();
+    }
+    public static int clang_Cursor_isNull (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_Cursor_isNull$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_hashCursor$MH() {
+        return Index_h$constants_0.clang_hashCursor$MH();
+    }
+    public static int clang_hashCursor (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_0.clang_hashCursor$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorKind$MH() {
+        return Index_h$constants_0.clang_getCursorKind$MH();
+    }
+    public static int clang_getCursorKind (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_0.clang_getCursorKind$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isDeclaration$MH() {
+        return Index_h$constants_0.clang_isDeclaration$MH();
+    }
+    public static int clang_isDeclaration (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isDeclaration$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isInvalidDeclaration$MH() {
+        return Index_h$constants_0.clang_isInvalidDeclaration$MH();
+    }
+    public static int clang_isInvalidDeclaration (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isInvalidDeclaration$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isReference$MH() {
+        return Index_h$constants_0.clang_isReference$MH();
+    }
+    public static int clang_isReference (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isReference$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isExpression$MH() {
+        return Index_h$constants_0.clang_isExpression$MH();
+    }
+    public static int clang_isExpression (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isExpression$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isStatement$MH() {
+        return Index_h$constants_0.clang_isStatement$MH();
+    }
+    public static int clang_isStatement (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isStatement$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isAttribute$MH() {
+        return Index_h$constants_0.clang_isAttribute$MH();
+    }
+    public static int clang_isAttribute (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isAttribute$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_hasAttrs$MH() {
+        return Index_h$constants_0.clang_Cursor_hasAttrs$MH();
+    }
+    public static int clang_Cursor_hasAttrs (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_0.clang_Cursor_hasAttrs$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isInvalid$MH() {
+        return Index_h$constants_0.clang_isInvalid$MH();
+    }
+    public static int clang_isInvalid (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isInvalid$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isTranslationUnit$MH() {
+        return Index_h$constants_0.clang_isTranslationUnit$MH();
+    }
+    public static int clang_isTranslationUnit (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isTranslationUnit$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isPreprocessing$MH() {
+        return Index_h$constants_0.clang_isPreprocessing$MH();
+    }
+    public static int clang_isPreprocessing (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isPreprocessing$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isUnexposed$MH() {
+        return Index_h$constants_0.clang_isUnexposed$MH();
+    }
+    public static int clang_isUnexposed (int x0) {
+        try {
+            return (int)Index_h$constants_0.clang_isUnexposed$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXLinkage_Invalid() {
+        return Index_h$constants_0.CXLinkage_Invalid();
+    }
+    public static int CXLinkage_NoLinkage() {
+        return Index_h$constants_0.CXLinkage_NoLinkage();
+    }
+    public static int CXLinkage_Internal() {
+        return Index_h$constants_0.CXLinkage_Internal();
+    }
+    public static int CXLinkage_UniqueExternal() {
+        return Index_h$constants_0.CXLinkage_UniqueExternal();
+    }
+    public static int CXLinkage_External() {
+        return Index_h$constants_0.CXLinkage_External();
+    }
+    public static MethodHandle clang_getCursorLinkage$MH() {
+        return Index_h$constants_0.clang_getCursorLinkage$MH();
+    }
+    public static int clang_getCursorLinkage (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_getCursorLinkage$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXVisibility_Invalid() {
+        return Index_h$constants_0.CXVisibility_Invalid();
+    }
+    public static int CXVisibility_Hidden() {
+        return Index_h$constants_0.CXVisibility_Hidden();
+    }
+    public static int CXVisibility_Protected() {
+        return Index_h$constants_0.CXVisibility_Protected();
+    }
+    public static int CXVisibility_Default() {
+        return Index_h$constants_0.CXVisibility_Default();
+    }
+    public static MethodHandle clang_getCursorVisibility$MH() {
+        return Index_h$constants_0.clang_getCursorVisibility$MH();
+    }
+    public static int clang_getCursorVisibility (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_getCursorVisibility$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorAvailability$MH() {
+        return Index_h$constants_0.clang_getCursorAvailability$MH();
+    }
+    public static int clang_getCursorAvailability (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_getCursorAvailability$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static class CXPlatformAvailability {
+
+        private CXPlatformAvailability() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXPlatformAvailability$struct$LAYOUT();
+        }
+        public static MemorySegment Platform$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
+        }
+        public static MemorySegment Introduced$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 12));
+        }
+        public static MemorySegment Deprecated$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 12));
+        }
+        public static MemorySegment Obsoleted$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 12));
+        }
+        public static VarHandle Unavailable$VH() {
+            return Index_h$constants_0.Unavailable$VH();
+        }
+        public static int Unavailable$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.Unavailable$VH().get(seg);
+        }
+        public static int Unavailable$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.Unavailable$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Unavailable$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.Unavailable$VH().set(seg, x);
+        }
+        public static void Unavailable$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.Unavailable$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment Message$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getCursorPlatformAvailability$MH() {
+        return Index_h$constants_0.clang_getCursorPlatformAvailability$MH();
+    }
+    public static int clang_getCursorPlatformAvailability (jdk.incubator.foreign.MemorySegment cursor, jdk.incubator.foreign.Addressable always_deprecated, jdk.incubator.foreign.Addressable deprecated_message, jdk.incubator.foreign.Addressable always_unavailable, jdk.incubator.foreign.Addressable unavailable_message, jdk.incubator.foreign.Addressable availability, int availability_size) {
+        try {
+            return (int)Index_h$constants_0.clang_getCursorPlatformAvailability$MH().invokeExact(cursor, always_deprecated.address(), deprecated_message.address(), always_unavailable.address(), unavailable_message.address(), availability.address(), availability_size);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_disposeCXPlatformAvailability$MH() {
+        return Index_h$constants_0.clang_disposeCXPlatformAvailability$MH();
+    }
+    public static void clang_disposeCXPlatformAvailability (jdk.incubator.foreign.Addressable availability) {
+        try {
+            Index_h$constants_0.clang_disposeCXPlatformAvailability$MH().invokeExact(availability.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXLanguage_Invalid() {
+        return Index_h$constants_0.CXLanguage_Invalid();
+    }
+    public static int CXLanguage_C() {
+        return Index_h$constants_0.CXLanguage_C();
+    }
+    public static int CXLanguage_ObjC() {
+        return Index_h$constants_0.CXLanguage_ObjC();
+    }
+    public static int CXLanguage_CPlusPlus() {
+        return Index_h$constants_0.CXLanguage_CPlusPlus();
+    }
+    public static MethodHandle clang_getCursorLanguage$MH() {
+        return Index_h$constants_0.clang_getCursorLanguage$MH();
+    }
+    public static int clang_getCursorLanguage (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_getCursorLanguage$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXTLS_None() {
+        return Index_h$constants_0.CXTLS_None();
+    }
+    public static int CXTLS_Dynamic() {
+        return Index_h$constants_0.CXTLS_Dynamic();
+    }
+    public static int CXTLS_Static() {
+        return Index_h$constants_0.CXTLS_Static();
+    }
+    public static MethodHandle clang_getCursorTLSKind$MH() {
+        return Index_h$constants_0.clang_getCursorTLSKind$MH();
+    }
+    public static int clang_getCursorTLSKind (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_getCursorTLSKind$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getTranslationUnit$MH() {
+        return Index_h$constants_0.clang_Cursor_getTranslationUnit$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Cursor_getTranslationUnit (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_Cursor_getTranslationUnit$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_createCXCursorSet$MH() {
+        return Index_h$constants_0.clang_createCXCursorSet$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_createCXCursorSet () {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createCXCursorSet$MH().invokeExact();
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_disposeCXCursorSet$MH() {
+        return Index_h$constants_0.clang_disposeCXCursorSet$MH();
+    }
+    public static void clang_disposeCXCursorSet (jdk.incubator.foreign.Addressable cset) {
+        try {
+            Index_h$constants_0.clang_disposeCXCursorSet$MH().invokeExact(cset.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXCursorSet_contains$MH() {
+        return Index_h$constants_0.clang_CXCursorSet_contains$MH();
+    }
+    public static int clang_CXCursorSet_contains (jdk.incubator.foreign.Addressable cset, jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_CXCursorSet_contains$MH().invokeExact(cset.address(), cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXCursorSet_insert$MH() {
+        return Index_h$constants_0.clang_CXCursorSet_insert$MH();
+    }
+    public static int clang_CXCursorSet_insert (jdk.incubator.foreign.Addressable cset, jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_0.clang_CXCursorSet_insert$MH().invokeExact(cset.address(), cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorSemanticParent$MH() {
+        return Index_h$constants_0.clang_getCursorSemanticParent$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorSemanticParent (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorSemanticParent$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorLexicalParent$MH() {
+        return Index_h$constants_0.clang_getCursorLexicalParent$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorLexicalParent (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorLexicalParent$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getOverriddenCursors$MH() {
+        return Index_h$constants_0.clang_getOverriddenCursors$MH();
+    }
+    public static void clang_getOverriddenCursors (jdk.incubator.foreign.MemorySegment cursor, jdk.incubator.foreign.Addressable overridden, jdk.incubator.foreign.Addressable num_overridden) {
+        try {
+            Index_h$constants_0.clang_getOverriddenCursors$MH().invokeExact(cursor, overridden.address(), num_overridden.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_disposeOverriddenCursors$MH() {
+        return Index_h$constants_0.clang_disposeOverriddenCursors$MH();
+    }
+    public static void clang_disposeOverriddenCursors (jdk.incubator.foreign.Addressable overridden) {
+        try {
+            Index_h$constants_0.clang_disposeOverriddenCursors$MH().invokeExact(overridden.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getIncludedFile$MH() {
+        return Index_h$constants_0.clang_getIncludedFile$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getIncludedFile (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getIncludedFile$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursor$MH() {
+        return Index_h$constants_0.clang_getCursor$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursor (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.MemorySegment x1) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursor$MH().invokeExact(x0.address(), x1);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorLocation$MH() {
+        return Index_h$constants_0.clang_getCursorLocation$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorLocation (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorLocation$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorExtent$MH() {
+        return Index_h$constants_0.clang_getCursorExtent$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorExtent (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorExtent$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXType_Invalid() {
+        return Index_h$constants_0.CXType_Invalid();
+    }
+    public static int CXType_Unexposed() {
+        return Index_h$constants_0.CXType_Unexposed();
+    }
+    public static int CXType_Void() {
+        return Index_h$constants_0.CXType_Void();
+    }
+    public static int CXType_Bool() {
+        return Index_h$constants_0.CXType_Bool();
+    }
+    public static int CXType_Char_U() {
+        return Index_h$constants_0.CXType_Char_U();
+    }
+    public static int CXType_UChar() {
+        return Index_h$constants_0.CXType_UChar();
+    }
+    public static int CXType_Char16() {
+        return Index_h$constants_0.CXType_Char16();
+    }
+    public static int CXType_Char32() {
+        return Index_h$constants_0.CXType_Char32();
+    }
+    public static int CXType_UShort() {
+        return Index_h$constants_0.CXType_UShort();
+    }
+    public static int CXType_UInt() {
+        return Index_h$constants_0.CXType_UInt();
+    }
+    public static int CXType_ULong() {
+        return Index_h$constants_0.CXType_ULong();
+    }
+    public static int CXType_ULongLong() {
+        return Index_h$constants_0.CXType_ULongLong();
+    }
+    public static int CXType_UInt128() {
+        return Index_h$constants_0.CXType_UInt128();
+    }
+    public static int CXType_Char_S() {
+        return Index_h$constants_0.CXType_Char_S();
+    }
+    public static int CXType_SChar() {
+        return Index_h$constants_0.CXType_SChar();
+    }
+    public static int CXType_WChar() {
+        return Index_h$constants_0.CXType_WChar();
+    }
+    public static int CXType_Short() {
+        return Index_h$constants_0.CXType_Short();
+    }
+    public static int CXType_Int() {
+        return Index_h$constants_0.CXType_Int();
+    }
+    public static int CXType_Long() {
+        return Index_h$constants_0.CXType_Long();
+    }
+    public static int CXType_LongLong() {
+        return Index_h$constants_0.CXType_LongLong();
+    }
+    public static int CXType_Int128() {
+        return Index_h$constants_0.CXType_Int128();
+    }
+    public static int CXType_Float() {
+        return Index_h$constants_0.CXType_Float();
+    }
+    public static int CXType_Double() {
+        return Index_h$constants_0.CXType_Double();
+    }
+    public static int CXType_LongDouble() {
+        return Index_h$constants_0.CXType_LongDouble();
+    }
+    public static int CXType_NullPtr() {
+        return Index_h$constants_0.CXType_NullPtr();
+    }
+    public static int CXType_Overload() {
+        return Index_h$constants_0.CXType_Overload();
+    }
+    public static int CXType_Dependent() {
+        return Index_h$constants_0.CXType_Dependent();
+    }
+    public static int CXType_ObjCId() {
+        return Index_h$constants_0.CXType_ObjCId();
+    }
+    public static int CXType_ObjCClass() {
+        return Index_h$constants_0.CXType_ObjCClass();
+    }
+    public static int CXType_ObjCSel() {
+        return Index_h$constants_0.CXType_ObjCSel();
+    }
+    public static int CXType_Float128() {
+        return Index_h$constants_0.CXType_Float128();
+    }
+    public static int CXType_Half() {
+        return Index_h$constants_0.CXType_Half();
+    }
+    public static int CXType_Float16() {
+        return Index_h$constants_0.CXType_Float16();
+    }
+    public static int CXType_ShortAccum() {
+        return Index_h$constants_0.CXType_ShortAccum();
+    }
+    public static int CXType_Accum() {
+        return Index_h$constants_0.CXType_Accum();
+    }
+    public static int CXType_LongAccum() {
+        return Index_h$constants_0.CXType_LongAccum();
+    }
+    public static int CXType_UShortAccum() {
+        return Index_h$constants_0.CXType_UShortAccum();
+    }
+    public static int CXType_UAccum() {
+        return Index_h$constants_0.CXType_UAccum();
+    }
+    public static int CXType_ULongAccum() {
+        return Index_h$constants_0.CXType_ULongAccum();
+    }
+    public static int CXType_FirstBuiltin() {
+        return Index_h$constants_0.CXType_FirstBuiltin();
+    }
+    public static int CXType_LastBuiltin() {
+        return Index_h$constants_0.CXType_LastBuiltin();
+    }
+    public static int CXType_Complex() {
+        return Index_h$constants_0.CXType_Complex();
+    }
+    public static int CXType_Pointer() {
+        return Index_h$constants_0.CXType_Pointer();
+    }
+    public static int CXType_BlockPointer() {
+        return Index_h$constants_0.CXType_BlockPointer();
+    }
+    public static int CXType_LValueReference() {
+        return Index_h$constants_0.CXType_LValueReference();
+    }
+    public static int CXType_RValueReference() {
+        return Index_h$constants_0.CXType_RValueReference();
+    }
+    public static int CXType_Record() {
+        return Index_h$constants_0.CXType_Record();
+    }
+    public static int CXType_Enum() {
+        return Index_h$constants_0.CXType_Enum();
+    }
+    public static int CXType_Typedef() {
+        return Index_h$constants_0.CXType_Typedef();
+    }
+    public static int CXType_ObjCInterface() {
+        return Index_h$constants_0.CXType_ObjCInterface();
+    }
+    public static int CXType_ObjCObjectPointer() {
+        return Index_h$constants_0.CXType_ObjCObjectPointer();
+    }
+    public static int CXType_FunctionNoProto() {
+        return Index_h$constants_0.CXType_FunctionNoProto();
+    }
+    public static int CXType_FunctionProto() {
+        return Index_h$constants_0.CXType_FunctionProto();
+    }
+    public static int CXType_ConstantArray() {
+        return Index_h$constants_0.CXType_ConstantArray();
+    }
+    public static int CXType_Vector() {
+        return Index_h$constants_0.CXType_Vector();
+    }
+    public static int CXType_IncompleteArray() {
+        return Index_h$constants_0.CXType_IncompleteArray();
+    }
+    public static int CXType_VariableArray() {
+        return Index_h$constants_0.CXType_VariableArray();
+    }
+    public static int CXType_DependentSizedArray() {
+        return Index_h$constants_0.CXType_DependentSizedArray();
+    }
+    public static int CXType_MemberPointer() {
+        return Index_h$constants_0.CXType_MemberPointer();
+    }
+    public static int CXType_Auto() {
+        return Index_h$constants_0.CXType_Auto();
+    }
+    public static int CXType_Elaborated() {
+        return Index_h$constants_0.CXType_Elaborated();
+    }
+    public static int CXType_Pipe() {
+        return Index_h$constants_0.CXType_Pipe();
+    }
+    public static int CXType_OCLImage1dRO() {
+        return Index_h$constants_0.CXType_OCLImage1dRO();
+    }
+    public static int CXType_OCLImage1dArrayRO() {
+        return Index_h$constants_0.CXType_OCLImage1dArrayRO();
+    }
+    public static int CXType_OCLImage1dBufferRO() {
+        return Index_h$constants_0.CXType_OCLImage1dBufferRO();
+    }
+    public static int CXType_OCLImage2dRO() {
+        return Index_h$constants_0.CXType_OCLImage2dRO();
+    }
+    public static int CXType_OCLImage2dArrayRO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayRO();
+    }
+    public static int CXType_OCLImage2dDepthRO() {
+        return Index_h$constants_0.CXType_OCLImage2dDepthRO();
+    }
+    public static int CXType_OCLImage2dArrayDepthRO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayDepthRO();
+    }
+    public static int CXType_OCLImage2dMSAARO() {
+        return Index_h$constants_0.CXType_OCLImage2dMSAARO();
+    }
+    public static int CXType_OCLImage2dArrayMSAARO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayMSAARO();
+    }
+    public static int CXType_OCLImage2dMSAADepthRO() {
+        return Index_h$constants_0.CXType_OCLImage2dMSAADepthRO();
+    }
+    public static int CXType_OCLImage2dArrayMSAADepthRO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayMSAADepthRO();
+    }
+    public static int CXType_OCLImage3dRO() {
+        return Index_h$constants_0.CXType_OCLImage3dRO();
+    }
+    public static int CXType_OCLImage1dWO() {
+        return Index_h$constants_0.CXType_OCLImage1dWO();
+    }
+    public static int CXType_OCLImage1dArrayWO() {
+        return Index_h$constants_0.CXType_OCLImage1dArrayWO();
+    }
+    public static int CXType_OCLImage1dBufferWO() {
+        return Index_h$constants_0.CXType_OCLImage1dBufferWO();
+    }
+    public static int CXType_OCLImage2dWO() {
+        return Index_h$constants_0.CXType_OCLImage2dWO();
+    }
+    public static int CXType_OCLImage2dArrayWO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayWO();
+    }
+    public static int CXType_OCLImage2dDepthWO() {
+        return Index_h$constants_0.CXType_OCLImage2dDepthWO();
+    }
+    public static int CXType_OCLImage2dArrayDepthWO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayDepthWO();
+    }
+    public static int CXType_OCLImage2dMSAAWO() {
+        return Index_h$constants_0.CXType_OCLImage2dMSAAWO();
+    }
+    public static int CXType_OCLImage2dArrayMSAAWO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayMSAAWO();
+    }
+    public static int CXType_OCLImage2dMSAADepthWO() {
+        return Index_h$constants_0.CXType_OCLImage2dMSAADepthWO();
+    }
+    public static int CXType_OCLImage2dArrayMSAADepthWO() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayMSAADepthWO();
+    }
+    public static int CXType_OCLImage3dWO() {
+        return Index_h$constants_0.CXType_OCLImage3dWO();
+    }
+    public static int CXType_OCLImage1dRW() {
+        return Index_h$constants_0.CXType_OCLImage1dRW();
+    }
+    public static int CXType_OCLImage1dArrayRW() {
+        return Index_h$constants_0.CXType_OCLImage1dArrayRW();
+    }
+    public static int CXType_OCLImage1dBufferRW() {
+        return Index_h$constants_0.CXType_OCLImage1dBufferRW();
+    }
+    public static int CXType_OCLImage2dRW() {
+        return Index_h$constants_0.CXType_OCLImage2dRW();
+    }
+    public static int CXType_OCLImage2dArrayRW() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayRW();
+    }
+    public static int CXType_OCLImage2dDepthRW() {
+        return Index_h$constants_0.CXType_OCLImage2dDepthRW();
+    }
+    public static int CXType_OCLImage2dArrayDepthRW() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayDepthRW();
+    }
+    public static int CXType_OCLImage2dMSAARW() {
+        return Index_h$constants_0.CXType_OCLImage2dMSAARW();
+    }
+    public static int CXType_OCLImage2dArrayMSAARW() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayMSAARW();
+    }
+    public static int CXType_OCLImage2dMSAADepthRW() {
+        return Index_h$constants_0.CXType_OCLImage2dMSAADepthRW();
+    }
+    public static int CXType_OCLImage2dArrayMSAADepthRW() {
+        return Index_h$constants_0.CXType_OCLImage2dArrayMSAADepthRW();
+    }
+    public static int CXType_OCLImage3dRW() {
+        return Index_h$constants_0.CXType_OCLImage3dRW();
+    }
+    public static int CXType_OCLSampler() {
+        return Index_h$constants_0.CXType_OCLSampler();
+    }
+    public static int CXType_OCLEvent() {
+        return Index_h$constants_0.CXType_OCLEvent();
+    }
+    public static int CXType_OCLQueue() {
+        return Index_h$constants_0.CXType_OCLQueue();
+    }
+    public static int CXType_OCLReserveID() {
+        return Index_h$constants_0.CXType_OCLReserveID();
+    }
+    public static int CXType_ObjCObject() {
+        return Index_h$constants_0.CXType_ObjCObject();
+    }
+    public static int CXType_ObjCTypeParam() {
+        return Index_h$constants_0.CXType_ObjCTypeParam();
+    }
+    public static int CXType_Attributed() {
+        return Index_h$constants_0.CXType_Attributed();
+    }
+    public static int CXType_OCLIntelSubgroupAVCMcePayload() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCMcePayload();
+    }
+    public static int CXType_OCLIntelSubgroupAVCImePayload() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImePayload();
+    }
+    public static int CXType_OCLIntelSubgroupAVCRefPayload() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCRefPayload();
+    }
+    public static int CXType_OCLIntelSubgroupAVCSicPayload() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCSicPayload();
+    }
+    public static int CXType_OCLIntelSubgroupAVCMceResult() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCMceResult();
+    }
+    public static int CXType_OCLIntelSubgroupAVCImeResult() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeResult();
+    }
+    public static int CXType_OCLIntelSubgroupAVCRefResult() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCRefResult();
+    }
+    public static int CXType_OCLIntelSubgroupAVCSicResult() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCSicResult();
+    }
+    public static int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout();
+    }
+    public static int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout();
+    }
+    public static int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin();
+    }
+    public static int CXType_OCLIntelSubgroupAVCImeDualRefStreamin() {
+        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeDualRefStreamin();
+    }
+    public static int CXType_ExtVector() {
+        return Index_h$constants_0.CXType_ExtVector();
+    }
+    public static int CXCallingConv_Default() {
+        return Index_h$constants_0.CXCallingConv_Default();
+    }
+    public static int CXCallingConv_C() {
+        return Index_h$constants_0.CXCallingConv_C();
+    }
+    public static int CXCallingConv_X86StdCall() {
+        return Index_h$constants_0.CXCallingConv_X86StdCall();
+    }
+    public static int CXCallingConv_X86FastCall() {
+        return Index_h$constants_0.CXCallingConv_X86FastCall();
+    }
+    public static int CXCallingConv_X86ThisCall() {
+        return Index_h$constants_0.CXCallingConv_X86ThisCall();
+    }
+    public static int CXCallingConv_X86Pascal() {
+        return Index_h$constants_0.CXCallingConv_X86Pascal();
+    }
+    public static int CXCallingConv_AAPCS() {
+        return Index_h$constants_0.CXCallingConv_AAPCS();
+    }
+    public static int CXCallingConv_AAPCS_VFP() {
+        return Index_h$constants_0.CXCallingConv_AAPCS_VFP();
+    }
+    public static int CXCallingConv_X86RegCall() {
+        return Index_h$constants_0.CXCallingConv_X86RegCall();
+    }
+    public static int CXCallingConv_IntelOclBicc() {
+        return Index_h$constants_0.CXCallingConv_IntelOclBicc();
+    }
+    public static int CXCallingConv_Win64() {
+        return Index_h$constants_0.CXCallingConv_Win64();
+    }
+    public static int CXCallingConv_X86_64Win64() {
+        return Index_h$constants_0.CXCallingConv_X86_64Win64();
+    }
+    public static int CXCallingConv_X86_64SysV() {
+        return Index_h$constants_0.CXCallingConv_X86_64SysV();
+    }
+    public static int CXCallingConv_X86VectorCall() {
+        return Index_h$constants_0.CXCallingConv_X86VectorCall();
+    }
+    public static int CXCallingConv_Swift() {
+        return Index_h$constants_0.CXCallingConv_Swift();
+    }
+    public static int CXCallingConv_PreserveMost() {
+        return Index_h$constants_0.CXCallingConv_PreserveMost();
+    }
+    public static int CXCallingConv_PreserveAll() {
+        return Index_h$constants_0.CXCallingConv_PreserveAll();
+    }
+    public static int CXCallingConv_AArch64VectorCall() {
+        return Index_h$constants_0.CXCallingConv_AArch64VectorCall();
+    }
+    public static int CXCallingConv_Invalid() {
+        return Index_h$constants_0.CXCallingConv_Invalid();
+    }
+    public static int CXCallingConv_Unexposed() {
+        return Index_h$constants_0.CXCallingConv_Unexposed();
+    }
+    public static class CXType {
+
+        private CXType() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_0.CXType$struct$LAYOUT();
+        }
+        public static VarHandle kind$VH() {
+            return Index_h$constants_0.kind$VH();
+        }
+        public static int kind$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.kind$VH().get(seg);
+        }
+        public static int kind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.kind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.kind$VH().set(seg, x);
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.kind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment data$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getCursorType$MH() {
+        return Index_h$constants_1.clang_getCursorType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorType (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorType$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTypeSpelling$MH() {
+        return Index_h$constants_1.clang_getTypeSpelling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTypeSpelling (jdk.incubator.foreign.MemorySegment CT) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTypeSpelling$MH().invokeExact(CT);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {
+        return Index_h$constants_1.clang_getTypedefDeclUnderlyingType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTypedefDeclUnderlyingType (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTypedefDeclUnderlyingType$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getEnumDeclIntegerType$MH() {
+        return Index_h$constants_1.clang_getEnumDeclIntegerType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getEnumDeclIntegerType (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getEnumDeclIntegerType$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getEnumConstantDeclValue$MH() {
+        return Index_h$constants_1.clang_getEnumConstantDeclValue$MH();
+    }
+    public static long clang_getEnumConstantDeclValue (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (long)Index_h$constants_1.clang_getEnumConstantDeclValue$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() {
+        return Index_h$constants_1.clang_getEnumConstantDeclUnsignedValue$MH();
+    }
+    public static long clang_getEnumConstantDeclUnsignedValue (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (long)Index_h$constants_1.clang_getEnumConstantDeclUnsignedValue$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getFieldDeclBitWidth$MH() {
+        return Index_h$constants_1.clang_getFieldDeclBitWidth$MH();
+    }
+    public static int clang_getFieldDeclBitWidth (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_getFieldDeclBitWidth$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getNumArguments$MH() {
+        return Index_h$constants_1.clang_Cursor_getNumArguments$MH();
+    }
+    public static int clang_Cursor_getNumArguments (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_getNumArguments$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getArgument$MH() {
+        return Index_h$constants_1.clang_Cursor_getArgument$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getArgument (jdk.incubator.foreign.MemorySegment C, int i) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getArgument$MH().invokeExact(C, i);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXTemplateArgumentKind_Null() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Null();
+    }
+    public static int CXTemplateArgumentKind_Type() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Type();
+    }
+    public static int CXTemplateArgumentKind_Declaration() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Declaration();
+    }
+    public static int CXTemplateArgumentKind_NullPtr() {
+        return Index_h$constants_1.CXTemplateArgumentKind_NullPtr();
+    }
+    public static int CXTemplateArgumentKind_Integral() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Integral();
+    }
+    public static int CXTemplateArgumentKind_Template() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Template();
+    }
+    public static int CXTemplateArgumentKind_TemplateExpansion() {
+        return Index_h$constants_1.CXTemplateArgumentKind_TemplateExpansion();
+    }
+    public static int CXTemplateArgumentKind_Expression() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Expression();
+    }
+    public static int CXTemplateArgumentKind_Pack() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Pack();
+    }
+    public static int CXTemplateArgumentKind_Invalid() {
+        return Index_h$constants_1.CXTemplateArgumentKind_Invalid();
+    }
+    public static MethodHandle clang_Cursor_getNumTemplateArguments$MH() {
+        return Index_h$constants_1.clang_Cursor_getNumTemplateArguments$MH();
+    }
+    public static int clang_Cursor_getNumTemplateArguments (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_getNumTemplateArguments$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getTemplateArgumentKind$MH() {
+        return Index_h$constants_1.clang_Cursor_getTemplateArgumentKind$MH();
+    }
+    public static int clang_Cursor_getTemplateArgumentKind (jdk.incubator.foreign.MemorySegment C, int I) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_getTemplateArgumentKind$MH().invokeExact(C, I);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getTemplateArgumentType$MH() {
+        return Index_h$constants_1.clang_Cursor_getTemplateArgumentType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getTemplateArgumentType (jdk.incubator.foreign.MemorySegment C, int I) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getTemplateArgumentType$MH().invokeExact(C, I);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getTemplateArgumentValue$MH() {
+        return Index_h$constants_1.clang_Cursor_getTemplateArgumentValue$MH();
+    }
+    public static long clang_Cursor_getTemplateArgumentValue (jdk.incubator.foreign.MemorySegment C, int I) {
+        try {
+            return (long)Index_h$constants_1.clang_Cursor_getTemplateArgumentValue$MH().invokeExact(C, I);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH() {
+        return Index_h$constants_1.clang_Cursor_getTemplateArgumentUnsignedValue$MH();
+    }
+    public static long clang_Cursor_getTemplateArgumentUnsignedValue (jdk.incubator.foreign.MemorySegment C, int I) {
+        try {
+            return (long)Index_h$constants_1.clang_Cursor_getTemplateArgumentUnsignedValue$MH().invokeExact(C, I);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_equalTypes$MH() {
+        return Index_h$constants_1.clang_equalTypes$MH();
+    }
+    public static int clang_equalTypes (jdk.incubator.foreign.MemorySegment A, jdk.incubator.foreign.MemorySegment B) {
+        try {
+            return (int)Index_h$constants_1.clang_equalTypes$MH().invokeExact(A, B);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCanonicalType$MH() {
+        return Index_h$constants_1.clang_getCanonicalType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCanonicalType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCanonicalType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getLocalUnqualifiedType$MH() {
+        return Index_h$constants_1.clang_getLocalUnqualifiedType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getLocalUnqualifiedType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getLocalUnqualifiedType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isConstQualifiedType$MH() {
+        return Index_h$constants_1.clang_isConstQualifiedType$MH();
+    }
+    public static int clang_isConstQualifiedType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_isConstQualifiedType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isMacroFunctionLike$MH() {
+        return Index_h$constants_1.clang_Cursor_isMacroFunctionLike$MH();
+    }
+    public static int clang_Cursor_isMacroFunctionLike (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isMacroFunctionLike$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isMacroBuiltin$MH() {
+        return Index_h$constants_1.clang_Cursor_isMacroBuiltin$MH();
+    }
+    public static int clang_Cursor_isMacroBuiltin (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isMacroBuiltin$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isFunctionInlined$MH() {
+        return Index_h$constants_1.clang_Cursor_isFunctionInlined$MH();
+    }
+    public static int clang_Cursor_isFunctionInlined (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isFunctionInlined$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isVolatileQualifiedType$MH() {
+        return Index_h$constants_1.clang_isVolatileQualifiedType$MH();
+    }
+    public static int clang_isVolatileQualifiedType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_isVolatileQualifiedType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isRestrictQualifiedType$MH() {
+        return Index_h$constants_1.clang_isRestrictQualifiedType$MH();
+    }
+    public static int clang_isRestrictQualifiedType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_isRestrictQualifiedType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getAddressSpace$MH() {
+        return Index_h$constants_1.clang_getAddressSpace$MH();
+    }
+    public static int clang_getAddressSpace (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_getAddressSpace$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTypedefName$MH() {
+        return Index_h$constants_1.clang_getTypedefName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTypedefName (jdk.incubator.foreign.MemorySegment CT) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTypedefName$MH().invokeExact(CT);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getPointeeType$MH() {
+        return Index_h$constants_1.clang_getPointeeType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getPointeeType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getPointeeType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTypeDeclaration$MH() {
+        return Index_h$constants_1.clang_getTypeDeclaration$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTypeDeclaration (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTypeDeclaration$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getDeclObjCTypeEncoding$MH() {
+        return Index_h$constants_1.clang_getDeclObjCTypeEncoding$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getDeclObjCTypeEncoding (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getDeclObjCTypeEncoding$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getObjCEncoding$MH() {
+        return Index_h$constants_1.clang_Type_getObjCEncoding$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getObjCEncoding (jdk.incubator.foreign.MemorySegment type) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getObjCEncoding$MH().invokeExact(type);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTypeKindSpelling$MH() {
+        return Index_h$constants_1.clang_getTypeKindSpelling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTypeKindSpelling (int K) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTypeKindSpelling$MH().invokeExact(K);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getFunctionTypeCallingConv$MH() {
+        return Index_h$constants_1.clang_getFunctionTypeCallingConv$MH();
+    }
+    public static int clang_getFunctionTypeCallingConv (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_getFunctionTypeCallingConv$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getResultType$MH() {
+        return Index_h$constants_1.clang_getResultType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getResultType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getResultType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getExceptionSpecificationType$MH() {
+        return Index_h$constants_1.clang_getExceptionSpecificationType$MH();
+    }
+    public static int clang_getExceptionSpecificationType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_getExceptionSpecificationType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getNumArgTypes$MH() {
+        return Index_h$constants_1.clang_getNumArgTypes$MH();
+    }
+    public static int clang_getNumArgTypes (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_getNumArgTypes$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getArgType$MH() {
+        return Index_h$constants_1.clang_getArgType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getArgType (jdk.incubator.foreign.MemorySegment T, int i) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getArgType$MH().invokeExact(T, i);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getObjCObjectBaseType$MH() {
+        return Index_h$constants_1.clang_Type_getObjCObjectBaseType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getObjCObjectBaseType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getObjCObjectBaseType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getNumObjCProtocolRefs$MH() {
+        return Index_h$constants_1.clang_Type_getNumObjCProtocolRefs$MH();
+    }
+    public static int clang_Type_getNumObjCProtocolRefs (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_Type_getNumObjCProtocolRefs$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getObjCProtocolDecl$MH() {
+        return Index_h$constants_1.clang_Type_getObjCProtocolDecl$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getObjCProtocolDecl (jdk.incubator.foreign.MemorySegment T, int i) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getObjCProtocolDecl$MH().invokeExact(T, i);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getNumObjCTypeArgs$MH() {
+        return Index_h$constants_1.clang_Type_getNumObjCTypeArgs$MH();
+    }
+    public static int clang_Type_getNumObjCTypeArgs (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_Type_getNumObjCTypeArgs$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getObjCTypeArg$MH() {
+        return Index_h$constants_1.clang_Type_getObjCTypeArg$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getObjCTypeArg (jdk.incubator.foreign.MemorySegment T, int i) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getObjCTypeArg$MH().invokeExact(T, i);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isFunctionTypeVariadic$MH() {
+        return Index_h$constants_1.clang_isFunctionTypeVariadic$MH();
+    }
+    public static int clang_isFunctionTypeVariadic (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_isFunctionTypeVariadic$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorResultType$MH() {
+        return Index_h$constants_1.clang_getCursorResultType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorResultType (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorResultType$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorExceptionSpecificationType$MH() {
+        return Index_h$constants_1.clang_getCursorExceptionSpecificationType$MH();
+    }
+    public static int clang_getCursorExceptionSpecificationType (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_getCursorExceptionSpecificationType$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isPODType$MH() {
+        return Index_h$constants_1.clang_isPODType$MH();
+    }
+    public static int clang_isPODType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_isPODType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getElementType$MH() {
+        return Index_h$constants_1.clang_getElementType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getElementType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getElementType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getNumElements$MH() {
+        return Index_h$constants_1.clang_getNumElements$MH();
+    }
+    public static long clang_getNumElements (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (long)Index_h$constants_1.clang_getNumElements$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getArrayElementType$MH() {
+        return Index_h$constants_1.clang_getArrayElementType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getArrayElementType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getArrayElementType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getArraySize$MH() {
+        return Index_h$constants_1.clang_getArraySize$MH();
+    }
+    public static long clang_getArraySize (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (long)Index_h$constants_1.clang_getArraySize$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getNamedType$MH() {
+        return Index_h$constants_1.clang_Type_getNamedType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getNamedType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getNamedType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_isTransparentTagTypedef$MH() {
+        return Index_h$constants_1.clang_Type_isTransparentTagTypedef$MH();
+    }
+    public static int clang_Type_isTransparentTagTypedef (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_Type_isTransparentTagTypedef$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXTypeNullability_NonNull() {
+        return Index_h$constants_1.CXTypeNullability_NonNull();
+    }
+    public static int CXTypeNullability_Nullable() {
+        return Index_h$constants_1.CXTypeNullability_Nullable();
+    }
+    public static int CXTypeNullability_Unspecified() {
+        return Index_h$constants_1.CXTypeNullability_Unspecified();
+    }
+    public static int CXTypeNullability_Invalid() {
+        return Index_h$constants_1.CXTypeNullability_Invalid();
+    }
+    public static MethodHandle clang_Type_getNullability$MH() {
+        return Index_h$constants_1.clang_Type_getNullability$MH();
+    }
+    public static int clang_Type_getNullability (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_Type_getNullability$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXTypeLayoutError_Invalid() {
+        return Index_h$constants_1.CXTypeLayoutError_Invalid();
+    }
+    public static int CXTypeLayoutError_Incomplete() {
+        return Index_h$constants_1.CXTypeLayoutError_Incomplete();
+    }
+    public static int CXTypeLayoutError_Dependent() {
+        return Index_h$constants_1.CXTypeLayoutError_Dependent();
+    }
+    public static int CXTypeLayoutError_NotConstantSize() {
+        return Index_h$constants_1.CXTypeLayoutError_NotConstantSize();
+    }
+    public static int CXTypeLayoutError_InvalidFieldName() {
+        return Index_h$constants_1.CXTypeLayoutError_InvalidFieldName();
+    }
+    public static int CXTypeLayoutError_Undeduced() {
+        return Index_h$constants_1.CXTypeLayoutError_Undeduced();
+    }
+    public static MethodHandle clang_Type_getAlignOf$MH() {
+        return Index_h$constants_1.clang_Type_getAlignOf$MH();
+    }
+    public static long clang_Type_getAlignOf (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (long)Index_h$constants_1.clang_Type_getAlignOf$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getClassType$MH() {
+        return Index_h$constants_1.clang_Type_getClassType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getClassType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getClassType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getSizeOf$MH() {
+        return Index_h$constants_1.clang_Type_getSizeOf$MH();
+    }
+    public static long clang_Type_getSizeOf (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (long)Index_h$constants_1.clang_Type_getSizeOf$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getOffsetOf$MH() {
+        return Index_h$constants_1.clang_Type_getOffsetOf$MH();
+    }
+    public static long clang_Type_getOffsetOf (jdk.incubator.foreign.MemorySegment T, jdk.incubator.foreign.Addressable S) {
+        try {
+            return (long)Index_h$constants_1.clang_Type_getOffsetOf$MH().invokeExact(T, S.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getModifiedType$MH() {
+        return Index_h$constants_1.clang_Type_getModifiedType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getModifiedType (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getModifiedType$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getOffsetOfField$MH() {
+        return Index_h$constants_1.clang_Cursor_getOffsetOfField$MH();
+    }
+    public static long clang_Cursor_getOffsetOfField (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (long)Index_h$constants_1.clang_Cursor_getOffsetOfField$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isAnonymous$MH() {
+        return Index_h$constants_1.clang_Cursor_isAnonymous$MH();
+    }
+    public static int clang_Cursor_isAnonymous (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isAnonymous$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {
+        return Index_h$constants_1.clang_Cursor_isAnonymousRecordDecl$MH();
+    }
+    public static int clang_Cursor_isAnonymousRecordDecl (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isAnonymousRecordDecl$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isInlineNamespace$MH() {
+        return Index_h$constants_1.clang_Cursor_isInlineNamespace$MH();
+    }
+    public static int clang_Cursor_isInlineNamespace (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isInlineNamespace$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXRefQualifier_None() {
+        return Index_h$constants_1.CXRefQualifier_None();
+    }
+    public static int CXRefQualifier_LValue() {
+        return Index_h$constants_1.CXRefQualifier_LValue();
+    }
+    public static int CXRefQualifier_RValue() {
+        return Index_h$constants_1.CXRefQualifier_RValue();
+    }
+    public static MethodHandle clang_Type_getNumTemplateArguments$MH() {
+        return Index_h$constants_1.clang_Type_getNumTemplateArguments$MH();
+    }
+    public static int clang_Type_getNumTemplateArguments (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_Type_getNumTemplateArguments$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getTemplateArgumentAsType$MH() {
+        return Index_h$constants_1.clang_Type_getTemplateArgumentAsType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Type_getTemplateArgumentAsType (jdk.incubator.foreign.MemorySegment T, int i) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getTemplateArgumentAsType$MH().invokeExact(T, i);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Type_getCXXRefQualifier$MH() {
+        return Index_h$constants_1.clang_Type_getCXXRefQualifier$MH();
+    }
+    public static int clang_Type_getCXXRefQualifier (jdk.incubator.foreign.MemorySegment T) {
+        try {
+            return (int)Index_h$constants_1.clang_Type_getCXXRefQualifier$MH().invokeExact(T);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isBitField$MH() {
+        return Index_h$constants_1.clang_Cursor_isBitField$MH();
+    }
+    public static int clang_Cursor_isBitField (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isBitField$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isVirtualBase$MH() {
+        return Index_h$constants_1.clang_isVirtualBase$MH();
+    }
+    public static int clang_isVirtualBase (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_1.clang_isVirtualBase$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CX_CXXInvalidAccessSpecifier() {
+        return Index_h$constants_1.CX_CXXInvalidAccessSpecifier();
+    }
+    public static int CX_CXXPublic() {
+        return Index_h$constants_1.CX_CXXPublic();
+    }
+    public static int CX_CXXProtected() {
+        return Index_h$constants_1.CX_CXXProtected();
+    }
+    public static int CX_CXXPrivate() {
+        return Index_h$constants_1.CX_CXXPrivate();
+    }
+    public static MethodHandle clang_getCXXAccessSpecifier$MH() {
+        return Index_h$constants_1.clang_getCXXAccessSpecifier$MH();
+    }
+    public static int clang_getCXXAccessSpecifier (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_1.clang_getCXXAccessSpecifier$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CX_SC_Invalid() {
+        return Index_h$constants_1.CX_SC_Invalid();
+    }
+    public static int CX_SC_None() {
+        return Index_h$constants_1.CX_SC_None();
+    }
+    public static int CX_SC_Extern() {
+        return Index_h$constants_1.CX_SC_Extern();
+    }
+    public static int CX_SC_Static() {
+        return Index_h$constants_1.CX_SC_Static();
+    }
+    public static int CX_SC_PrivateExtern() {
+        return Index_h$constants_1.CX_SC_PrivateExtern();
+    }
+    public static int CX_SC_OpenCLWorkGroupLocal() {
+        return Index_h$constants_1.CX_SC_OpenCLWorkGroupLocal();
+    }
+    public static int CX_SC_Auto() {
+        return Index_h$constants_1.CX_SC_Auto();
+    }
+    public static int CX_SC_Register() {
+        return Index_h$constants_1.CX_SC_Register();
+    }
+    public static MethodHandle clang_Cursor_getStorageClass$MH() {
+        return Index_h$constants_1.clang_Cursor_getStorageClass$MH();
+    }
+    public static int clang_Cursor_getStorageClass (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_getStorageClass$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getNumOverloadedDecls$MH() {
+        return Index_h$constants_1.clang_getNumOverloadedDecls$MH();
+    }
+    public static int clang_getNumOverloadedDecls (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (int)Index_h$constants_1.clang_getNumOverloadedDecls$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getOverloadedDecl$MH() {
+        return Index_h$constants_1.clang_getOverloadedDecl$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getOverloadedDecl (jdk.incubator.foreign.MemorySegment cursor, int index) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getOverloadedDecl$MH().invokeExact(cursor, index);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getIBOutletCollectionType$MH() {
+        return Index_h$constants_1.clang_getIBOutletCollectionType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getIBOutletCollectionType (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getIBOutletCollectionType$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXChildVisit_Break() {
+        return Index_h$constants_1.CXChildVisit_Break();
+    }
+    public static int CXChildVisit_Continue() {
+        return Index_h$constants_1.CXChildVisit_Continue();
+    }
+    public static int CXChildVisit_Recurse() {
+        return Index_h$constants_1.CXChildVisit_Recurse();
+    }
+    public static MethodHandle clang_visitChildren$MH() {
+        return Index_h$constants_1.clang_visitChildren$MH();
+    }
+    public static int clang_visitChildren (jdk.incubator.foreign.MemorySegment parent, jdk.incubator.foreign.Addressable visitor, jdk.incubator.foreign.Addressable client_data) {
+        try {
+            return (int)Index_h$constants_1.clang_visitChildren$MH().invokeExact(parent, visitor.address(), client_data.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_visitChildren$visitor {
+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2);
+        public static MemorySegment allocate(clang_visitChildren$visitor fi) {
+            return RuntimeHelper.upcallStub(clang_visitChildren$visitor.class, fi, Index_h$constants_1.clang_visitChildren$visitor$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
+        }
+        public static MemorySegment allocate(clang_visitChildren$visitor fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static MethodHandle clang_visitTemplateSpecializations$MH() {
+        return Index_h$constants_1.clang_visitTemplateSpecializations$MH();
+    }
+    public static int clang_visitTemplateSpecializations (jdk.incubator.foreign.MemorySegment parent, jdk.incubator.foreign.Addressable visitor, jdk.incubator.foreign.Addressable client_data) {
+        try {
+            return (int)Index_h$constants_1.clang_visitTemplateSpecializations$MH().invokeExact(parent, visitor.address(), client_data.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_visitTemplateSpecializations$visitor {
+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2);
+        public static MemorySegment allocate(clang_visitTemplateSpecializations$visitor fi) {
+            return RuntimeHelper.upcallStub(clang_visitTemplateSpecializations$visitor.class, fi, Index_h$constants_1.clang_visitTemplateSpecializations$visitor$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
+        }
+        public static MemorySegment allocate(clang_visitTemplateSpecializations$visitor fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static MethodHandle clang_visitTemplateSpecializationChildren$MH() {
+        return Index_h$constants_1.clang_visitTemplateSpecializationChildren$MH();
+    }
+    public static int clang_visitTemplateSpecializationChildren (jdk.incubator.foreign.MemorySegment classTemplate, jdk.incubator.foreign.Addressable visitor, jdk.incubator.foreign.Addressable client_data) {
+        try {
+            return (int)Index_h$constants_1.clang_visitTemplateSpecializationChildren$MH().invokeExact(classTemplate, visitor.address(), client_data.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_visitTemplateSpecializationChildren$visitor {
+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2);
+        public static MemorySegment allocate(clang_visitTemplateSpecializationChildren$visitor fi) {
+            return RuntimeHelper.upcallStub(clang_visitTemplateSpecializationChildren$visitor.class, fi, Index_h$constants_1.clang_visitTemplateSpecializationChildren$visitor$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
+        }
+        public static MemorySegment allocate(clang_visitTemplateSpecializationChildren$visitor fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static MethodHandle clang_visitChildrenWithBlock$MH() {
+        return Index_h$constants_1.clang_visitChildrenWithBlock$MH();
+    }
+    public static int clang_visitChildrenWithBlock (jdk.incubator.foreign.MemorySegment parent, jdk.incubator.foreign.Addressable block) {
+        try {
+            return (int)Index_h$constants_1.clang_visitChildrenWithBlock$MH().invokeExact(parent, block.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_visitChildrenWithBlock$block {
+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);
+        public static MemorySegment allocate(clang_visitChildrenWithBlock$block fi) {
+            return RuntimeHelper.upcallStub(clang_visitChildrenWithBlock$block.class, fi, Index_h$constants_1.clang_visitChildrenWithBlock$block$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I");
+        }
+        public static MemorySegment allocate(clang_visitChildrenWithBlock$block fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static MethodHandle clang_getCursorUSR$MH() {
+        return Index_h$constants_1.clang_getCursorUSR$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorUSR (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorUSR$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_constructUSR_ObjCClass$MH() {
+        return Index_h$constants_1.clang_constructUSR_ObjCClass$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_constructUSR_ObjCClass (jdk.incubator.foreign.Addressable class_name) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCClass$MH().invokeExact(class_name.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_constructUSR_ObjCCategory$MH() {
+        return Index_h$constants_1.clang_constructUSR_ObjCCategory$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_constructUSR_ObjCCategory (jdk.incubator.foreign.Addressable class_name, jdk.incubator.foreign.Addressable category_name) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCCategory$MH().invokeExact(class_name.address(), category_name.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_constructUSR_ObjCProtocol$MH() {
+        return Index_h$constants_1.clang_constructUSR_ObjCProtocol$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_constructUSR_ObjCProtocol (jdk.incubator.foreign.Addressable protocol_name) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCProtocol$MH().invokeExact(protocol_name.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_constructUSR_ObjCIvar$MH() {
+        return Index_h$constants_1.clang_constructUSR_ObjCIvar$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_constructUSR_ObjCIvar (jdk.incubator.foreign.Addressable name, jdk.incubator.foreign.MemorySegment classUSR) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCIvar$MH().invokeExact(name.address(), classUSR);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_constructUSR_ObjCMethod$MH() {
+        return Index_h$constants_1.clang_constructUSR_ObjCMethod$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_constructUSR_ObjCMethod (jdk.incubator.foreign.Addressable name, int isInstanceMethod, jdk.incubator.foreign.MemorySegment classUSR) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCMethod$MH().invokeExact(name.address(), isInstanceMethod, classUSR);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_constructUSR_ObjCProperty$MH() {
+        return Index_h$constants_1.clang_constructUSR_ObjCProperty$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_constructUSR_ObjCProperty (jdk.incubator.foreign.Addressable property, jdk.incubator.foreign.MemorySegment classUSR) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCProperty$MH().invokeExact(property.address(), classUSR);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorSpelling$MH() {
+        return Index_h$constants_1.clang_getCursorSpelling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorSpelling (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorSpelling$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getSpellingNameRange$MH() {
+        return Index_h$constants_1.clang_Cursor_getSpellingNameRange$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getSpellingNameRange (jdk.incubator.foreign.MemorySegment x0, int pieceIndex, int options) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getSpellingNameRange$MH().invokeExact(x0, pieceIndex, options);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXPrintingPolicy_Indentation() {
+        return Index_h$constants_1.CXPrintingPolicy_Indentation();
+    }
+    public static int CXPrintingPolicy_SuppressSpecifiers() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressSpecifiers();
+    }
+    public static int CXPrintingPolicy_SuppressTagKeyword() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressTagKeyword();
+    }
+    public static int CXPrintingPolicy_IncludeTagDefinition() {
+        return Index_h$constants_1.CXPrintingPolicy_IncludeTagDefinition();
+    }
+    public static int CXPrintingPolicy_SuppressScope() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressScope();
+    }
+    public static int CXPrintingPolicy_SuppressUnwrittenScope() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressUnwrittenScope();
+    }
+    public static int CXPrintingPolicy_SuppressInitializers() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressInitializers();
+    }
+    public static int CXPrintingPolicy_ConstantArraySizeAsWritten() {
+        return Index_h$constants_1.CXPrintingPolicy_ConstantArraySizeAsWritten();
+    }
+    public static int CXPrintingPolicy_AnonymousTagLocations() {
+        return Index_h$constants_1.CXPrintingPolicy_AnonymousTagLocations();
+    }
+    public static int CXPrintingPolicy_SuppressStrongLifetime() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressStrongLifetime();
+    }
+    public static int CXPrintingPolicy_SuppressLifetimeQualifiers() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressLifetimeQualifiers();
+    }
+    public static int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors();
+    }
+    public static int CXPrintingPolicy_Bool() {
+        return Index_h$constants_1.CXPrintingPolicy_Bool();
+    }
+    public static int CXPrintingPolicy_Restrict() {
+        return Index_h$constants_1.CXPrintingPolicy_Restrict();
+    }
+    public static int CXPrintingPolicy_Alignof() {
+        return Index_h$constants_1.CXPrintingPolicy_Alignof();
+    }
+    public static int CXPrintingPolicy_UnderscoreAlignof() {
+        return Index_h$constants_1.CXPrintingPolicy_UnderscoreAlignof();
+    }
+    public static int CXPrintingPolicy_UseVoidForZeroParams() {
+        return Index_h$constants_1.CXPrintingPolicy_UseVoidForZeroParams();
+    }
+    public static int CXPrintingPolicy_TerseOutput() {
+        return Index_h$constants_1.CXPrintingPolicy_TerseOutput();
+    }
+    public static int CXPrintingPolicy_PolishForDeclaration() {
+        return Index_h$constants_1.CXPrintingPolicy_PolishForDeclaration();
+    }
+    public static int CXPrintingPolicy_Half() {
+        return Index_h$constants_1.CXPrintingPolicy_Half();
+    }
+    public static int CXPrintingPolicy_MSWChar() {
+        return Index_h$constants_1.CXPrintingPolicy_MSWChar();
+    }
+    public static int CXPrintingPolicy_IncludeNewlines() {
+        return Index_h$constants_1.CXPrintingPolicy_IncludeNewlines();
+    }
+    public static int CXPrintingPolicy_MSVCFormatting() {
+        return Index_h$constants_1.CXPrintingPolicy_MSVCFormatting();
+    }
+    public static int CXPrintingPolicy_ConstantsAsWritten() {
+        return Index_h$constants_1.CXPrintingPolicy_ConstantsAsWritten();
+    }
+    public static int CXPrintingPolicy_SuppressImplicitBase() {
+        return Index_h$constants_1.CXPrintingPolicy_SuppressImplicitBase();
+    }
+    public static int CXPrintingPolicy_FullyQualifiedName() {
+        return Index_h$constants_1.CXPrintingPolicy_FullyQualifiedName();
+    }
+    public static int CXPrintingPolicy_LastProperty() {
+        return Index_h$constants_1.CXPrintingPolicy_LastProperty();
+    }
+    public static MethodHandle clang_PrintingPolicy_getProperty$MH() {
+        return Index_h$constants_1.clang_PrintingPolicy_getProperty$MH();
+    }
+    public static int clang_PrintingPolicy_getProperty (jdk.incubator.foreign.Addressable Policy, int Property) {
+        try {
+            return (int)Index_h$constants_1.clang_PrintingPolicy_getProperty$MH().invokeExact(Policy.address(), Property);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {
+        return Index_h$constants_1.clang_PrintingPolicy_setProperty$MH();
+    }
+    public static void clang_PrintingPolicy_setProperty (jdk.incubator.foreign.Addressable Policy, int Property, int Value) {
+        try {
+            Index_h$constants_1.clang_PrintingPolicy_setProperty$MH().invokeExact(Policy.address(), Property, Value);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorPrintingPolicy$MH() {
+        return Index_h$constants_1.clang_getCursorPrintingPolicy$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getCursorPrintingPolicy (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getCursorPrintingPolicy$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_PrintingPolicy_dispose$MH() {
+        return Index_h$constants_1.clang_PrintingPolicy_dispose$MH();
+    }
+    public static void clang_PrintingPolicy_dispose (jdk.incubator.foreign.Addressable Policy) {
+        try {
+            Index_h$constants_1.clang_PrintingPolicy_dispose$MH().invokeExact(Policy.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorPrettyPrinted$MH() {
+        return Index_h$constants_1.clang_getCursorPrettyPrinted$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorPrettyPrinted (jdk.incubator.foreign.MemorySegment Cursor, jdk.incubator.foreign.Addressable Policy) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorPrettyPrinted$MH().invokeExact(Cursor, Policy.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTypePrintingPolicy$MH() {
+        return Index_h$constants_1.clang_getTypePrintingPolicy$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getTypePrintingPolicy (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getTypePrintingPolicy$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTypePrettyPrinted$MH() {
+        return Index_h$constants_1.clang_getTypePrettyPrinted$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTypePrettyPrinted (jdk.incubator.foreign.MemorySegment CT, jdk.incubator.foreign.Addressable Policy) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTypePrettyPrinted$MH().invokeExact(CT, Policy.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorDisplayName$MH() {
+        return Index_h$constants_1.clang_getCursorDisplayName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorDisplayName (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorDisplayName$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorReferenced$MH() {
+        return Index_h$constants_1.clang_getCursorReferenced$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorReferenced (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorReferenced$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorDefinition$MH() {
+        return Index_h$constants_1.clang_getCursorDefinition$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorDefinition (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorDefinition$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_isCursorDefinition$MH() {
+        return Index_h$constants_1.clang_isCursorDefinition$MH();
+    }
+    public static int clang_isCursorDefinition (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_1.clang_isCursorDefinition$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCanonicalCursor$MH() {
+        return Index_h$constants_1.clang_getCanonicalCursor$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCanonicalCursor (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCanonicalCursor$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getObjCSelectorIndex$MH() {
+        return Index_h$constants_1.clang_Cursor_getObjCSelectorIndex$MH();
+    }
+    public static int clang_Cursor_getObjCSelectorIndex (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_getObjCSelectorIndex$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isDynamicCall$MH() {
+        return Index_h$constants_1.clang_Cursor_isDynamicCall$MH();
+    }
+    public static int clang_Cursor_isDynamicCall (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isDynamicCall$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getReceiverType$MH() {
+        return Index_h$constants_1.clang_Cursor_getReceiverType$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getReceiverType (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getReceiverType$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXObjCPropertyAttr_noattr() {
+        return Index_h$constants_1.CXObjCPropertyAttr_noattr();
+    }
+    public static int CXObjCPropertyAttr_readonly() {
+        return Index_h$constants_1.CXObjCPropertyAttr_readonly();
+    }
+    public static int CXObjCPropertyAttr_getter() {
+        return Index_h$constants_1.CXObjCPropertyAttr_getter();
+    }
+    public static int CXObjCPropertyAttr_assign() {
+        return Index_h$constants_1.CXObjCPropertyAttr_assign();
+    }
+    public static int CXObjCPropertyAttr_readwrite() {
+        return Index_h$constants_1.CXObjCPropertyAttr_readwrite();
+    }
+    public static int CXObjCPropertyAttr_retain() {
+        return Index_h$constants_1.CXObjCPropertyAttr_retain();
+    }
+    public static int CXObjCPropertyAttr_copy() {
+        return Index_h$constants_1.CXObjCPropertyAttr_copy();
+    }
+    public static int CXObjCPropertyAttr_nonatomic() {
+        return Index_h$constants_1.CXObjCPropertyAttr_nonatomic();
+    }
+    public static int CXObjCPropertyAttr_setter() {
+        return Index_h$constants_1.CXObjCPropertyAttr_setter();
+    }
+    public static int CXObjCPropertyAttr_atomic() {
+        return Index_h$constants_1.CXObjCPropertyAttr_atomic();
+    }
+    public static int CXObjCPropertyAttr_weak() {
+        return Index_h$constants_1.CXObjCPropertyAttr_weak();
+    }
+    public static int CXObjCPropertyAttr_strong() {
+        return Index_h$constants_1.CXObjCPropertyAttr_strong();
+    }
+    public static int CXObjCPropertyAttr_unsafe_unretained() {
+        return Index_h$constants_1.CXObjCPropertyAttr_unsafe_unretained();
+    }
+    public static int CXObjCPropertyAttr_class() {
+        return Index_h$constants_1.CXObjCPropertyAttr_class();
+    }
+    public static MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() {
+        return Index_h$constants_1.clang_Cursor_getObjCPropertyAttributes$MH();
+    }
+    public static int clang_Cursor_getObjCPropertyAttributes (jdk.incubator.foreign.MemorySegment C, int reserved) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_getObjCPropertyAttributes$MH().invokeExact(C, reserved);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() {
+        return Index_h$constants_1.clang_Cursor_getObjCPropertyGetterName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getObjCPropertyGetterName (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getObjCPropertyGetterName$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getObjCPropertySetterName$MH() {
+        return Index_h$constants_1.clang_Cursor_getObjCPropertySetterName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getObjCPropertySetterName (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getObjCPropertySetterName$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXObjCDeclQualifier_None() {
+        return Index_h$constants_1.CXObjCDeclQualifier_None();
+    }
+    public static int CXObjCDeclQualifier_In() {
+        return Index_h$constants_1.CXObjCDeclQualifier_In();
+    }
+    public static int CXObjCDeclQualifier_Inout() {
+        return Index_h$constants_1.CXObjCDeclQualifier_Inout();
+    }
+    public static int CXObjCDeclQualifier_Out() {
+        return Index_h$constants_1.CXObjCDeclQualifier_Out();
+    }
+    public static int CXObjCDeclQualifier_Bycopy() {
+        return Index_h$constants_1.CXObjCDeclQualifier_Bycopy();
+    }
+    public static int CXObjCDeclQualifier_Byref() {
+        return Index_h$constants_1.CXObjCDeclQualifier_Byref();
+    }
+    public static int CXObjCDeclQualifier_Oneway() {
+        return Index_h$constants_1.CXObjCDeclQualifier_Oneway();
+    }
+    public static MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() {
+        return Index_h$constants_1.clang_Cursor_getObjCDeclQualifiers$MH();
+    }
+    public static int clang_Cursor_getObjCDeclQualifiers (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_getObjCDeclQualifiers$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isObjCOptional$MH() {
+        return Index_h$constants_1.clang_Cursor_isObjCOptional$MH();
+    }
+    public static int clang_Cursor_isObjCOptional (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isObjCOptional$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isVariadic$MH() {
+        return Index_h$constants_1.clang_Cursor_isVariadic$MH();
+    }
+    public static int clang_Cursor_isVariadic (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isVariadic$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_isExternalSymbol$MH() {
+        return Index_h$constants_1.clang_Cursor_isExternalSymbol$MH();
+    }
+    public static int clang_Cursor_isExternalSymbol (jdk.incubator.foreign.MemorySegment C, jdk.incubator.foreign.Addressable language, jdk.incubator.foreign.Addressable definedIn, jdk.incubator.foreign.Addressable isGenerated) {
+        try {
+            return (int)Index_h$constants_1.clang_Cursor_isExternalSymbol$MH().invokeExact(C, language.address(), definedIn.address(), isGenerated.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getCommentRange$MH() {
+        return Index_h$constants_1.clang_Cursor_getCommentRange$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getCommentRange (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getCommentRange$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getRawCommentText$MH() {
+        return Index_h$constants_1.clang_Cursor_getRawCommentText$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getRawCommentText (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getRawCommentText$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getBriefCommentText$MH() {
+        return Index_h$constants_1.clang_Cursor_getBriefCommentText$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getBriefCommentText (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getBriefCommentText$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getMangling$MH() {
+        return Index_h$constants_1.clang_Cursor_getMangling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Cursor_getMangling (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getMangling$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getCXXManglings$MH() {
+        return Index_h$constants_1.clang_Cursor_getCXXManglings$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Cursor_getCXXManglings (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_getCXXManglings$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getObjCManglings$MH() {
+        return Index_h$constants_1.clang_Cursor_getObjCManglings$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Cursor_getObjCManglings (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_getObjCManglings$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Cursor_getModule$MH() {
+        return Index_h$constants_1.clang_Cursor_getModule$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Cursor_getModule (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_getModule$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getModuleForFile$MH() {
+        return Index_h$constants_1.clang_getModuleForFile$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getModuleForFile (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getModuleForFile$MH().invokeExact(x0.address(), x1.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Module_getASTFile$MH() {
+        return Index_h$constants_1.clang_Module_getASTFile$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Module_getASTFile (jdk.incubator.foreign.Addressable Module) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Module_getASTFile$MH().invokeExact(Module.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Module_getParent$MH() {
+        return Index_h$constants_1.clang_Module_getParent$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Module_getParent (jdk.incubator.foreign.Addressable Module) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Module_getParent$MH().invokeExact(Module.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Module_getName$MH() {
+        return Index_h$constants_1.clang_Module_getName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Module_getName (jdk.incubator.foreign.Addressable Module) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Module_getName$MH().invokeExact(Module.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Module_getFullName$MH() {
+        return Index_h$constants_1.clang_Module_getFullName$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_Module_getFullName (jdk.incubator.foreign.Addressable Module) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Module_getFullName$MH().invokeExact(Module.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Module_isSystem$MH() {
+        return Index_h$constants_1.clang_Module_isSystem$MH();
+    }
+    public static int clang_Module_isSystem (jdk.incubator.foreign.Addressable Module) {
+        try {
+            return (int)Index_h$constants_1.clang_Module_isSystem$MH().invokeExact(Module.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Module_getNumTopLevelHeaders$MH() {
+        return Index_h$constants_1.clang_Module_getNumTopLevelHeaders$MH();
+    }
+    public static int clang_Module_getNumTopLevelHeaders (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable Module) {
+        try {
+            return (int)Index_h$constants_1.clang_Module_getNumTopLevelHeaders$MH().invokeExact(x0.address(), Module.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_Module_getTopLevelHeader$MH() {
+        return Index_h$constants_1.clang_Module_getTopLevelHeader$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Module_getTopLevelHeader (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable Module, int Index) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Module_getTopLevelHeader$MH().invokeExact(x0.address(), Module.address(), Index);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() {
+        return Index_h$constants_1.clang_CXXConstructor_isConvertingConstructor$MH();
+    }
+    public static int clang_CXXConstructor_isConvertingConstructor (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXConstructor_isConvertingConstructor$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXConstructor_isCopyConstructor$MH() {
+        return Index_h$constants_1.clang_CXXConstructor_isCopyConstructor$MH();
+    }
+    public static int clang_CXXConstructor_isCopyConstructor (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXConstructor_isCopyConstructor$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXConstructor_isDefaultConstructor$MH() {
+        return Index_h$constants_1.clang_CXXConstructor_isDefaultConstructor$MH();
+    }
+    public static int clang_CXXConstructor_isDefaultConstructor (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXConstructor_isDefaultConstructor$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXConstructor_isMoveConstructor$MH() {
+        return Index_h$constants_1.clang_CXXConstructor_isMoveConstructor$MH();
+    }
+    public static int clang_CXXConstructor_isMoveConstructor (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXConstructor_isMoveConstructor$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXField_isMutable$MH() {
+        return Index_h$constants_1.clang_CXXField_isMutable$MH();
+    }
+    public static int clang_CXXField_isMutable (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXField_isMutable$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXMethod_isDefaulted$MH() {
+        return Index_h$constants_1.clang_CXXMethod_isDefaulted$MH();
+    }
+    public static int clang_CXXMethod_isDefaulted (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXMethod_isDefaulted$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXMethod_isPureVirtual$MH() {
+        return Index_h$constants_1.clang_CXXMethod_isPureVirtual$MH();
+    }
+    public static int clang_CXXMethod_isPureVirtual (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXMethod_isPureVirtual$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXMethod_isStatic$MH() {
+        return Index_h$constants_1.clang_CXXMethod_isStatic$MH();
+    }
+    public static int clang_CXXMethod_isStatic (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXMethod_isStatic$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXMethod_isVirtual$MH() {
+        return Index_h$constants_1.clang_CXXMethod_isVirtual$MH();
+    }
+    public static int clang_CXXMethod_isVirtual (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXMethod_isVirtual$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXRecord_isAbstract$MH() {
+        return Index_h$constants_1.clang_CXXRecord_isAbstract$MH();
+    }
+    public static int clang_CXXRecord_isAbstract (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXRecord_isAbstract$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EnumDecl_isScoped$MH() {
+        return Index_h$constants_1.clang_EnumDecl_isScoped$MH();
+    }
+    public static int clang_EnumDecl_isScoped (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_EnumDecl_isScoped$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_CXXMethod_isConst$MH() {
+        return Index_h$constants_1.clang_CXXMethod_isConst$MH();
+    }
+    public static int clang_CXXMethod_isConst (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_CXXMethod_isConst$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTemplateCursorKind$MH() {
+        return Index_h$constants_1.clang_getTemplateCursorKind$MH();
+    }
+    public static int clang_getTemplateCursorKind (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_getTemplateCursorKind$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTemplateSpecializationKind$MH() {
+        return Index_h$constants_1.clang_getTemplateSpecializationKind$MH();
+    }
+    public static int clang_getTemplateSpecializationKind (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (int)Index_h$constants_1.clang_getTemplateSpecializationKind$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getSpecializedCursorTemplate$MH() {
+        return Index_h$constants_1.clang_getSpecializedCursorTemplate$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getSpecializedCursorTemplate (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getSpecializedCursorTemplate$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorReferenceNameRange$MH() {
+        return Index_h$constants_1.clang_getCursorReferenceNameRange$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorReferenceNameRange (jdk.incubator.foreign.MemorySegment C, int NameFlags, int PieceIndex) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorReferenceNameRange$MH().invokeExact(C, NameFlags, PieceIndex);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXNameRange_WantQualifier() {
+        return Index_h$constants_1.CXNameRange_WantQualifier();
+    }
+    public static int CXNameRange_WantTemplateArgs() {
+        return Index_h$constants_1.CXNameRange_WantTemplateArgs();
+    }
+    public static int CXNameRange_WantSinglePiece() {
+        return Index_h$constants_1.CXNameRange_WantSinglePiece();
+    }
+    public static int CXToken_Punctuation() {
+        return Index_h$constants_1.CXToken_Punctuation();
+    }
+    public static int CXToken_Keyword() {
+        return Index_h$constants_1.CXToken_Keyword();
+    }
+    public static int CXToken_Identifier() {
+        return Index_h$constants_1.CXToken_Identifier();
+    }
+    public static int CXToken_Literal() {
+        return Index_h$constants_1.CXToken_Literal();
+    }
+    public static int CXToken_Comment() {
+        return Index_h$constants_1.CXToken_Comment();
+    }
+    public static class CXToken {
+
+        private CXToken() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXToken$struct$LAYOUT();
+        }
+        public static MemorySegment int_data$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
+        }
+        public static VarHandle ptr_data$VH() {
+            return Index_h$constants_1.ptr_data$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress ptr_data$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.ptr_data$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress ptr_data$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.ptr_data$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void ptr_data$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.ptr_data$VH().set(seg, x);
+        }
+        public static void ptr_data$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.ptr_data$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getToken$MH() {
+        return Index_h$constants_1.clang_getToken$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getToken (jdk.incubator.foreign.Addressable TU, jdk.incubator.foreign.MemorySegment Location) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getToken$MH().invokeExact(TU.address(), Location);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTokenKind$MH() {
+        return Index_h$constants_1.clang_getTokenKind$MH();
+    }
+    public static int clang_getTokenKind (jdk.incubator.foreign.MemorySegment x0) {
+        try {
+            return (int)Index_h$constants_1.clang_getTokenKind$MH().invokeExact(x0);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTokenSpelling$MH() {
+        return Index_h$constants_1.clang_getTokenSpelling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTokenSpelling (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.MemorySegment x1) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTokenSpelling$MH().invokeExact(x0.address(), x1);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTokenLocation$MH() {
+        return Index_h$constants_1.clang_getTokenLocation$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTokenLocation (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.MemorySegment x1) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTokenLocation$MH().invokeExact(x0.address(), x1);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getTokenExtent$MH() {
+        return Index_h$constants_1.clang_getTokenExtent$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getTokenExtent (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.MemorySegment x1) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTokenExtent$MH().invokeExact(x0.address(), x1);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_tokenize$MH() {
+        return Index_h$constants_1.clang_tokenize$MH();
+    }
+    public static void clang_tokenize (jdk.incubator.foreign.Addressable TU, jdk.incubator.foreign.MemorySegment Range, jdk.incubator.foreign.Addressable Tokens, jdk.incubator.foreign.Addressable NumTokens) {
+        try {
+            Index_h$constants_1.clang_tokenize$MH().invokeExact(TU.address(), Range, Tokens.address(), NumTokens.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_annotateTokens$MH() {
+        return Index_h$constants_1.clang_annotateTokens$MH();
+    }
+    public static void clang_annotateTokens (jdk.incubator.foreign.Addressable TU, jdk.incubator.foreign.Addressable Tokens, int NumTokens, jdk.incubator.foreign.Addressable Cursors) {
+        try {
+            Index_h$constants_1.clang_annotateTokens$MH().invokeExact(TU.address(), Tokens.address(), NumTokens, Cursors.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_disposeTokens$MH() {
+        return Index_h$constants_1.clang_disposeTokens$MH();
+    }
+    public static void clang_disposeTokens (jdk.incubator.foreign.Addressable TU, jdk.incubator.foreign.Addressable Tokens, int NumTokens) {
+        try {
+            Index_h$constants_1.clang_disposeTokens$MH().invokeExact(TU.address(), Tokens.address(), NumTokens);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorKindSpelling$MH() {
+        return Index_h$constants_1.clang_getCursorKindSpelling$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCursorKindSpelling (int Kind) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorKindSpelling$MH().invokeExact(Kind);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getDefinitionSpellingAndExtent$MH() {
+        return Index_h$constants_1.clang_getDefinitionSpellingAndExtent$MH();
+    }
+    public static void clang_getDefinitionSpellingAndExtent (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.Addressable startBuf, jdk.incubator.foreign.Addressable endBuf, jdk.incubator.foreign.Addressable startLine, jdk.incubator.foreign.Addressable startColumn, jdk.incubator.foreign.Addressable endLine, jdk.incubator.foreign.Addressable endColumn) {
+        try {
+            Index_h$constants_1.clang_getDefinitionSpellingAndExtent$MH().invokeExact(x0, startBuf.address(), endBuf.address(), startLine.address(), startColumn.address(), endLine.address(), endColumn.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_enableStackTraces$MH() {
+        return Index_h$constants_1.clang_enableStackTraces$MH();
+    }
+    public static void clang_enableStackTraces () {
+        try {
+            Index_h$constants_1.clang_enableStackTraces$MH().invokeExact();
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_executeOnThread$MH() {
+        return Index_h$constants_1.clang_executeOnThread$MH();
+    }
+    public static void clang_executeOnThread (jdk.incubator.foreign.Addressable fn, jdk.incubator.foreign.Addressable user_data, int stack_size) {
+        try {
+            Index_h$constants_1.clang_executeOnThread$MH().invokeExact(fn.address(), user_data.address(), stack_size);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_executeOnThread$fn {
+        void apply(jdk.incubator.foreign.MemoryAddress x0);
+        public static MemorySegment allocate(clang_executeOnThread$fn fi) {
+            return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, Index_h$constants_1.clang_executeOnThread$fn$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
+        }
+        public static MemorySegment allocate(clang_executeOnThread$fn fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static class CXCompletionResult {
+
+        private CXCompletionResult() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXCompletionResult$struct$LAYOUT();
+        }
+        public static VarHandle CursorKind$VH() {
+            return Index_h$constants_1.CursorKind$VH();
+        }
+        public static int CursorKind$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.CursorKind$VH().get(seg);
+        }
+        public static int CursorKind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.CursorKind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void CursorKind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.CursorKind$VH().set(seg, x);
+        }
+        public static void CursorKind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.CursorKind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle CompletionString$VH() {
+            return Index_h$constants_1.CompletionString$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress CompletionString$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CompletionString$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress CompletionString$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CompletionString$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void CompletionString$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.CompletionString$VH().set(seg, x);
+        }
+        public static void CompletionString$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.CompletionString$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static int CXCompletionChunk_Optional() {
+        return Index_h$constants_1.CXCompletionChunk_Optional();
+    }
+    public static int CXCompletionChunk_TypedText() {
+        return Index_h$constants_1.CXCompletionChunk_TypedText();
+    }
+    public static int CXCompletionChunk_Text() {
+        return Index_h$constants_1.CXCompletionChunk_Text();
+    }
+    public static int CXCompletionChunk_Placeholder() {
+        return Index_h$constants_1.CXCompletionChunk_Placeholder();
+    }
+    public static int CXCompletionChunk_Informative() {
+        return Index_h$constants_1.CXCompletionChunk_Informative();
+    }
+    public static int CXCompletionChunk_CurrentParameter() {
+        return Index_h$constants_1.CXCompletionChunk_CurrentParameter();
+    }
+    public static int CXCompletionChunk_LeftParen() {
+        return Index_h$constants_1.CXCompletionChunk_LeftParen();
+    }
+    public static int CXCompletionChunk_RightParen() {
+        return Index_h$constants_1.CXCompletionChunk_RightParen();
+    }
+    public static int CXCompletionChunk_LeftBracket() {
+        return Index_h$constants_1.CXCompletionChunk_LeftBracket();
+    }
+    public static int CXCompletionChunk_RightBracket() {
+        return Index_h$constants_1.CXCompletionChunk_RightBracket();
+    }
+    public static int CXCompletionChunk_LeftBrace() {
+        return Index_h$constants_1.CXCompletionChunk_LeftBrace();
+    }
+    public static int CXCompletionChunk_RightBrace() {
+        return Index_h$constants_1.CXCompletionChunk_RightBrace();
+    }
+    public static int CXCompletionChunk_LeftAngle() {
+        return Index_h$constants_1.CXCompletionChunk_LeftAngle();
+    }
+    public static int CXCompletionChunk_RightAngle() {
+        return Index_h$constants_1.CXCompletionChunk_RightAngle();
+    }
+    public static int CXCompletionChunk_Comma() {
+        return Index_h$constants_1.CXCompletionChunk_Comma();
+    }
+    public static int CXCompletionChunk_ResultType() {
+        return Index_h$constants_1.CXCompletionChunk_ResultType();
+    }
+    public static int CXCompletionChunk_Colon() {
+        return Index_h$constants_1.CXCompletionChunk_Colon();
+    }
+    public static int CXCompletionChunk_SemiColon() {
+        return Index_h$constants_1.CXCompletionChunk_SemiColon();
+    }
+    public static int CXCompletionChunk_Equal() {
+        return Index_h$constants_1.CXCompletionChunk_Equal();
+    }
+    public static int CXCompletionChunk_HorizontalSpace() {
+        return Index_h$constants_1.CXCompletionChunk_HorizontalSpace();
+    }
+    public static int CXCompletionChunk_VerticalSpace() {
+        return Index_h$constants_1.CXCompletionChunk_VerticalSpace();
+    }
+    public static MethodHandle clang_getCompletionChunkKind$MH() {
+        return Index_h$constants_1.clang_getCompletionChunkKind$MH();
+    }
+    public static int clang_getCompletionChunkKind (jdk.incubator.foreign.Addressable completion_string, int chunk_number) {
+        try {
+            return (int)Index_h$constants_1.clang_getCompletionChunkKind$MH().invokeExact(completion_string.address(), chunk_number);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionChunkText$MH() {
+        return Index_h$constants_1.clang_getCompletionChunkText$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCompletionChunkText (jdk.incubator.foreign.Addressable completion_string, int chunk_number) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionChunkText$MH().invokeExact(completion_string.address(), chunk_number);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionChunkCompletionString$MH() {
+        return Index_h$constants_1.clang_getCompletionChunkCompletionString$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getCompletionChunkCompletionString (jdk.incubator.foreign.Addressable completion_string, int chunk_number) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getCompletionChunkCompletionString$MH().invokeExact(completion_string.address(), chunk_number);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getNumCompletionChunks$MH() {
+        return Index_h$constants_1.clang_getNumCompletionChunks$MH();
+    }
+    public static int clang_getNumCompletionChunks (jdk.incubator.foreign.Addressable completion_string) {
+        try {
+            return (int)Index_h$constants_1.clang_getNumCompletionChunks$MH().invokeExact(completion_string.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionPriority$MH() {
+        return Index_h$constants_1.clang_getCompletionPriority$MH();
+    }
+    public static int clang_getCompletionPriority (jdk.incubator.foreign.Addressable completion_string) {
+        try {
+            return (int)Index_h$constants_1.clang_getCompletionPriority$MH().invokeExact(completion_string.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionAvailability$MH() {
+        return Index_h$constants_1.clang_getCompletionAvailability$MH();
+    }
+    public static int clang_getCompletionAvailability (jdk.incubator.foreign.Addressable completion_string) {
+        try {
+            return (int)Index_h$constants_1.clang_getCompletionAvailability$MH().invokeExact(completion_string.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionNumAnnotations$MH() {
+        return Index_h$constants_1.clang_getCompletionNumAnnotations$MH();
+    }
+    public static int clang_getCompletionNumAnnotations (jdk.incubator.foreign.Addressable completion_string) {
+        try {
+            return (int)Index_h$constants_1.clang_getCompletionNumAnnotations$MH().invokeExact(completion_string.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionAnnotation$MH() {
+        return Index_h$constants_1.clang_getCompletionAnnotation$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCompletionAnnotation (jdk.incubator.foreign.Addressable completion_string, int annotation_number) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionAnnotation$MH().invokeExact(completion_string.address(), annotation_number);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionParent$MH() {
+        return Index_h$constants_1.clang_getCompletionParent$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCompletionParent (jdk.incubator.foreign.Addressable completion_string, jdk.incubator.foreign.Addressable kind) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionParent$MH().invokeExact(completion_string.address(), kind.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionBriefComment$MH() {
+        return Index_h$constants_1.clang_getCompletionBriefComment$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCompletionBriefComment (jdk.incubator.foreign.Addressable completion_string) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionBriefComment$MH().invokeExact(completion_string.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCursorCompletionString$MH() {
+        return Index_h$constants_1.clang_getCursorCompletionString$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getCursorCompletionString (jdk.incubator.foreign.MemorySegment cursor) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getCursorCompletionString$MH().invokeExact(cursor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static class CXCodeCompleteResults {
+
+        private CXCodeCompleteResults() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXCodeCompleteResults$struct$LAYOUT();
+        }
+        public static VarHandle Results$VH() {
+            return Index_h$constants_1.Results$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress Results$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.Results$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress Results$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.Results$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void Results$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.Results$VH().set(seg, x);
+        }
+        public static void Results$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.Results$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle NumResults$VH() {
+            return Index_h$constants_1.NumResults$VH();
+        }
+        public static int NumResults$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.NumResults$VH().get(seg);
+        }
+        public static int NumResults$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.NumResults$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void NumResults$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.NumResults$VH().set(seg, x);
+        }
+        public static void NumResults$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.NumResults$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static MethodHandle clang_getCompletionNumFixIts$MH() {
+        return Index_h$constants_1.clang_getCompletionNumFixIts$MH();
+    }
+    public static int clang_getCompletionNumFixIts (jdk.incubator.foreign.Addressable results, int completion_index) {
+        try {
+            return (int)Index_h$constants_1.clang_getCompletionNumFixIts$MH().invokeExact(results.address(), completion_index);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getCompletionFixIt$MH() {
+        return Index_h$constants_1.clang_getCompletionFixIt$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getCompletionFixIt (jdk.incubator.foreign.Addressable results, int completion_index, int fixit_index, jdk.incubator.foreign.Addressable replacement_range) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionFixIt$MH().invokeExact(results.address(), completion_index, fixit_index, replacement_range.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXCodeComplete_IncludeMacros() {
+        return Index_h$constants_1.CXCodeComplete_IncludeMacros();
+    }
+    public static int CXCodeComplete_IncludeCodePatterns() {
+        return Index_h$constants_1.CXCodeComplete_IncludeCodePatterns();
+    }
+    public static int CXCodeComplete_IncludeBriefComments() {
+        return Index_h$constants_1.CXCodeComplete_IncludeBriefComments();
+    }
+    public static int CXCodeComplete_SkipPreamble() {
+        return Index_h$constants_1.CXCodeComplete_SkipPreamble();
+    }
+    public static int CXCodeComplete_IncludeCompletionsWithFixIts() {
+        return Index_h$constants_1.CXCodeComplete_IncludeCompletionsWithFixIts();
+    }
+    public static int CXCompletionContext_Unexposed() {
+        return Index_h$constants_1.CXCompletionContext_Unexposed();
+    }
+    public static int CXCompletionContext_AnyType() {
+        return Index_h$constants_1.CXCompletionContext_AnyType();
+    }
+    public static int CXCompletionContext_AnyValue() {
+        return Index_h$constants_1.CXCompletionContext_AnyValue();
+    }
+    public static int CXCompletionContext_ObjCObjectValue() {
+        return Index_h$constants_1.CXCompletionContext_ObjCObjectValue();
+    }
+    public static int CXCompletionContext_ObjCSelectorValue() {
+        return Index_h$constants_1.CXCompletionContext_ObjCSelectorValue();
+    }
+    public static int CXCompletionContext_CXXClassTypeValue() {
+        return Index_h$constants_1.CXCompletionContext_CXXClassTypeValue();
+    }
+    public static int CXCompletionContext_DotMemberAccess() {
+        return Index_h$constants_1.CXCompletionContext_DotMemberAccess();
+    }
+    public static int CXCompletionContext_ArrowMemberAccess() {
+        return Index_h$constants_1.CXCompletionContext_ArrowMemberAccess();
+    }
+    public static int CXCompletionContext_ObjCPropertyAccess() {
+        return Index_h$constants_1.CXCompletionContext_ObjCPropertyAccess();
+    }
+    public static int CXCompletionContext_EnumTag() {
+        return Index_h$constants_1.CXCompletionContext_EnumTag();
+    }
+    public static int CXCompletionContext_UnionTag() {
+        return Index_h$constants_1.CXCompletionContext_UnionTag();
+    }
+    public static int CXCompletionContext_StructTag() {
+        return Index_h$constants_1.CXCompletionContext_StructTag();
+    }
+    public static int CXCompletionContext_ClassTag() {
+        return Index_h$constants_1.CXCompletionContext_ClassTag();
+    }
+    public static int CXCompletionContext_Namespace() {
+        return Index_h$constants_1.CXCompletionContext_Namespace();
+    }
+    public static int CXCompletionContext_NestedNameSpecifier() {
+        return Index_h$constants_1.CXCompletionContext_NestedNameSpecifier();
+    }
+    public static int CXCompletionContext_ObjCInterface() {
+        return Index_h$constants_1.CXCompletionContext_ObjCInterface();
+    }
+    public static int CXCompletionContext_ObjCProtocol() {
+        return Index_h$constants_1.CXCompletionContext_ObjCProtocol();
+    }
+    public static int CXCompletionContext_ObjCCategory() {
+        return Index_h$constants_1.CXCompletionContext_ObjCCategory();
+    }
+    public static int CXCompletionContext_ObjCInstanceMessage() {
+        return Index_h$constants_1.CXCompletionContext_ObjCInstanceMessage();
+    }
+    public static int CXCompletionContext_ObjCClassMessage() {
+        return Index_h$constants_1.CXCompletionContext_ObjCClassMessage();
+    }
+    public static int CXCompletionContext_ObjCSelectorName() {
+        return Index_h$constants_1.CXCompletionContext_ObjCSelectorName();
+    }
+    public static int CXCompletionContext_MacroName() {
+        return Index_h$constants_1.CXCompletionContext_MacroName();
+    }
+    public static int CXCompletionContext_NaturalLanguage() {
+        return Index_h$constants_1.CXCompletionContext_NaturalLanguage();
+    }
+    public static int CXCompletionContext_IncludedFile() {
+        return Index_h$constants_1.CXCompletionContext_IncludedFile();
+    }
+    public static int CXCompletionContext_Unknown() {
+        return Index_h$constants_1.CXCompletionContext_Unknown();
+    }
+    public static MethodHandle clang_defaultCodeCompleteOptions$MH() {
+        return Index_h$constants_1.clang_defaultCodeCompleteOptions$MH();
+    }
+    public static int clang_defaultCodeCompleteOptions () {
+        try {
+            return (int)Index_h$constants_1.clang_defaultCodeCompleteOptions$MH().invokeExact();
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_codeCompleteAt$MH() {
+        return Index_h$constants_1.clang_codeCompleteAt$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_codeCompleteAt (jdk.incubator.foreign.Addressable TU, jdk.incubator.foreign.Addressable complete_filename, int complete_line, int complete_column, jdk.incubator.foreign.Addressable unsaved_files, int num_unsaved_files, int options) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_codeCompleteAt$MH().invokeExact(TU.address(), complete_filename.address(), complete_line, complete_column, unsaved_files.address(), num_unsaved_files, options);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_sortCodeCompletionResults$MH() {
+        return Index_h$constants_1.clang_sortCodeCompletionResults$MH();
+    }
+    public static void clang_sortCodeCompletionResults (jdk.incubator.foreign.Addressable Results, int NumResults) {
+        try {
+            Index_h$constants_1.clang_sortCodeCompletionResults$MH().invokeExact(Results.address(), NumResults);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_disposeCodeCompleteResults$MH() {
+        return Index_h$constants_1.clang_disposeCodeCompleteResults$MH();
+    }
+    public static void clang_disposeCodeCompleteResults (jdk.incubator.foreign.Addressable Results) {
+        try {
+            Index_h$constants_1.clang_disposeCodeCompleteResults$MH().invokeExact(Results.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_codeCompleteGetNumDiagnostics$MH() {
+        return Index_h$constants_1.clang_codeCompleteGetNumDiagnostics$MH();
+    }
+    public static int clang_codeCompleteGetNumDiagnostics (jdk.incubator.foreign.Addressable Results) {
+        try {
+            return (int)Index_h$constants_1.clang_codeCompleteGetNumDiagnostics$MH().invokeExact(Results.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_codeCompleteGetDiagnostic$MH() {
+        return Index_h$constants_1.clang_codeCompleteGetDiagnostic$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_codeCompleteGetDiagnostic (jdk.incubator.foreign.Addressable Results, int Index) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_codeCompleteGetDiagnostic$MH().invokeExact(Results.address(), Index);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_codeCompleteGetContexts$MH() {
+        return Index_h$constants_1.clang_codeCompleteGetContexts$MH();
+    }
+    public static long clang_codeCompleteGetContexts (jdk.incubator.foreign.Addressable Results) {
+        try {
+            return (long)Index_h$constants_1.clang_codeCompleteGetContexts$MH().invokeExact(Results.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_codeCompleteGetContainerKind$MH() {
+        return Index_h$constants_1.clang_codeCompleteGetContainerKind$MH();
+    }
+    public static int clang_codeCompleteGetContainerKind (jdk.incubator.foreign.Addressable Results, jdk.incubator.foreign.Addressable IsIncomplete) {
+        try {
+            return (int)Index_h$constants_1.clang_codeCompleteGetContainerKind$MH().invokeExact(Results.address(), IsIncomplete.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_codeCompleteGetContainerUSR$MH() {
+        return Index_h$constants_1.clang_codeCompleteGetContainerUSR$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_codeCompleteGetContainerUSR (jdk.incubator.foreign.Addressable Results) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_codeCompleteGetContainerUSR$MH().invokeExact(Results.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_codeCompleteGetObjCSelector$MH() {
+        return Index_h$constants_1.clang_codeCompleteGetObjCSelector$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_codeCompleteGetObjCSelector (jdk.incubator.foreign.Addressable Results) {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_codeCompleteGetObjCSelector$MH().invokeExact(Results.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getClangVersion$MH() {
+        return Index_h$constants_1.clang_getClangVersion$MH();
+    }
+    public static jdk.incubator.foreign.MemorySegment clang_getClangVersion () {
+        try {
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getClangVersion$MH().invokeExact();
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_toggleCrashRecovery$MH() {
+        return Index_h$constants_1.clang_toggleCrashRecovery$MH();
+    }
+    public static void clang_toggleCrashRecovery (int isEnabled) {
+        try {
+            Index_h$constants_1.clang_toggleCrashRecovery$MH().invokeExact(isEnabled);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getInclusions$MH() {
+        return Index_h$constants_1.clang_getInclusions$MH();
+    }
+    public static void clang_getInclusions (jdk.incubator.foreign.Addressable tu, jdk.incubator.foreign.Addressable visitor, jdk.incubator.foreign.Addressable client_data) {
+        try {
+            Index_h$constants_1.clang_getInclusions$MH().invokeExact(tu.address(), visitor.address(), client_data.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_getInclusions$visitor {
+        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
+        public static MemorySegment allocate(clang_getInclusions$visitor fi) {
+            return RuntimeHelper.upcallStub(clang_getInclusions$visitor.class, fi, Index_h$constants_1.clang_getInclusions$visitor$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
+        }
+        public static MemorySegment allocate(clang_getInclusions$visitor fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static int CXEval_Int() {
+        return Index_h$constants_1.CXEval_Int();
+    }
+    public static int CXEval_Float() {
+        return Index_h$constants_1.CXEval_Float();
+    }
+    public static int CXEval_ObjCStrLiteral() {
+        return Index_h$constants_1.CXEval_ObjCStrLiteral();
+    }
+    public static int CXEval_StrLiteral() {
+        return Index_h$constants_1.CXEval_StrLiteral();
+    }
+    public static int CXEval_CFStr() {
+        return Index_h$constants_1.CXEval_CFStr();
+    }
+    public static int CXEval_Other() {
+        return Index_h$constants_1.CXEval_Other();
+    }
+    public static int CXEval_UnExposed() {
+        return Index_h$constants_1.CXEval_UnExposed();
+    }
+    public static MethodHandle clang_Cursor_Evaluate$MH() {
+        return Index_h$constants_1.clang_Cursor_Evaluate$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_Cursor_Evaluate (jdk.incubator.foreign.MemorySegment C) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_Evaluate$MH().invokeExact(C);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_getKind$MH() {
+        return Index_h$constants_1.clang_EvalResult_getKind$MH();
+    }
+    public static int clang_EvalResult_getKind (jdk.incubator.foreign.Addressable E) {
+        try {
+            return (int)Index_h$constants_1.clang_EvalResult_getKind$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_getAsInt$MH() {
+        return Index_h$constants_1.clang_EvalResult_getAsInt$MH();
+    }
+    public static int clang_EvalResult_getAsInt (jdk.incubator.foreign.Addressable E) {
+        try {
+            return (int)Index_h$constants_1.clang_EvalResult_getAsInt$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {
+        return Index_h$constants_1.clang_EvalResult_getAsLongLong$MH();
+    }
+    public static long clang_EvalResult_getAsLongLong (jdk.incubator.foreign.Addressable E) {
+        try {
+            return (long)Index_h$constants_1.clang_EvalResult_getAsLongLong$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {
+        return Index_h$constants_1.clang_EvalResult_isUnsignedInt$MH();
+    }
+    public static int clang_EvalResult_isUnsignedInt (jdk.incubator.foreign.Addressable E) {
+        try {
+            return (int)Index_h$constants_1.clang_EvalResult_isUnsignedInt$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {
+        return Index_h$constants_1.clang_EvalResult_getAsUnsigned$MH();
+    }
+    public static long clang_EvalResult_getAsUnsigned (jdk.incubator.foreign.Addressable E) {
+        try {
+            return (long)Index_h$constants_1.clang_EvalResult_getAsUnsigned$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_getAsDouble$MH() {
+        return Index_h$constants_1.clang_EvalResult_getAsDouble$MH();
+    }
+    public static double clang_EvalResult_getAsDouble (jdk.incubator.foreign.Addressable E) {
+        try {
+            return (double)Index_h$constants_1.clang_EvalResult_getAsDouble$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_getAsStr$MH() {
+        return Index_h$constants_1.clang_EvalResult_getAsStr$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_EvalResult_getAsStr (jdk.incubator.foreign.Addressable E) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_EvalResult_getAsStr$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_EvalResult_dispose$MH() {
+        return Index_h$constants_1.clang_EvalResult_dispose$MH();
+    }
+    public static void clang_EvalResult_dispose (jdk.incubator.foreign.Addressable E) {
+        try {
+            Index_h$constants_1.clang_EvalResult_dispose$MH().invokeExact(E.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getRemappings$MH() {
+        return Index_h$constants_1.clang_getRemappings$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getRemappings (jdk.incubator.foreign.Addressable path) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getRemappings$MH().invokeExact(path.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_getRemappingsFromFileList$MH() {
+        return Index_h$constants_1.clang_getRemappingsFromFileList$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_getRemappingsFromFileList (jdk.incubator.foreign.Addressable filePaths, int numFiles) {
+        try {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getRemappingsFromFileList$MH().invokeExact(filePaths.address(), numFiles);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_remap_getNumFiles$MH() {
+        return Index_h$constants_1.clang_remap_getNumFiles$MH();
+    }
+    public static int clang_remap_getNumFiles (jdk.incubator.foreign.Addressable x0) {
+        try {
+            return (int)Index_h$constants_1.clang_remap_getNumFiles$MH().invokeExact(x0.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_remap_getFilenames$MH() {
+        return Index_h$constants_1.clang_remap_getFilenames$MH();
+    }
+    public static void clang_remap_getFilenames (jdk.incubator.foreign.Addressable x0, int index, jdk.incubator.foreign.Addressable original, jdk.incubator.foreign.Addressable transformed) {
+        try {
+            Index_h$constants_1.clang_remap_getFilenames$MH().invokeExact(x0.address(), index, original.address(), transformed.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_remap_dispose$MH() {
+        return Index_h$constants_1.clang_remap_dispose$MH();
+    }
+    public static void clang_remap_dispose (jdk.incubator.foreign.Addressable x0) {
+        try {
+            Index_h$constants_1.clang_remap_dispose$MH().invokeExact(x0.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static int CXVisit_Break() {
+        return Index_h$constants_1.CXVisit_Break();
+    }
+    public static int CXVisit_Continue() {
+        return Index_h$constants_1.CXVisit_Continue();
+    }
+    public static class CXCursorAndRangeVisitor {
+
+        private CXCursorAndRangeVisitor() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXCursorAndRangeVisitor$struct$LAYOUT();
+        }
+        public static VarHandle context$VH() {
+            return Index_h$constants_1.context$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress context$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.context$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress context$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.context$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void context$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.context$VH().set(seg, x);
+        }
+        public static void context$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.context$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle visit$VH() {
+            return Index_h$constants_1.visit$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress visit$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.visit$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress visit$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.visit$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void visit$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.visit$VH().set(seg, x);
+        }
+        public static void visit$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.visit$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static int CXResult_Success() {
+        return Index_h$constants_1.CXResult_Success();
+    }
+    public static int CXResult_Invalid() {
+        return Index_h$constants_1.CXResult_Invalid();
+    }
+    public static int CXResult_VisitBreak() {
+        return Index_h$constants_1.CXResult_VisitBreak();
+    }
+    public static MethodHandle clang_findReferencesInFile$MH() {
+        return Index_h$constants_1.clang_findReferencesInFile$MH();
+    }
+    public static int clang_findReferencesInFile (jdk.incubator.foreign.MemorySegment cursor, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.MemorySegment visitor) {
+        try {
+            return (int)Index_h$constants_1.clang_findReferencesInFile$MH().invokeExact(cursor, file.address(), visitor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_findIncludesInFile$MH() {
+        return Index_h$constants_1.clang_findIncludesInFile$MH();
+    }
+    public static int clang_findIncludesInFile (jdk.incubator.foreign.Addressable TU, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.MemorySegment visitor) {
+        try {
+            return (int)Index_h$constants_1.clang_findIncludesInFile$MH().invokeExact(TU.address(), file.address(), visitor);
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public static MethodHandle clang_findReferencesInFileWithBlock$MH() {
+        return Index_h$constants_1.clang_findReferencesInFileWithBlock$MH();
+    }
+    public static int clang_findReferencesInFileWithBlock (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.Addressable x1, jdk.incubator.foreign.Addressable x2) {
+        try {
+            return (int)Index_h$constants_1.clang_findReferencesInFileWithBlock$MH().invokeExact(x0, x1.address(), x2.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_findReferencesInFileWithBlock$x0 {
+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);
+        public static MemorySegment allocate(clang_findReferencesInFileWithBlock$x0 fi) {
+            return RuntimeHelper.upcallStub(clang_findReferencesInFileWithBlock$x0.class, fi, Index_h$constants_1.clang_findReferencesInFileWithBlock$x0$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I");
+        }
+        public static MemorySegment allocate(clang_findReferencesInFileWithBlock$x0 fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static MethodHandle clang_findIncludesInFileWithBlock$MH() {
+        return Index_h$constants_1.clang_findIncludesInFileWithBlock$MH();
+    }
+    public static int clang_findIncludesInFileWithBlock (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1, jdk.incubator.foreign.Addressable x2) {
+        try {
+            return (int)Index_h$constants_1.clang_findIncludesInFileWithBlock$MH().invokeExact(x0.address(), x1.address(), x2.address());
+        } catch (Throwable ex) {
+            throw new AssertionError(ex);
+        }
+    }
+    public interface clang_findIncludesInFileWithBlock$x0 {
+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);
+        public static MemorySegment allocate(clang_findIncludesInFileWithBlock$x0 fi) {
+            return RuntimeHelper.upcallStub(clang_findIncludesInFileWithBlock$x0.class, fi, Index_h$constants_1.clang_findIncludesInFileWithBlock$x0$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I");
+        }
+        public static MemorySegment allocate(clang_findIncludesInFileWithBlock$x0 fi, NativeScope scope) {
+            return scope.register(allocate(fi));
+        }
+    }
+    public static class CXIdxLoc {
+
+        private CXIdxLoc() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxLoc$struct$LAYOUT();
+        }
+        public static MemorySegment ptr_data$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
+        }
+        public static VarHandle int_data$VH() {
+            return Index_h$constants_0.int_data$VH();
+        }
+        public static int int_data$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.int_data$VH().get(seg);
+        }
+        public static int int_data$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.int_data$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void int_data$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.int_data$VH().set(seg, x);
+        }
+        public static void int_data$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.int_data$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxIncludedFileInfo {
+
+        private CXIdxIncludedFileInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxIncludedFileInfo$struct$LAYOUT();
+        }
+        public static MemorySegment hashLoc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 24));
+        }
+        public static VarHandle filename$VH() {
+            return Index_h$constants_1.filename$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress filename$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.filename$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress filename$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.filename$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void filename$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.filename$VH().set(seg, x);
+        }
+        public static void filename$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.filename$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle file$VH() {
+            return Index_h$constants_1.file$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress file$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.file$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress file$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.file$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void file$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.file$VH().set(seg, x);
+        }
+        public static void file$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.file$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle isImport$VH() {
+            return Index_h$constants_1.isImport$VH();
+        }
+        public static int isImport$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isImport$VH().get(seg);
+        }
+        public static int isImport$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isImport$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isImport$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isImport$VH().set(seg, x);
+        }
+        public static void isImport$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isImport$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle isAngled$VH() {
+            return Index_h$constants_1.isAngled$VH();
+        }
+        public static int isAngled$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isAngled$VH().get(seg);
+        }
+        public static int isAngled$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isAngled$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isAngled$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isAngled$VH().set(seg, x);
+        }
+        public static void isAngled$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isAngled$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle isModuleImport$VH() {
+            return Index_h$constants_1.isModuleImport$VH();
+        }
+        public static int isModuleImport$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isModuleImport$VH().get(seg);
+        }
+        public static int isModuleImport$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isModuleImport$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isModuleImport$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isModuleImport$VH().set(seg, x);
+        }
+        public static void isModuleImport$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isModuleImport$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxImportedASTFileInfo {
+
+        private CXIdxImportedASTFileInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxImportedASTFileInfo$struct$LAYOUT();
+        }
+        public static VarHandle file$VH() {
+            return Index_h$constants_1.file$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress file$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.file$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress file$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.file$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void file$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.file$VH().set(seg, x);
+        }
+        public static void file$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.file$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle module$VH() {
+            return Index_h$constants_1.module$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress module$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.module$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress module$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.module$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void module$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.module$VH().set(seg, x);
+        }
+        public static void module$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.module$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment loc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 24));
+        }
+        public static VarHandle isImplicit$VH() {
+            return Index_h$constants_1.isImplicit$VH();
+        }
+        public static int isImplicit$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isImplicit$VH().get(seg);
+        }
+        public static int isImplicit$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isImplicit$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isImplicit$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isImplicit$VH().set(seg, x);
+        }
+        public static void isImplicit$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isImplicit$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static int CXIdxEntity_Unexposed() {
+        return Index_h$constants_1.CXIdxEntity_Unexposed();
+    }
+    public static int CXIdxEntity_Typedef() {
+        return Index_h$constants_1.CXIdxEntity_Typedef();
+    }
+    public static int CXIdxEntity_Function() {
+        return Index_h$constants_1.CXIdxEntity_Function();
+    }
+    public static int CXIdxEntity_Variable() {
+        return Index_h$constants_1.CXIdxEntity_Variable();
+    }
+    public static int CXIdxEntity_Field() {
+        return Index_h$constants_1.CXIdxEntity_Field();
+    }
+    public static int CXIdxEntity_EnumConstant() {
+        return Index_h$constants_1.CXIdxEntity_EnumConstant();
+    }
+    public static int CXIdxEntity_ObjCClass() {
+        return Index_h$constants_1.CXIdxEntity_ObjCClass();
+    }
+    public static int CXIdxEntity_ObjCProtocol() {
+        return Index_h$constants_1.CXIdxEntity_ObjCProtocol();
+    }
+    public static int CXIdxEntity_ObjCCategory() {
+        return Index_h$constants_1.CXIdxEntity_ObjCCategory();
+    }
+    public static int CXIdxEntity_ObjCInstanceMethod() {
+        return Index_h$constants_1.CXIdxEntity_ObjCInstanceMethod();
+    }
+    public static int CXIdxEntity_ObjCClassMethod() {
+        return Index_h$constants_1.CXIdxEntity_ObjCClassMethod();
+    }
+    public static int CXIdxEntity_ObjCProperty() {
+        return Index_h$constants_1.CXIdxEntity_ObjCProperty();
+    }
+    public static int CXIdxEntity_ObjCIvar() {
+        return Index_h$constants_1.CXIdxEntity_ObjCIvar();
+    }
+    public static int CXIdxEntity_Enum() {
+        return Index_h$constants_1.CXIdxEntity_Enum();
+    }
+    public static int CXIdxEntity_Struct() {
+        return Index_h$constants_1.CXIdxEntity_Struct();
+    }
+    public static int CXIdxEntity_Union() {
+        return Index_h$constants_1.CXIdxEntity_Union();
+    }
+    public static int CXIdxEntity_CXXClass() {
+        return Index_h$constants_1.CXIdxEntity_CXXClass();
+    }
+    public static int CXIdxEntity_CXXNamespace() {
+        return Index_h$constants_1.CXIdxEntity_CXXNamespace();
+    }
+    public static int CXIdxEntity_CXXNamespaceAlias() {
+        return Index_h$constants_1.CXIdxEntity_CXXNamespaceAlias();
+    }
+    public static int CXIdxEntity_CXXStaticVariable() {
+        return Index_h$constants_1.CXIdxEntity_CXXStaticVariable();
+    }
+    public static int CXIdxEntity_CXXStaticMethod() {
+        return Index_h$constants_1.CXIdxEntity_CXXStaticMethod();
+    }
+    public static int CXIdxEntity_CXXInstanceMethod() {
+        return Index_h$constants_1.CXIdxEntity_CXXInstanceMethod();
+    }
+    public static int CXIdxEntity_CXXConstructor() {
+        return Index_h$constants_1.CXIdxEntity_CXXConstructor();
+    }
+    public static int CXIdxEntity_CXXDestructor() {
+        return Index_h$constants_1.CXIdxEntity_CXXDestructor();
+    }
+    public static int CXIdxEntity_CXXConversionFunction() {
+        return Index_h$constants_1.CXIdxEntity_CXXConversionFunction();
+    }
+    public static int CXIdxEntity_CXXTypeAlias() {
+        return Index_h$constants_1.CXIdxEntity_CXXTypeAlias();
+    }
+    public static int CXIdxEntity_CXXInterface() {
+        return Index_h$constants_1.CXIdxEntity_CXXInterface();
+    }
+    public static int CXIdxEntityLang_None() {
+        return Index_h$constants_1.CXIdxEntityLang_None();
+    }
+    public static int CXIdxEntityLang_C() {
+        return Index_h$constants_1.CXIdxEntityLang_C();
+    }
+    public static int CXIdxEntityLang_ObjC() {
+        return Index_h$constants_1.CXIdxEntityLang_ObjC();
+    }
+    public static int CXIdxEntityLang_CXX() {
+        return Index_h$constants_1.CXIdxEntityLang_CXX();
+    }
+    public static int CXIdxEntityLang_Swift() {
+        return Index_h$constants_1.CXIdxEntityLang_Swift();
+    }
+    public static int CXIdxEntity_NonTemplate() {
+        return Index_h$constants_1.CXIdxEntity_NonTemplate();
+    }
+    public static int CXIdxEntity_Template() {
+        return Index_h$constants_1.CXIdxEntity_Template();
+    }
+    public static int CXIdxEntity_TemplatePartialSpecialization() {
+        return Index_h$constants_1.CXIdxEntity_TemplatePartialSpecialization();
+    }
+    public static int CXIdxEntity_TemplateSpecialization() {
+        return Index_h$constants_1.CXIdxEntity_TemplateSpecialization();
+    }
+    public static int CXIdxAttr_Unexposed() {
+        return Index_h$constants_1.CXIdxAttr_Unexposed();
+    }
+    public static int CXIdxAttr_IBAction() {
+        return Index_h$constants_1.CXIdxAttr_IBAction();
+    }
+    public static int CXIdxAttr_IBOutlet() {
+        return Index_h$constants_1.CXIdxAttr_IBOutlet();
+    }
+    public static int CXIdxAttr_IBOutletCollection() {
+        return Index_h$constants_1.CXIdxAttr_IBOutletCollection();
+    }
+    public static class CXIdxAttrInfo {
+
+        private CXIdxAttrInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxAttrInfo$struct$LAYOUT();
+        }
+        public static VarHandle kind$VH() {
+            return Index_h$constants_0.kind$VH();
+        }
+        public static int kind$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.kind$VH().get(seg);
+        }
+        public static int kind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.kind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.kind$VH().set(seg, x);
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.kind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment cursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
+        }
+        public static MemorySegment loc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxEntityInfo {
+
+        private CXIdxEntityInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxEntityInfo$struct$LAYOUT();
+        }
+        public static VarHandle kind$VH() {
+            return Index_h$constants_0.kind$VH();
+        }
+        public static int kind$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.kind$VH().get(seg);
+        }
+        public static int kind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.kind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.kind$VH().set(seg, x);
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.kind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle templateKind$VH() {
+            return Index_h$constants_1.templateKind$VH();
+        }
+        public static int templateKind$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.templateKind$VH().get(seg);
+        }
+        public static int templateKind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.templateKind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void templateKind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.templateKind$VH().set(seg, x);
+        }
+        public static void templateKind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.templateKind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle lang$VH() {
+            return Index_h$constants_1.lang$VH();
+        }
+        public static int lang$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.lang$VH().get(seg);
+        }
+        public static int lang$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.lang$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void lang$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.lang$VH().set(seg, x);
+        }
+        public static void lang$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.lang$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle name$VH() {
+            return Index_h$constants_1.name$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress name$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.name$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress name$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.name$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void name$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.name$VH().set(seg, x);
+        }
+        public static void name$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.name$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle USR$VH() {
+            return Index_h$constants_1.USR$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress USR$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.USR$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress USR$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.USR$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void USR$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.USR$VH().set(seg, x);
+        }
+        public static void USR$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.USR$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment cursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 32));
+        }
+        public static VarHandle attributes$VH() {
+            return Index_h$constants_1.attributes$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress attributes$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.attributes$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress attributes$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.attributes$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void attributes$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.attributes$VH().set(seg, x);
+        }
+        public static void attributes$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.attributes$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle numAttributes$VH() {
+            return Index_h$constants_1.numAttributes$VH();
+        }
+        public static int numAttributes$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.numAttributes$VH().get(seg);
+        }
+        public static int numAttributes$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.numAttributes$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void numAttributes$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.numAttributes$VH().set(seg, x);
+        }
+        public static void numAttributes$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.numAttributes$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxContainerInfo {
+
+        private CXIdxContainerInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxContainerInfo$struct$LAYOUT();
+        }
+        public static MemorySegment cursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 32));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxIBOutletCollectionAttrInfo {
+
+        private CXIdxIBOutletCollectionAttrInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT();
+        }
+        public static VarHandle attrInfo$VH() {
+            return Index_h$constants_1.attrInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress attrInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.attrInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress attrInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.attrInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void attrInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.attrInfo$VH().set(seg, x);
+        }
+        public static void attrInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.attrInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle objcClass$VH() {
+            return Index_h$constants_1.objcClass$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress objcClass$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.objcClass$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress objcClass$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.objcClass$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void objcClass$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.objcClass$VH().set(seg, x);
+        }
+        public static void objcClass$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.objcClass$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment classCursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 32));
+        }
+        public static MemorySegment classLoc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 24));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static int CXIdxDeclFlag_Skipped() {
+        return Index_h$constants_1.CXIdxDeclFlag_Skipped();
+    }
+    public static class CXIdxDeclInfo {
+
+        private CXIdxDeclInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_1.CXIdxDeclInfo$struct$LAYOUT();
+        }
+        public static VarHandle entityInfo$VH() {
+            return Index_h$constants_1.entityInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress entityInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.entityInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress entityInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.entityInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void entityInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.entityInfo$VH().set(seg, x);
+        }
+        public static void entityInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.entityInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment cursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
+        }
+        public static MemorySegment loc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));
+        }
+        public static VarHandle semanticContainer$VH() {
+            return Index_h$constants_1.semanticContainer$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress semanticContainer$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.semanticContainer$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress semanticContainer$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.semanticContainer$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void semanticContainer$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.semanticContainer$VH().set(seg, x);
+        }
+        public static void semanticContainer$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.semanticContainer$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle lexicalContainer$VH() {
+            return Index_h$constants_1.lexicalContainer$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress lexicalContainer$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.lexicalContainer$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress lexicalContainer$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.lexicalContainer$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void lexicalContainer$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.lexicalContainer$VH().set(seg, x);
+        }
+        public static void lexicalContainer$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.lexicalContainer$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle isRedeclaration$VH() {
+            return Index_h$constants_1.isRedeclaration$VH();
+        }
+        public static int isRedeclaration$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isRedeclaration$VH().get(seg);
+        }
+        public static int isRedeclaration$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isRedeclaration$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isRedeclaration$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isRedeclaration$VH().set(seg, x);
+        }
+        public static void isRedeclaration$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isRedeclaration$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle isDefinition$VH() {
+            return Index_h$constants_1.isDefinition$VH();
+        }
+        public static int isDefinition$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isDefinition$VH().get(seg);
+        }
+        public static int isDefinition$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isDefinition$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isDefinition$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isDefinition$VH().set(seg, x);
+        }
+        public static void isDefinition$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isDefinition$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle isContainer$VH() {
+            return Index_h$constants_1.isContainer$VH();
+        }
+        public static int isContainer$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isContainer$VH().get(seg);
+        }
+        public static int isContainer$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isContainer$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isContainer$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isContainer$VH().set(seg, x);
+        }
+        public static void isContainer$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isContainer$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle declAsContainer$VH() {
+            return Index_h$constants_1.declAsContainer$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress declAsContainer$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.declAsContainer$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress declAsContainer$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.declAsContainer$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void declAsContainer$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.declAsContainer$VH().set(seg, x);
+        }
+        public static void declAsContainer$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.declAsContainer$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle isImplicit$VH() {
+            return Index_h$constants_1.isImplicit$VH();
+        }
+        public static int isImplicit$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.isImplicit$VH().get(seg);
+        }
+        public static int isImplicit$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.isImplicit$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void isImplicit$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.isImplicit$VH().set(seg, x);
+        }
+        public static void isImplicit$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.isImplicit$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle attributes$VH() {
+            return Index_h$constants_1.attributes$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress attributes$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.attributes$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress attributes$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.attributes$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void attributes$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.attributes$VH().set(seg, x);
+        }
+        public static void attributes$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.attributes$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle numAttributes$VH() {
+            return Index_h$constants_1.numAttributes$VH();
+        }
+        public static int numAttributes$get(MemorySegment seg) {
+            return (int)Index_h$constants_1.numAttributes$VH().get(seg);
+        }
+        public static int numAttributes$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_1.numAttributes$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void numAttributes$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_1.numAttributes$VH().set(seg, x);
+        }
+        public static void numAttributes$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_1.numAttributes$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle flags$VH() {
+            return Index_h$constants_2.flags$VH();
+        }
+        public static int flags$get(MemorySegment seg) {
+            return (int)Index_h$constants_2.flags$VH().get(seg);
+        }
+        public static int flags$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_2.flags$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void flags$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_2.flags$VH().set(seg, x);
+        }
+        public static void flags$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_2.flags$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static int CXIdxObjCContainer_ForwardRef() {
+        return Index_h$constants_2.CXIdxObjCContainer_ForwardRef();
+    }
+    public static int CXIdxObjCContainer_Interface() {
+        return Index_h$constants_2.CXIdxObjCContainer_Interface();
+    }
+    public static int CXIdxObjCContainer_Implementation() {
+        return Index_h$constants_2.CXIdxObjCContainer_Implementation();
+    }
+    public static class CXIdxObjCContainerDeclInfo {
+
+        private CXIdxObjCContainerDeclInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxObjCContainerDeclInfo$struct$LAYOUT();
+        }
+        public static VarHandle declInfo$VH() {
+            return Index_h$constants_2.declInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress declInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.declInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress declInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.declInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void declInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.declInfo$VH().set(seg, x);
+        }
+        public static void declInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.declInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle kind$VH() {
+            return Index_h$constants_0.kind$VH();
+        }
+        public static int kind$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.kind$VH().get(seg);
+        }
+        public static int kind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.kind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.kind$VH().set(seg, x);
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.kind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxBaseClassInfo {
+
+        private CXIdxBaseClassInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxBaseClassInfo$struct$LAYOUT();
+        }
+        public static VarHandle base$VH() {
+            return Index_h$constants_2.base$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress base$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.base$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress base$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.base$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void base$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.base$VH().set(seg, x);
+        }
+        public static void base$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.base$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment cursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
+        }
+        public static MemorySegment loc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxObjCProtocolRefInfo {
+
+        private CXIdxObjCProtocolRefInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxObjCProtocolRefInfo$struct$LAYOUT();
+        }
+        public static VarHandle protocol$VH() {
+            return Index_h$constants_2.protocol$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocol$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocol$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocol$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocol$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void protocol$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocol$VH().set(seg, x);
+        }
+        public static void protocol$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocol$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment cursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
+        }
+        public static MemorySegment loc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxObjCProtocolRefListInfo {
+
+        private CXIdxObjCProtocolRefListInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxObjCProtocolRefListInfo$struct$LAYOUT();
+        }
+        public static VarHandle protocols$VH() {
+            return Index_h$constants_2.protocols$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocols$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocols$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocols$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocols$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void protocols$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocols$VH().set(seg, x);
+        }
+        public static void protocols$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocols$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle numProtocols$VH() {
+            return Index_h$constants_2.numProtocols$VH();
+        }
+        public static int numProtocols$get(MemorySegment seg) {
+            return (int)Index_h$constants_2.numProtocols$VH().get(seg);
+        }
+        public static int numProtocols$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_2.numProtocols$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void numProtocols$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_2.numProtocols$VH().set(seg, x);
+        }
+        public static void numProtocols$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_2.numProtocols$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxObjCInterfaceDeclInfo {
+
+        private CXIdxObjCInterfaceDeclInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxObjCInterfaceDeclInfo$struct$LAYOUT();
+        }
+        public static VarHandle containerInfo$VH() {
+            return Index_h$constants_2.containerInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress containerInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.containerInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress containerInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.containerInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void containerInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.containerInfo$VH().set(seg, x);
+        }
+        public static void containerInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.containerInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle superInfo$VH() {
+            return Index_h$constants_2.superInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress superInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.superInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress superInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.superInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void superInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.superInfo$VH().set(seg, x);
+        }
+        public static void superInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.superInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle protocols$VH() {
+            return Index_h$constants_2.protocols$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocols$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocols$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocols$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocols$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void protocols$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocols$VH().set(seg, x);
+        }
+        public static void protocols$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocols$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxObjCCategoryDeclInfo {
+
+        private CXIdxObjCCategoryDeclInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxObjCCategoryDeclInfo$struct$LAYOUT();
+        }
+        public static VarHandle containerInfo$VH() {
+            return Index_h$constants_2.containerInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress containerInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.containerInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress containerInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.containerInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void containerInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.containerInfo$VH().set(seg, x);
+        }
+        public static void containerInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.containerInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle objcClass$VH() {
+            return Index_h$constants_1.objcClass$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress objcClass$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.objcClass$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress objcClass$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.objcClass$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void objcClass$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.objcClass$VH().set(seg, x);
+        }
+        public static void objcClass$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_1.objcClass$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment classCursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 32));
+        }
+        public static MemorySegment classLoc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 24));
+        }
+        public static VarHandle protocols$VH() {
+            return Index_h$constants_2.protocols$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocols$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocols$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress protocols$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.protocols$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void protocols$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocols$VH().set(seg, x);
+        }
+        public static void protocols$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.protocols$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxObjCPropertyDeclInfo {
+
+        private CXIdxObjCPropertyDeclInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxObjCPropertyDeclInfo$struct$LAYOUT();
+        }
+        public static VarHandle declInfo$VH() {
+            return Index_h$constants_2.declInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress declInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.declInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress declInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.declInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void declInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.declInfo$VH().set(seg, x);
+        }
+        public static void declInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.declInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle getter$VH() {
+            return Index_h$constants_2.getter$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress getter$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.getter$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress getter$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.getter$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void getter$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.getter$VH().set(seg, x);
+        }
+        public static void getter$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.getter$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle setter$VH() {
+            return Index_h$constants_2.setter$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress setter$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.setter$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress setter$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.setter$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void setter$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.setter$VH().set(seg, x);
+        }
+        public static void setter$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.setter$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class CXIdxCXXClassDeclInfo {
+
+        private CXIdxCXXClassDeclInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxCXXClassDeclInfo$struct$LAYOUT();
+        }
+        public static VarHandle declInfo$VH() {
+            return Index_h$constants_2.declInfo$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress declInfo$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.declInfo$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress declInfo$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.declInfo$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void declInfo$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.declInfo$VH().set(seg, x);
+        }
+        public static void declInfo$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.declInfo$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle bases$VH() {
+            return Index_h$constants_2.bases$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress bases$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.bases$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress bases$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.bases$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void bases$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.bases$VH().set(seg, x);
+        }
+        public static void bases$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.bases$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle numBases$VH() {
+            return Index_h$constants_2.numBases$VH();
+        }
+        public static int numBases$get(MemorySegment seg) {
+            return (int)Index_h$constants_2.numBases$VH().get(seg);
+        }
+        public static int numBases$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_2.numBases$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void numBases$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_2.numBases$VH().set(seg, x);
+        }
+        public static void numBases$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_2.numBases$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static int CXIdxEntityRef_Direct() {
+        return Index_h$constants_2.CXIdxEntityRef_Direct();
+    }
+    public static int CXIdxEntityRef_Implicit() {
+        return Index_h$constants_2.CXIdxEntityRef_Implicit();
+    }
+    public static int CXSymbolRole_None() {
+        return Index_h$constants_2.CXSymbolRole_None();
+    }
+    public static int CXSymbolRole_Declaration() {
+        return Index_h$constants_2.CXSymbolRole_Declaration();
+    }
+    public static int CXSymbolRole_Definition() {
+        return Index_h$constants_2.CXSymbolRole_Definition();
+    }
+    public static int CXSymbolRole_Reference() {
+        return Index_h$constants_2.CXSymbolRole_Reference();
+    }
+    public static int CXSymbolRole_Read() {
+        return Index_h$constants_2.CXSymbolRole_Read();
+    }
+    public static int CXSymbolRole_Write() {
+        return Index_h$constants_2.CXSymbolRole_Write();
+    }
+    public static int CXSymbolRole_Call() {
+        return Index_h$constants_2.CXSymbolRole_Call();
+    }
+    public static int CXSymbolRole_Dynamic() {
+        return Index_h$constants_2.CXSymbolRole_Dynamic();
+    }
+    public static int CXSymbolRole_AddressOf() {
+        return Index_h$constants_2.CXSymbolRole_AddressOf();
+    }
+    public static int CXSymbolRole_Implicit() {
+        return Index_h$constants_2.CXSymbolRole_Implicit();
+    }
+    public static class CXIdxEntityRefInfo {
+
+        private CXIdxEntityRefInfo() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.CXIdxEntityRefInfo$struct$LAYOUT();
+        }
+        public static VarHandle kind$VH() {
+            return Index_h$constants_0.kind$VH();
+        }
+        public static int kind$get(MemorySegment seg) {
+            return (int)Index_h$constants_0.kind$VH().get(seg);
+        }
+        public static int kind$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_0.kind$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_0.kind$VH().set(seg, x);
+        }
+        public static void kind$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_0.kind$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static MemorySegment cursor$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
+        }
+        public static MemorySegment loc$slice(MemorySegment seg) {
+            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));
+        }
+        public static VarHandle referencedEntity$VH() {
+            return Index_h$constants_2.referencedEntity$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress referencedEntity$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.referencedEntity$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress referencedEntity$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.referencedEntity$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void referencedEntity$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.referencedEntity$VH().set(seg, x);
+        }
+        public static void referencedEntity$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.referencedEntity$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle parentEntity$VH() {
+            return Index_h$constants_2.parentEntity$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress parentEntity$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.parentEntity$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress parentEntity$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.parentEntity$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void parentEntity$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.parentEntity$VH().set(seg, x);
+        }
+        public static void parentEntity$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.parentEntity$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle container$VH() {
+            return Index_h$constants_2.container$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress container$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.container$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress container$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.container$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void container$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.container$VH().set(seg, x);
+        }
+        public static void container$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.container$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static VarHandle role$VH() {
+            return Index_h$constants_2.role$VH();
+        }
+        public static int role$get(MemorySegment seg) {
+            return (int)Index_h$constants_2.role$VH().get(seg);
+        }
+        public static int role$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (int)Index_h$constants_2.role$VH().get(addr.asSlice(index*sizeof()));
+        }
+        public static void role$set(jdk.incubator.foreign.MemorySegment seg, int x) {
+            Index_h$constants_2.role$VH().set(seg, x);
+        }
+        public static void role$set(jdk.incubator.foreign.MemorySegment addr, long index, int x) {
+            Index_h$constants_2.role$VH().set(addr.asSlice(index*sizeof()), x);
+        }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
+    }
+
+    public static class IndexerCallbacks {
+
+        private IndexerCallbacks() {}
+        public static MemoryLayout $LAYOUT() {
+            return Index_h$constants_2.IndexerCallbacks$struct$LAYOUT();
+        }
+        public static VarHandle abortQuery$VH() {
+            return Index_h$constants_2.abortQuery$VH();
+        }
+        public static jdk.incubator.foreign.MemoryAddress abortQuery$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.abortQuery$VH().get(seg);
+        }
+        public static jdk.incubator.foreign.MemoryAddress abortQuery$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.abortQuery$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_Module_getParent = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Module_getParent",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_Module_getParent (MemoryAddress Module) {
-        try {
-            return (MemoryAddress)clang_Module_getParent.invokeExact(Module);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void abortQuery$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.abortQuery$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_Module_getName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Module_getName",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_Module_getName (MemoryAddress Module) {
-        try {
-            return (MemorySegment)clang_Module_getName.invokeExact(Module);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void abortQuery$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.abortQuery$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_Module_getFullName = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Module_getFullName",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_Module_getFullName (MemoryAddress Module) {
-        try {
-            return (MemorySegment)clang_Module_getFullName.invokeExact(Module);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle diagnostic$VH() {
+            return Index_h$constants_2.diagnostic$VH();
         }
-    }
-    public static final MethodHandle clang_Module_isSystem = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Module_isSystem",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_Module_isSystem (MemoryAddress Module) {
-        try {
-            return (int)clang_Module_isSystem.invokeExact(Module);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress diagnostic$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.diagnostic$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_Module_getNumTopLevelHeaders = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Module_getNumTopLevelHeaders",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_Module_getNumTopLevelHeaders (MemoryAddress x0, MemoryAddress Module) {
-        try {
-            return (int)clang_Module_getNumTopLevelHeaders.invokeExact(x0, Module);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress diagnostic$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.diagnostic$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_Module_getTopLevelHeader = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Module_getTopLevelHeader",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_Module_getTopLevelHeader (MemoryAddress x0, MemoryAddress Module, int Index) {
-        try {
-            return (MemoryAddress)clang_Module_getTopLevelHeader.invokeExact(x0, Module, Index);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void diagnostic$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.diagnostic$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_CXXConstructor_isConvertingConstructor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXConstructor_isConvertingConstructor",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXConstructor_isConvertingConstructor (MemorySegment C) {
-        try {
-            return (int)clang_CXXConstructor_isConvertingConstructor.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void diagnostic$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.diagnostic$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_CXXConstructor_isCopyConstructor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXConstructor_isCopyConstructor",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXConstructor_isCopyConstructor (MemorySegment C) {
-        try {
-            return (int)clang_CXXConstructor_isCopyConstructor.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle enteredMainFile$VH() {
+            return Index_h$constants_2.enteredMainFile$VH();
         }
-    }
-    public static final MethodHandle clang_CXXConstructor_isDefaultConstructor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXConstructor_isDefaultConstructor",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXConstructor_isDefaultConstructor (MemorySegment C) {
-        try {
-            return (int)clang_CXXConstructor_isDefaultConstructor.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress enteredMainFile$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.enteredMainFile$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_CXXConstructor_isMoveConstructor = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXConstructor_isMoveConstructor",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXConstructor_isMoveConstructor (MemorySegment C) {
-        try {
-            return (int)clang_CXXConstructor_isMoveConstructor.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress enteredMainFile$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.enteredMainFile$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_CXXField_isMutable = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXField_isMutable",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXField_isMutable (MemorySegment C) {
-        try {
-            return (int)clang_CXXField_isMutable.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void enteredMainFile$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.enteredMainFile$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_CXXMethod_isDefaulted = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXMethod_isDefaulted",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXMethod_isDefaulted (MemorySegment C) {
-        try {
-            return (int)clang_CXXMethod_isDefaulted.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void enteredMainFile$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.enteredMainFile$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_CXXMethod_isPureVirtual = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXMethod_isPureVirtual",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXMethod_isPureVirtual (MemorySegment C) {
-        try {
-            return (int)clang_CXXMethod_isPureVirtual.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle ppIncludedFile$VH() {
+            return Index_h$constants_2.ppIncludedFile$VH();
         }
-    }
-    public static final MethodHandle clang_CXXMethod_isStatic = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXMethod_isStatic",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXMethod_isStatic (MemorySegment C) {
-        try {
-            return (int)clang_CXXMethod_isStatic.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress ppIncludedFile$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.ppIncludedFile$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_CXXMethod_isVirtual = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXMethod_isVirtual",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXMethod_isVirtual (MemorySegment C) {
-        try {
-            return (int)clang_CXXMethod_isVirtual.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress ppIncludedFile$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.ppIncludedFile$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_CXXRecord_isAbstract = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXRecord_isAbstract",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXRecord_isAbstract (MemorySegment C) {
-        try {
-            return (int)clang_CXXRecord_isAbstract.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void ppIncludedFile$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.ppIncludedFile$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_EnumDecl_isScoped = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EnumDecl_isScoped",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_EnumDecl_isScoped (MemorySegment C) {
-        try {
-            return (int)clang_EnumDecl_isScoped.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void ppIncludedFile$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.ppIncludedFile$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_CXXMethod_isConst = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_CXXMethod_isConst",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_CXXMethod_isConst (MemorySegment C) {
-        try {
-            return (int)clang_CXXMethod_isConst.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle importedASTFile$VH() {
+            return Index_h$constants_2.importedASTFile$VH();
         }
-    }
-    public static final MethodHandle clang_getTemplateCursorKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTemplateCursorKind",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final int clang_getTemplateCursorKind (MemorySegment C) {
-        try {
-            return (int)clang_getTemplateCursorKind.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress importedASTFile$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.importedASTFile$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_getSpecializedCursorTemplate = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getSpecializedCursorTemplate",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getSpecializedCursorTemplate (MemorySegment C) {
-        try {
-            return (MemorySegment)clang_getSpecializedCursorTemplate.invokeExact(C);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress importedASTFile$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.importedASTFile$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_getCursorReferenceNameRange = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorReferenceNameRange",
-        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ),
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getCursorReferenceNameRange (MemorySegment C, int NameFlags, int PieceIndex) {
-        try {
-            return (MemorySegment)clang_getCursorReferenceNameRange.invokeExact(C, NameFlags, PieceIndex);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXNameRange_WantQualifier = (int)1L;
-    public static final int CXNameRange_WantTemplateArgs = (int)2L;
-    public static final int CXNameRange_WantSinglePiece = (int)4L;
-    public static final int CXToken_Punctuation = (int)0L;
-    public static final int CXToken_Keyword = (int)1L;
-    public static final int CXToken_Identifier = (int)2L;
-    public static final int CXToken_Literal = (int)3L;
-    public static final int CXToken_Comment = (int)4L;
-    public static final MemoryLayout CXToken$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(4, CSupport.C_INT).withName("int_data"),
-        CSupport.C_POINTER.withName("ptr_data")
-    );
-    public static final MethodHandle clang_getToken = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getToken",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemoryAddress clang_getToken (MemoryAddress TU, MemorySegment Location) {
-        try {
-            return (MemoryAddress)clang_getToken.invokeExact(TU, Location);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getTokenKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTokenKind",
-        "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, CSupport.C_INT).withName("int_data"),
-                CSupport.C_POINTER.withName("ptr_data")
-            )
-        )
-    );
-    public static final int clang_getTokenKind (MemorySegment x0) {
-        try {
-            return (int)clang_getTokenKind.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getTokenSpelling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTokenSpelling",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, CSupport.C_INT).withName("int_data"),
-                CSupport.C_POINTER.withName("ptr_data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getTokenSpelling (MemoryAddress x0, MemorySegment x1) {
-        try {
-            return (MemorySegment)clang_getTokenSpelling.invokeExact(x0, x1);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void importedASTFile$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.importedASTFile$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_getTokenLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTokenLocation",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, CSupport.C_INT).withName("int_data"),
-                CSupport.C_POINTER.withName("ptr_data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getTokenLocation (MemoryAddress x0, MemorySegment x1) {
-        try {
-            return (MemorySegment)clang_getTokenLocation.invokeExact(x0, x1);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void importedASTFile$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.importedASTFile$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_getTokenExtent = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getTokenExtent",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("begin_int_data"),
-            CSupport.C_INT.withName("end_int_data")
-        ),
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, CSupport.C_INT).withName("int_data"),
-                CSupport.C_POINTER.withName("ptr_data")
-            )
-        )
-    );
-    public static final MemorySegment clang_getTokenExtent (MemoryAddress x0, MemorySegment x1) {
-        try {
-            return (MemorySegment)clang_getTokenExtent.invokeExact(x0, x1);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle startedTranslationUnit$VH() {
+            return Index_h$constants_2.startedTranslationUnit$VH();
         }
-    }
-    public static final MethodHandle clang_tokenize = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_tokenize",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("begin_int_data"),
-                CSupport.C_INT.withName("end_int_data")
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_tokenize (MemoryAddress TU, MemorySegment Range, MemoryAddress Tokens, MemoryAddress NumTokens) {
-        try {
-            clang_tokenize.invokeExact(TU, Range, Tokens, NumTokens);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress startedTranslationUnit$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.startedTranslationUnit$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_annotateTokens = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_annotateTokens",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_annotateTokens (MemoryAddress TU, MemoryAddress Tokens, int NumTokens, MemoryAddress Cursors) {
-        try {
-            clang_annotateTokens.invokeExact(TU, Tokens, NumTokens, Cursors);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress startedTranslationUnit$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.startedTranslationUnit$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_disposeTokens = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeTokens",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final void clang_disposeTokens (MemoryAddress TU, MemoryAddress Tokens, int NumTokens) {
-        try {
-            clang_disposeTokens.invokeExact(TU, Tokens, NumTokens);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void startedTranslationUnit$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.startedTranslationUnit$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_getCursorKindSpelling = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorKindSpelling",
-        "(I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getCursorKindSpelling (int Kind) {
-        try {
-            return (MemorySegment)clang_getCursorKindSpelling.invokeExact(Kind);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void startedTranslationUnit$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.startedTranslationUnit$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_getDefinitionSpellingAndExtent = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getDefinitionSpellingAndExtent",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getDefinitionSpellingAndExtent (MemorySegment x0, MemoryAddress startBuf, MemoryAddress endBuf, MemoryAddress startLine, MemoryAddress startColumn, MemoryAddress endLine, MemoryAddress endColumn) {
-        try {
-            clang_getDefinitionSpellingAndExtent.invokeExact(x0, startBuf, endBuf, startLine, startColumn, endLine, endColumn);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle indexDeclaration$VH() {
+            return Index_h$constants_2.indexDeclaration$VH();
         }
-    }
-    public static final MethodHandle clang_enableStackTraces = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_enableStackTraces",
-        "()V",
-        FunctionDescriptor.ofVoid()
-    );
-    public static final void clang_enableStackTraces () {
-        try {
-            clang_enableStackTraces.invokeExact();
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress indexDeclaration$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.indexDeclaration$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_executeOnThread = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_executeOnThread",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final void clang_executeOnThread (MemoryAddress fn, MemoryAddress user_data, int stack_size) {
-        try {
-            clang_executeOnThread.invokeExact(fn, user_data, stack_size);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress indexDeclaration$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.indexDeclaration$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    private static final FunctionDescriptor clang_executeOnThread$fn$DESC = FunctionDescriptor.ofVoid(
-        CSupport.C_POINTER
-    );
-    public interface clang_executeOnThread$fn {
-        void apply(MemoryAddress x0);
-    }
-    public static final MemoryAddress clang_executeOnThread$fn$make(clang_executeOnThread$fn fi) {
-        return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, clang_executeOnThread$fn$DESC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
-    }
-    public static final MemoryLayout CXCompletionResult$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("CursorKind"),
-        MemoryLayout.ofPaddingBits(32),
-        CSupport.C_POINTER.withName("CompletionString")
-    );
-    public static final VarHandle CXCompletionResult$CursorKind = CXCompletionResult$LAYOUT.varHandle(int.class, PathElement.groupElement("CursorKind"));
-    public static final int CXCompletionResult$CursorKind$get(MemorySegment seg) {
-        return (int)CXCompletionResult$CursorKind.get(seg);
-    }
-    public static final void CXCompletionResult$CursorKind$set(MemorySegment seg, int x) {
-        CXCompletionResult$CursorKind.set(seg, x);
-    }
-    public static final int CXCompletionChunk_Optional = (int)0L;
-    public static final int CXCompletionChunk_TypedText = (int)1L;
-    public static final int CXCompletionChunk_Text = (int)2L;
-    public static final int CXCompletionChunk_Placeholder = (int)3L;
-    public static final int CXCompletionChunk_Informative = (int)4L;
-    public static final int CXCompletionChunk_CurrentParameter = (int)5L;
-    public static final int CXCompletionChunk_LeftParen = (int)6L;
-    public static final int CXCompletionChunk_RightParen = (int)7L;
-    public static final int CXCompletionChunk_LeftBracket = (int)8L;
-    public static final int CXCompletionChunk_RightBracket = (int)9L;
-    public static final int CXCompletionChunk_LeftBrace = (int)10L;
-    public static final int CXCompletionChunk_RightBrace = (int)11L;
-    public static final int CXCompletionChunk_LeftAngle = (int)12L;
-    public static final int CXCompletionChunk_RightAngle = (int)13L;
-    public static final int CXCompletionChunk_Comma = (int)14L;
-    public static final int CXCompletionChunk_ResultType = (int)15L;
-    public static final int CXCompletionChunk_Colon = (int)16L;
-    public static final int CXCompletionChunk_SemiColon = (int)17L;
-    public static final int CXCompletionChunk_Equal = (int)18L;
-    public static final int CXCompletionChunk_HorizontalSpace = (int)19L;
-    public static final int CXCompletionChunk_VerticalSpace = (int)20L;
-    public static final MethodHandle clang_getCompletionChunkKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionChunkKind",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_getCompletionChunkKind (MemoryAddress completion_string, int chunk_number) {
-        try {
-            return (int)clang_getCompletionChunkKind.invokeExact(completion_string, chunk_number);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void indexDeclaration$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.indexDeclaration$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_getCompletionChunkText = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionChunkText",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getCompletionChunkText (MemoryAddress completion_string, int chunk_number) {
-        try {
-            return (MemorySegment)clang_getCompletionChunkText.invokeExact(completion_string, chunk_number);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void indexDeclaration$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.indexDeclaration$VH().set(addr.asSlice(index*sizeof()), x);
         }
-    }
-    public static final MethodHandle clang_getCompletionChunkCompletionString = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionChunkCompletionString",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_getCompletionChunkCompletionString (MemoryAddress completion_string, int chunk_number) {
-        try {
-            return (MemoryAddress)clang_getCompletionChunkCompletionString.invokeExact(completion_string, chunk_number);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static VarHandle indexEntityReference$VH() {
+            return Index_h$constants_2.indexEntityReference$VH();
         }
-    }
-    public static final MethodHandle clang_getNumCompletionChunks = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getNumCompletionChunks",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getNumCompletionChunks (MemoryAddress completion_string) {
-        try {
-            return (int)clang_getNumCompletionChunks.invokeExact(completion_string);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress indexEntityReference$get(MemorySegment seg) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.indexEntityReference$VH().get(seg);
         }
-    }
-    public static final MethodHandle clang_getCompletionPriority = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionPriority",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getCompletionPriority (MemoryAddress completion_string) {
-        try {
-            return (int)clang_getCompletionPriority.invokeExact(completion_string);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static jdk.incubator.foreign.MemoryAddress indexEntityReference$get(jdk.incubator.foreign.MemorySegment addr, long index) {
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.indexEntityReference$VH().get(addr.asSlice(index*sizeof()));
         }
-    }
-    public static final MethodHandle clang_getCompletionAvailability = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionAvailability",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getCompletionAvailability (MemoryAddress completion_string) {
-        try {
-            return (int)clang_getCompletionAvailability.invokeExact(completion_string);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void indexEntityReference$set(jdk.incubator.foreign.MemorySegment seg, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.indexEntityReference$VH().set(seg, x);
         }
-    }
-    public static final MethodHandle clang_getCompletionNumAnnotations = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionNumAnnotations",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_getCompletionNumAnnotations (MemoryAddress completion_string) {
-        try {
-            return (int)clang_getCompletionNumAnnotations.invokeExact(completion_string);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static void indexEntityReference$set(jdk.incubator.foreign.MemorySegment addr, long index, jdk.incubator.foreign.MemoryAddress x) {
+            Index_h$constants_2.indexEntityReference$VH().set(addr.asSlice(index*sizeof()), x);
         }
+        public static long sizeof() { return $LAYOUT().byteSize(); }
+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
+        public static MemorySegment allocateArray(int len) {
+            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
+        public static MemorySegment allocateArray(int len, NativeScope scope) {
+            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
     }
-    public static final MethodHandle clang_getCompletionAnnotation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionAnnotation",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemorySegment clang_getCompletionAnnotation (MemoryAddress completion_string, int annotation_number) {
-        try {
-            return (MemorySegment)clang_getCompletionAnnotation.invokeExact(completion_string, annotation_number);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+
+    public static MethodHandle clang_index_isEntityObjCContainerKind$MH() {
+        return Index_h$constants_2.clang_index_isEntityObjCContainerKind$MH();
     }
-    public static final MethodHandle clang_getCompletionParent = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionParent",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getCompletionParent (MemoryAddress completion_string, MemoryAddress kind) {
+    public static int clang_index_isEntityObjCContainerKind (int x0) {
         try {
-            return (MemorySegment)clang_getCompletionParent.invokeExact(completion_string, kind);
+            return (int)Index_h$constants_2.clang_index_isEntityObjCContainerKind$MH().invokeExact(x0);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getCompletionBriefComment = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionBriefComment",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getCompletionBriefComment (MemoryAddress completion_string) {
+    public static MethodHandle clang_index_getObjCContainerDeclInfo$MH() {
+        return Index_h$constants_2.clang_index_getObjCContainerDeclInfo$MH();
+    }
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getObjCContainerDeclInfo (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (MemorySegment)clang_getCompletionBriefComment.invokeExact(completion_string);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getObjCContainerDeclInfo$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getCursorCompletionString = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCursorCompletionString",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_getCursorCompletionString (MemorySegment cursor) {
-        try {
-            return (MemoryAddress)clang_getCursorCompletionString.invokeExact(cursor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MemoryLayout CXCodeCompleteResults$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("Results"),
-        CSupport.C_INT.withName("NumResults"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXCodeCompleteResults$NumResults = CXCodeCompleteResults$LAYOUT.varHandle(int.class, PathElement.groupElement("NumResults"));
-    public static final int CXCodeCompleteResults$NumResults$get(MemorySegment seg) {
-        return (int)CXCodeCompleteResults$NumResults.get(seg);
+    public static MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() {
+        return Index_h$constants_2.clang_index_getObjCInterfaceDeclInfo$MH();
     }
-    public static final void CXCodeCompleteResults$NumResults$set(MemorySegment seg, int x) {
-        CXCodeCompleteResults$NumResults.set(seg, x);
-    }
-    public static final MethodHandle clang_getCompletionNumFixIts = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionNumFixIts",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_getCompletionNumFixIts (MemoryAddress results, int completion_index) {
-        try {
-            return (int)clang_getCompletionNumFixIts.invokeExact(results, completion_index);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_getCompletionFixIt = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getCompletionFixIt",
-        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_getCompletionFixIt (MemoryAddress results, int completion_index, int fixit_index, MemoryAddress replacement_range) {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getObjCInterfaceDeclInfo (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (MemorySegment)clang_getCompletionFixIt.invokeExact(results, completion_index, fixit_index, replacement_range);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final int CXCodeComplete_IncludeMacros = (int)1L;
-    public static final int CXCodeComplete_IncludeCodePatterns = (int)2L;
-    public static final int CXCodeComplete_IncludeBriefComments = (int)4L;
-    public static final int CXCodeComplete_SkipPreamble = (int)8L;
-    public static final int CXCodeComplete_IncludeCompletionsWithFixIts = (int)16L;
-    public static final int CXCompletionContext_Unexposed = (int)0L;
-    public static final int CXCompletionContext_AnyType = (int)1L;
-    public static final int CXCompletionContext_AnyValue = (int)2L;
-    public static final int CXCompletionContext_ObjCObjectValue = (int)4L;
-    public static final int CXCompletionContext_ObjCSelectorValue = (int)8L;
-    public static final int CXCompletionContext_CXXClassTypeValue = (int)16L;
-    public static final int CXCompletionContext_DotMemberAccess = (int)32L;
-    public static final int CXCompletionContext_ArrowMemberAccess = (int)64L;
-    public static final int CXCompletionContext_ObjCPropertyAccess = (int)128L;
-    public static final int CXCompletionContext_EnumTag = (int)256L;
-    public static final int CXCompletionContext_UnionTag = (int)512L;
-    public static final int CXCompletionContext_StructTag = (int)1024L;
-    public static final int CXCompletionContext_ClassTag = (int)2048L;
-    public static final int CXCompletionContext_Namespace = (int)4096L;
-    public static final int CXCompletionContext_NestedNameSpecifier = (int)8192L;
-    public static final int CXCompletionContext_ObjCInterface = (int)16384L;
-    public static final int CXCompletionContext_ObjCProtocol = (int)32768L;
-    public static final int CXCompletionContext_ObjCCategory = (int)65536L;
-    public static final int CXCompletionContext_ObjCInstanceMessage = (int)131072L;
-    public static final int CXCompletionContext_ObjCClassMessage = (int)262144L;
-    public static final int CXCompletionContext_ObjCSelectorName = (int)524288L;
-    public static final int CXCompletionContext_MacroName = (int)1048576L;
-    public static final int CXCompletionContext_NaturalLanguage = (int)2097152L;
-    public static final int CXCompletionContext_IncludedFile = (int)4194304L;
-    public static final int CXCompletionContext_Unknown = (int)8388607L;
-    public static final MethodHandle clang_defaultCodeCompleteOptions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_defaultCodeCompleteOptions",
-        "()I",
-        FunctionDescriptor.of(CSupport.C_INT)
-    );
-    public static final int clang_defaultCodeCompleteOptions () {
-        try {
-            return (int)clang_defaultCodeCompleteOptions.invokeExact();
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getObjCInterfaceDeclInfo$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_codeCompleteAt = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_codeCompleteAt",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_codeCompleteAt (MemoryAddress TU, MemoryAddress complete_filename, int complete_line, int complete_column, MemoryAddress unsaved_files, int num_unsaved_files, int options) {
-        try {
-            return (MemoryAddress)clang_codeCompleteAt.invokeExact(TU, complete_filename, complete_line, complete_column, unsaved_files, num_unsaved_files, options);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_getObjCCategoryDeclInfo$MH() {
+        return Index_h$constants_2.clang_index_getObjCCategoryDeclInfo$MH();
     }
-    public static final MethodHandle clang_sortCodeCompletionResults = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_sortCodeCompletionResults",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final void clang_sortCodeCompletionResults (MemoryAddress Results, int NumResults) {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getObjCCategoryDeclInfo (jdk.incubator.foreign.Addressable x0) {
         try {
-            clang_sortCodeCompletionResults.invokeExact(Results, NumResults);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getObjCCategoryDeclInfo$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_disposeCodeCompleteResults = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_disposeCodeCompleteResults",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_disposeCodeCompleteResults (MemoryAddress Results) {
-        try {
-            clang_disposeCodeCompleteResults.invokeExact(Results);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_getObjCProtocolRefListInfo$MH() {
+        return Index_h$constants_2.clang_index_getObjCProtocolRefListInfo$MH();
     }
-    public static final MethodHandle clang_codeCompleteGetNumDiagnostics = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_codeCompleteGetNumDiagnostics",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_codeCompleteGetNumDiagnostics (MemoryAddress Results) {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getObjCProtocolRefListInfo (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_codeCompleteGetNumDiagnostics.invokeExact(Results);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getObjCProtocolRefListInfo$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_codeCompleteGetDiagnostic = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_codeCompleteGetDiagnostic",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_codeCompleteGetDiagnostic (MemoryAddress Results, int Index) {
-        try {
-            return (MemoryAddress)clang_codeCompleteGetDiagnostic.invokeExact(Results, Index);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_getObjCPropertyDeclInfo$MH() {
+        return Index_h$constants_2.clang_index_getObjCPropertyDeclInfo$MH();
     }
-    public static final MethodHandle clang_codeCompleteGetContexts = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_codeCompleteGetContexts",
-        "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            CSupport.C_POINTER
-        )
-    );
-    public static final long clang_codeCompleteGetContexts (MemoryAddress Results) {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getObjCPropertyDeclInfo (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (long)clang_codeCompleteGetContexts.invokeExact(Results);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getObjCPropertyDeclInfo$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_codeCompleteGetContainerKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_codeCompleteGetContainerKind",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_codeCompleteGetContainerKind (MemoryAddress Results, MemoryAddress IsIncomplete) {
-        try {
-            return (int)clang_codeCompleteGetContainerKind.invokeExact(Results, IsIncomplete);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() {
+        return Index_h$constants_2.clang_index_getIBOutletCollectionAttrInfo$MH();
     }
-    public static final MethodHandle clang_codeCompleteGetContainerUSR = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_codeCompleteGetContainerUSR",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_codeCompleteGetContainerUSR (MemoryAddress Results) {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getIBOutletCollectionAttrInfo (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (MemorySegment)clang_codeCompleteGetContainerUSR.invokeExact(Results);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getIBOutletCollectionAttrInfo$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_codeCompleteGetObjCSelector = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_codeCompleteGetObjCSelector",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemorySegment clang_codeCompleteGetObjCSelector (MemoryAddress Results) {
-        try {
-            return (MemorySegment)clang_codeCompleteGetObjCSelector.invokeExact(Results);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_getCXXClassDeclInfo$MH() {
+        return Index_h$constants_2.clang_index_getCXXClassDeclInfo$MH();
     }
-    public static final MethodHandle clang_getClangVersion = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getClangVersion",
-        "()Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            CSupport.C_POINTER.withName("data"),
-            CSupport.C_INT.withName("private_flags"),
-            MemoryLayout.ofPaddingBits(32)
-        ))
-    );
-    public static final MemorySegment clang_getClangVersion () {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getCXXClassDeclInfo (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (MemorySegment)clang_getClangVersion.invokeExact();
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getCXXClassDeclInfo$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_toggleCrashRecovery = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_toggleCrashRecovery",
-        "(I)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_INT
-        )
-    );
-    public static final void clang_toggleCrashRecovery (int isEnabled) {
-        try {
-            clang_toggleCrashRecovery.invokeExact(isEnabled);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_getClientContainer$MH() {
+        return Index_h$constants_2.clang_index_getClientContainer$MH();
     }
-    public static final MethodHandle clang_getInclusions = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getInclusions",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_getInclusions (MemoryAddress tu, MemoryAddress visitor, MemoryAddress client_data) {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getClientContainer (jdk.incubator.foreign.Addressable x0) {
         try {
-            clang_getInclusions.invokeExact(tu, visitor, client_data);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getClientContainer$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    private static final FunctionDescriptor clang_getInclusions$visitor$DESC = FunctionDescriptor.ofVoid(
-        CSupport.C_POINTER,
-        CSupport.C_POINTER,
-        CSupport.C_INT,
-        CSupport.C_POINTER
-    );
-    public interface clang_getInclusions$visitor {
-        void apply(MemoryAddress x0, MemoryAddress x1, int x2, MemoryAddress x3);
-    }
-    public static final MemoryAddress clang_getInclusions$visitor$make(clang_getInclusions$visitor fi) {
-        return RuntimeHelper.upcallStub(clang_getInclusions$visitor.class, fi, clang_getInclusions$visitor$DESC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
+    public static MethodHandle clang_index_setClientContainer$MH() {
+        return Index_h$constants_2.clang_index_setClientContainer$MH();
     }
-    public static final int CXEval_Int = (int)1L;
-    public static final int CXEval_Float = (int)2L;
-    public static final int CXEval_ObjCStrLiteral = (int)3L;
-    public static final int CXEval_StrLiteral = (int)4L;
-    public static final int CXEval_CFStr = (int)5L;
-    public static final int CXEval_Other = (int)6L;
-    public static final int CXEval_UnExposed = (int)0L;
-    public static final MethodHandle clang_Cursor_Evaluate = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Cursor_Evaluate",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            )
-        )
-    );
-    public static final MemoryAddress clang_Cursor_Evaluate (MemorySegment C) {
+    public static void clang_index_setClientContainer (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
         try {
-            return (MemoryAddress)clang_Cursor_Evaluate.invokeExact(C);
+            Index_h$constants_2.clang_index_setClientContainer$MH().invokeExact(x0.address(), x1.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_EvalResult_getKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_getKind",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_EvalResult_getKind (MemoryAddress E) {
-        try {
-            return (int)clang_EvalResult_getKind.invokeExact(E);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_getClientEntity$MH() {
+        return Index_h$constants_2.clang_index_getClientEntity$MH();
     }
-    public static final MethodHandle clang_EvalResult_getAsInt = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_getAsInt",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_EvalResult_getAsInt (MemoryAddress E) {
+    public static jdk.incubator.foreign.MemoryAddress clang_index_getClientEntity (jdk.incubator.foreign.Addressable x0) {
         try {
-            return (int)clang_EvalResult_getAsInt.invokeExact(E);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_index_getClientEntity$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_EvalResult_getAsLongLong = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_getAsLongLong",
-        "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            CSupport.C_POINTER
-        )
-    );
-    public static final long clang_EvalResult_getAsLongLong (MemoryAddress E) {
-        try {
-            return (long)clang_EvalResult_getAsLongLong.invokeExact(E);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_index_setClientEntity$MH() {
+        return Index_h$constants_2.clang_index_setClientEntity$MH();
     }
-    public static final MethodHandle clang_EvalResult_isUnsignedInt = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_isUnsignedInt",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_EvalResult_isUnsignedInt (MemoryAddress E) {
+    public static void clang_index_setClientEntity (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
         try {
-            return (int)clang_EvalResult_isUnsignedInt.invokeExact(E);
+            Index_h$constants_2.clang_index_setClientEntity$MH().invokeExact(x0.address(), x1.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_EvalResult_getAsUnsigned = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_getAsUnsigned",
-        "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(CSupport.C_LONGLONG,
-            CSupport.C_POINTER
-        )
-    );
-    public static final long clang_EvalResult_getAsUnsigned (MemoryAddress E) {
-        try {
-            return (long)clang_EvalResult_getAsUnsigned.invokeExact(E);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_IndexAction_create$MH() {
+        return Index_h$constants_2.clang_IndexAction_create$MH();
     }
-    public static final MethodHandle clang_EvalResult_getAsDouble = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_getAsDouble",
-        "(Ljdk/incubator/foreign/MemoryAddress;)D",
-        FunctionDescriptor.of(CSupport.C_DOUBLE,
-            CSupport.C_POINTER
-        )
-    );
-    public static final double clang_EvalResult_getAsDouble (MemoryAddress E) {
+    public static jdk.incubator.foreign.MemoryAddress clang_IndexAction_create (jdk.incubator.foreign.Addressable CIdx) {
         try {
-            return (double)clang_EvalResult_getAsDouble.invokeExact(E);
+            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_2.clang_IndexAction_create$MH().invokeExact(CIdx.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_EvalResult_getAsStr = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_getAsStr",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_EvalResult_getAsStr (MemoryAddress E) {
-        try {
-            return (MemoryAddress)clang_EvalResult_getAsStr.invokeExact(E);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_IndexAction_dispose$MH() {
+        return Index_h$constants_2.clang_IndexAction_dispose$MH();
     }
-    public static final MethodHandle clang_EvalResult_dispose = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_EvalResult_dispose",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_EvalResult_dispose (MemoryAddress E) {
+    public static void clang_IndexAction_dispose (jdk.incubator.foreign.Addressable x0) {
         try {
-            clang_EvalResult_dispose.invokeExact(E);
+            Index_h$constants_2.clang_IndexAction_dispose$MH().invokeExact(x0.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_getRemappings = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getRemappings",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_getRemappings (MemoryAddress path) {
-        try {
-            return (MemoryAddress)clang_getRemappings.invokeExact(path);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXIndexOpt_None() {
+        return Index_h$constants_2.CXIndexOpt_None();
     }
-    public static final MethodHandle clang_getRemappingsFromFileList = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_getRemappingsFromFileList",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final MemoryAddress clang_getRemappingsFromFileList (MemoryAddress filePaths, int numFiles) {
-        try {
-            return (MemoryAddress)clang_getRemappingsFromFileList.invokeExact(filePaths, numFiles);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXIndexOpt_SuppressRedundantRefs() {
+        return Index_h$constants_2.CXIndexOpt_SuppressRedundantRefs();
     }
-    public static final MethodHandle clang_remap_getNumFiles = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_remap_getNumFiles",
-        "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_remap_getNumFiles (MemoryAddress x0) {
-        try {
-            return (int)clang_remap_getNumFiles.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXIndexOpt_IndexFunctionLocalSymbols() {
+        return Index_h$constants_2.CXIndexOpt_IndexFunctionLocalSymbols();
     }
-    public static final MethodHandle clang_remap_getFilenames = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_remap_getFilenames",
-        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_remap_getFilenames (MemoryAddress x0, int index, MemoryAddress original, MemoryAddress transformed) {
-        try {
-            clang_remap_getFilenames.invokeExact(x0, index, original, transformed);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXIndexOpt_IndexImplicitTemplateInstantiations() {
+        return Index_h$constants_2.CXIndexOpt_IndexImplicitTemplateInstantiations();
     }
-    public static final MethodHandle clang_remap_dispose = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_remap_dispose",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_remap_dispose (MemoryAddress x0) {
-        try {
-            clang_remap_dispose.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXIndexOpt_SuppressWarnings() {
+        return Index_h$constants_2.CXIndexOpt_SuppressWarnings();
     }
-    public static final int CXVisit_Break = (int)0L;
-    public static final int CXVisit_Continue = (int)1L;
-    public static final MemoryLayout CXCursorAndRangeVisitor$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("context"),
-        CSupport.C_POINTER.withName("visit")
-    ).withName("CXCursorAndRangeVisitor");
-    public static final int CXResult_Success = (int)0L;
-    public static final int CXResult_Invalid = (int)1L;
-    public static final int CXResult_VisitBreak = (int)2L;
-    public static final MethodHandle clang_findReferencesInFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_findReferencesInFile",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                CSupport.C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("context"),
-                CSupport.C_POINTER.withName("visit")
-            ).withName("CXCursorAndRangeVisitor")
-        )
-    );
-    public static final int clang_findReferencesInFile (MemorySegment cursor, MemoryAddress file, MemorySegment visitor) {
-        try {
-            return (int)clang_findReferencesInFile.invokeExact(cursor, file, visitor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_findIncludesInFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_findIncludesInFile",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            MemoryLayout.ofStruct(
-                CSupport.C_POINTER.withName("context"),
-                CSupport.C_POINTER.withName("visit")
-            ).withName("CXCursorAndRangeVisitor")
-        )
-    );
-    public static final int clang_findIncludesInFile (MemoryAddress TU, MemoryAddress file, MemorySegment visitor) {
-        try {
-            return (int)clang_findIncludesInFile.invokeExact(TU, file, visitor);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MemoryLayout CXIdxLoc$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-        CSupport.C_INT.withName("int_data"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxLoc$int_data = CXIdxLoc$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
-    public static final int CXIdxLoc$int_data$get(MemorySegment seg) {
-        return (int)CXIdxLoc$int_data.get(seg);
-    }
-    public static final void CXIdxLoc$int_data$set(MemorySegment seg, int x) {
-        CXIdxLoc$int_data.set(seg, x);
-    }
-    public static final MemoryLayout CXIdxIncludedFileInfo$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("hashLoc"),
-        CSupport.C_POINTER.withName("filename"),
-        CSupport.C_POINTER.withName("file"),
-        CSupport.C_INT.withName("isImport"),
-        CSupport.C_INT.withName("isAngled"),
-        CSupport.C_INT.withName("isModuleImport"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxIncludedFileInfo$isImport = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImport"));
-    public static final int CXIdxIncludedFileInfo$isImport$get(MemorySegment seg) {
-        return (int)CXIdxIncludedFileInfo$isImport.get(seg);
-    }
-    public static final void CXIdxIncludedFileInfo$isImport$set(MemorySegment seg, int x) {
-        CXIdxIncludedFileInfo$isImport.set(seg, x);
-    }
-    public static final VarHandle CXIdxIncludedFileInfo$isAngled = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isAngled"));
-    public static final int CXIdxIncludedFileInfo$isAngled$get(MemorySegment seg) {
-        return (int)CXIdxIncludedFileInfo$isAngled.get(seg);
-    }
-    public static final void CXIdxIncludedFileInfo$isAngled$set(MemorySegment seg, int x) {
-        CXIdxIncludedFileInfo$isAngled.set(seg, x);
-    }
-    public static final VarHandle CXIdxIncludedFileInfo$isModuleImport = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isModuleImport"));
-    public static final int CXIdxIncludedFileInfo$isModuleImport$get(MemorySegment seg) {
-        return (int)CXIdxIncludedFileInfo$isModuleImport.get(seg);
-    }
-    public static final void CXIdxIncludedFileInfo$isModuleImport$set(MemorySegment seg, int x) {
-        CXIdxIncludedFileInfo$isModuleImport.set(seg, x);
-    }
-    public static final MemoryLayout CXIdxImportedASTFileInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("file"),
-        CSupport.C_POINTER.withName("module"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("loc"),
-        CSupport.C_INT.withName("isImplicit"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxImportedASTFileInfo$isImplicit = CXIdxImportedASTFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImplicit"));
-    public static final int CXIdxImportedASTFileInfo$isImplicit$get(MemorySegment seg) {
-        return (int)CXIdxImportedASTFileInfo$isImplicit.get(seg);
-    }
-    public static final void CXIdxImportedASTFileInfo$isImplicit$set(MemorySegment seg, int x) {
-        CXIdxImportedASTFileInfo$isImplicit.set(seg, x);
-    }
-    public static final int CXIdxEntity_Unexposed = (int)0L;
-    public static final int CXIdxEntity_Typedef = (int)1L;
-    public static final int CXIdxEntity_Function = (int)2L;
-    public static final int CXIdxEntity_Variable = (int)3L;
-    public static final int CXIdxEntity_Field = (int)4L;
-    public static final int CXIdxEntity_EnumConstant = (int)5L;
-    public static final int CXIdxEntity_ObjCClass = (int)6L;
-    public static final int CXIdxEntity_ObjCProtocol = (int)7L;
-    public static final int CXIdxEntity_ObjCCategory = (int)8L;
-    public static final int CXIdxEntity_ObjCInstanceMethod = (int)9L;
-    public static final int CXIdxEntity_ObjCClassMethod = (int)10L;
-    public static final int CXIdxEntity_ObjCProperty = (int)11L;
-    public static final int CXIdxEntity_ObjCIvar = (int)12L;
-    public static final int CXIdxEntity_Enum = (int)13L;
-    public static final int CXIdxEntity_Struct = (int)14L;
-    public static final int CXIdxEntity_Union = (int)15L;
-    public static final int CXIdxEntity_CXXClass = (int)16L;
-    public static final int CXIdxEntity_CXXNamespace = (int)17L;
-    public static final int CXIdxEntity_CXXNamespaceAlias = (int)18L;
-    public static final int CXIdxEntity_CXXStaticVariable = (int)19L;
-    public static final int CXIdxEntity_CXXStaticMethod = (int)20L;
-    public static final int CXIdxEntity_CXXInstanceMethod = (int)21L;
-    public static final int CXIdxEntity_CXXConstructor = (int)22L;
-    public static final int CXIdxEntity_CXXDestructor = (int)23L;
-    public static final int CXIdxEntity_CXXConversionFunction = (int)24L;
-    public static final int CXIdxEntity_CXXTypeAlias = (int)25L;
-    public static final int CXIdxEntity_CXXInterface = (int)26L;
-    public static final int CXIdxEntityLang_None = (int)0L;
-    public static final int CXIdxEntityLang_C = (int)1L;
-    public static final int CXIdxEntityLang_ObjC = (int)2L;
-    public static final int CXIdxEntityLang_CXX = (int)3L;
-    public static final int CXIdxEntityLang_Swift = (int)4L;
-    public static final int CXIdxEntity_NonTemplate = (int)0L;
-    public static final int CXIdxEntity_Template = (int)1L;
-    public static final int CXIdxEntity_TemplatePartialSpecialization = (int)2L;
-    public static final int CXIdxEntity_TemplateSpecialization = (int)3L;
-    public static final int CXIdxAttr_Unexposed = (int)0L;
-    public static final int CXIdxAttr_IBAction = (int)1L;
-    public static final int CXIdxAttr_IBOutlet = (int)2L;
-    public static final int CXIdxAttr_IBOutletCollection = (int)3L;
-    public static final MemoryLayout CXIdxAttrInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("kind"),
-        MemoryLayout.ofPaddingBits(32),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("cursor"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("loc")
-    );
-    public static final VarHandle CXIdxAttrInfo$kind = CXIdxAttrInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
-    public static final int CXIdxAttrInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxAttrInfo$kind.get(seg);
-    }
-    public static final void CXIdxAttrInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxAttrInfo$kind.set(seg, x);
-    }
-    public static final MemoryLayout CXIdxEntityInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("kind"),
-        CSupport.C_INT.withName("templateKind"),
-        CSupport.C_INT.withName("lang"),
-        MemoryLayout.ofPaddingBits(32),
-        CSupport.C_POINTER.withName("name"),
-        CSupport.C_POINTER.withName("USR"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("cursor"),
-        CSupport.C_POINTER.withName("attributes"),
-        CSupport.C_INT.withName("numAttributes"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxEntityInfo$kind = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
-    public static final int CXIdxEntityInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$kind.get(seg);
-    }
-    public static final void CXIdxEntityInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$kind.set(seg, x);
-    }
-    public static final VarHandle CXIdxEntityInfo$templateKind = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("templateKind"));
-    public static final int CXIdxEntityInfo$templateKind$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$templateKind.get(seg);
-    }
-    public static final void CXIdxEntityInfo$templateKind$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$templateKind.set(seg, x);
-    }
-    public static final VarHandle CXIdxEntityInfo$lang = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("lang"));
-    public static final int CXIdxEntityInfo$lang$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$lang.get(seg);
-    }
-    public static final void CXIdxEntityInfo$lang$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$lang.set(seg, x);
-    }
-    public static final VarHandle CXIdxEntityInfo$numAttributes = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numAttributes"));
-    public static final int CXIdxEntityInfo$numAttributes$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$numAttributes.get(seg);
-    }
-    public static final void CXIdxEntityInfo$numAttributes$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$numAttributes.set(seg, x);
-    }
-    public static final MemoryLayout CXIdxContainerInfo$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("cursor")
-    );
-    public static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("attrInfo"),
-        CSupport.C_POINTER.withName("objcClass"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("classCursor"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("classLoc")
-    );
-    public static final int CXIdxDeclFlag_Skipped = (int)1L;
-    public static final MemoryLayout CXIdxDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("entityInfo"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("cursor"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("loc"),
-        CSupport.C_POINTER.withName("semanticContainer"),
-        CSupport.C_POINTER.withName("lexicalContainer"),
-        CSupport.C_INT.withName("isRedeclaration"),
-        CSupport.C_INT.withName("isDefinition"),
-        CSupport.C_INT.withName("isContainer"),
-        MemoryLayout.ofPaddingBits(32),
-        CSupport.C_POINTER.withName("declAsContainer"),
-        CSupport.C_INT.withName("isImplicit"),
-        MemoryLayout.ofPaddingBits(32),
-        CSupport.C_POINTER.withName("attributes"),
-        CSupport.C_INT.withName("numAttributes"),
-        CSupport.C_INT.withName("flags")
-    );
-    public static final VarHandle CXIdxDeclInfo$isRedeclaration = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isRedeclaration"));
-    public static final int CXIdxDeclInfo$isRedeclaration$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isRedeclaration.get(seg);
-    }
-    public static final void CXIdxDeclInfo$isRedeclaration$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isRedeclaration.set(seg, x);
-    }
-    public static final VarHandle CXIdxDeclInfo$isDefinition = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isDefinition"));
-    public static final int CXIdxDeclInfo$isDefinition$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isDefinition.get(seg);
-    }
-    public static final void CXIdxDeclInfo$isDefinition$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isDefinition.set(seg, x);
-    }
-    public static final VarHandle CXIdxDeclInfo$isContainer = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isContainer"));
-    public static final int CXIdxDeclInfo$isContainer$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isContainer.get(seg);
-    }
-    public static final void CXIdxDeclInfo$isContainer$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isContainer.set(seg, x);
-    }
-    public static final VarHandle CXIdxDeclInfo$isImplicit = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImplicit"));
-    public static final int CXIdxDeclInfo$isImplicit$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isImplicit.get(seg);
-    }
-    public static final void CXIdxDeclInfo$isImplicit$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isImplicit.set(seg, x);
-    }
-    public static final VarHandle CXIdxDeclInfo$numAttributes = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numAttributes"));
-    public static final int CXIdxDeclInfo$numAttributes$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$numAttributes.get(seg);
-    }
-    public static final void CXIdxDeclInfo$numAttributes$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$numAttributes.set(seg, x);
-    }
-    public static final VarHandle CXIdxDeclInfo$flags = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("flags"));
-    public static final int CXIdxDeclInfo$flags$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$flags.get(seg);
-    }
-    public static final void CXIdxDeclInfo$flags$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$flags.set(seg, x);
-    }
-    public static final int CXIdxObjCContainer_ForwardRef = (int)0L;
-    public static final int CXIdxObjCContainer_Interface = (int)1L;
-    public static final int CXIdxObjCContainer_Implementation = (int)2L;
-    public static final MemoryLayout CXIdxObjCContainerDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("declInfo"),
-        CSupport.C_INT.withName("kind"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxObjCContainerDeclInfo$kind = CXIdxObjCContainerDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
-    public static final int CXIdxObjCContainerDeclInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxObjCContainerDeclInfo$kind.get(seg);
-    }
-    public static final void CXIdxObjCContainerDeclInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxObjCContainerDeclInfo$kind.set(seg, x);
-    }
-    public static final MemoryLayout CXIdxBaseClassInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("base"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("cursor"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("loc")
-    );
-    public static final MemoryLayout CXIdxObjCProtocolRefInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("protocol"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("cursor"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("loc")
-    );
-    public static final MemoryLayout CXIdxObjCProtocolRefListInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("protocols"),
-        CSupport.C_INT.withName("numProtocols"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxObjCProtocolRefListInfo$numProtocols = CXIdxObjCProtocolRefListInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numProtocols"));
-    public static final int CXIdxObjCProtocolRefListInfo$numProtocols$get(MemorySegment seg) {
-        return (int)CXIdxObjCProtocolRefListInfo$numProtocols.get(seg);
-    }
-    public static final void CXIdxObjCProtocolRefListInfo$numProtocols$set(MemorySegment seg, int x) {
-        CXIdxObjCProtocolRefListInfo$numProtocols.set(seg, x);
-    }
-    public static final MemoryLayout CXIdxObjCInterfaceDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("containerInfo"),
-        CSupport.C_POINTER.withName("superInfo"),
-        CSupport.C_POINTER.withName("protocols")
-    );
-    public static final MemoryLayout CXIdxObjCCategoryDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("containerInfo"),
-        CSupport.C_POINTER.withName("objcClass"),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("classCursor"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("classLoc"),
-        CSupport.C_POINTER.withName("protocols")
-    );
-    public static final MemoryLayout CXIdxObjCPropertyDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("declInfo"),
-        CSupport.C_POINTER.withName("getter"),
-        CSupport.C_POINTER.withName("setter")
-    );
-    public static final MemoryLayout CXIdxCXXClassDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("declInfo"),
-        CSupport.C_POINTER.withName("bases"),
-        CSupport.C_INT.withName("numBases"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxCXXClassDeclInfo$numBases = CXIdxCXXClassDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numBases"));
-    public static final int CXIdxCXXClassDeclInfo$numBases$get(MemorySegment seg) {
-        return (int)CXIdxCXXClassDeclInfo$numBases.get(seg);
-    }
-    public static final void CXIdxCXXClassDeclInfo$numBases$set(MemorySegment seg, int x) {
-        CXIdxCXXClassDeclInfo$numBases.set(seg, x);
-    }
-    public static final int CXIdxEntityRef_Direct = (int)1L;
-    public static final int CXIdxEntityRef_Implicit = (int)2L;
-    public static final int CXSymbolRole_None = (int)0L;
-    public static final int CXSymbolRole_Declaration = (int)1L;
-    public static final int CXSymbolRole_Definition = (int)2L;
-    public static final int CXSymbolRole_Reference = (int)4L;
-    public static final int CXSymbolRole_Read = (int)8L;
-    public static final int CXSymbolRole_Write = (int)16L;
-    public static final int CXSymbolRole_Call = (int)32L;
-    public static final int CXSymbolRole_Dynamic = (int)64L;
-    public static final int CXSymbolRole_AddressOf = (int)128L;
-    public static final int CXSymbolRole_Implicit = (int)256L;
-    public static final MemoryLayout CXIdxEntityRefInfo$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_INT.withName("kind"),
-        MemoryLayout.ofPaddingBits(32),
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ).withName("cursor"),
-        MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ).withName("loc"),
-        CSupport.C_POINTER.withName("referencedEntity"),
-        CSupport.C_POINTER.withName("parentEntity"),
-        CSupport.C_POINTER.withName("container"),
-        CSupport.C_INT.withName("role"),
-        MemoryLayout.ofPaddingBits(32)
-    );
-    public static final VarHandle CXIdxEntityRefInfo$kind = CXIdxEntityRefInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
-    public static final int CXIdxEntityRefInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxEntityRefInfo$kind.get(seg);
-    }
-    public static final void CXIdxEntityRefInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxEntityRefInfo$kind.set(seg, x);
-    }
-    public static final VarHandle CXIdxEntityRefInfo$role = CXIdxEntityRefInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("role"));
-    public static final int CXIdxEntityRefInfo$role$get(MemorySegment seg) {
-        return (int)CXIdxEntityRefInfo$role.get(seg);
-    }
-    public static final void CXIdxEntityRefInfo$role$set(MemorySegment seg, int x) {
-        CXIdxEntityRefInfo$role.set(seg, x);
-    }
-    public static final MemoryLayout IndexerCallbacks$LAYOUT = MemoryLayout.ofStruct(
-        CSupport.C_POINTER.withName("abortQuery"),
-        CSupport.C_POINTER.withName("diagnostic"),
-        CSupport.C_POINTER.withName("enteredMainFile"),
-        CSupport.C_POINTER.withName("ppIncludedFile"),
-        CSupport.C_POINTER.withName("importedASTFile"),
-        CSupport.C_POINTER.withName("startedTranslationUnit"),
-        CSupport.C_POINTER.withName("indexDeclaration"),
-        CSupport.C_POINTER.withName("indexEntityReference")
-    );
-    public static final MethodHandle clang_index_isEntityObjCContainerKind = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_isEntityObjCContainerKind",
-        "(I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_index_isEntityObjCContainerKind (int x0) {
-        try {
-            return (int)clang_index_isEntityObjCContainerKind.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_index_getObjCContainerDeclInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getObjCContainerDeclInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getObjCContainerDeclInfo (MemoryAddress x0) {
-        try {
-            return (MemoryAddress)clang_index_getObjCContainerDeclInfo.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static int CXIndexOpt_SkipParsedBodiesInSession() {
+        return Index_h$constants_2.CXIndexOpt_SkipParsedBodiesInSession();
     }
-    public static final MethodHandle clang_index_getObjCInterfaceDeclInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getObjCInterfaceDeclInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getObjCInterfaceDeclInfo (MemoryAddress x0) {
-        try {
-            return (MemoryAddress)clang_index_getObjCInterfaceDeclInfo.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_indexSourceFile$MH() {
+        return Index_h$constants_2.clang_indexSourceFile$MH();
     }
-    public static final MethodHandle clang_index_getObjCCategoryDeclInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getObjCCategoryDeclInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getObjCCategoryDeclInfo (MemoryAddress x0) {
+    public static int clang_indexSourceFile (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable client_data, jdk.incubator.foreign.Addressable index_callbacks, int index_callbacks_size, int index_options, jdk.incubator.foreign.Addressable source_filename, jdk.incubator.foreign.Addressable command_line_args, int num_command_line_args, jdk.incubator.foreign.Addressable unsaved_files, int num_unsaved_files, jdk.incubator.foreign.Addressable out_TU, int TU_options) {
         try {
-            return (MemoryAddress)clang_index_getObjCCategoryDeclInfo.invokeExact(x0);
+            return (int)Index_h$constants_2.clang_indexSourceFile$MH().invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_index_getObjCProtocolRefListInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getObjCProtocolRefListInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getObjCProtocolRefListInfo (MemoryAddress x0) {
-        try {
-            return (MemoryAddress)clang_index_getObjCProtocolRefListInfo.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_indexSourceFileFullArgv$MH() {
+        return Index_h$constants_2.clang_indexSourceFileFullArgv$MH();
     }
-    public static final MethodHandle clang_index_getObjCPropertyDeclInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getObjCPropertyDeclInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getObjCPropertyDeclInfo (MemoryAddress x0) {
+    public static int clang_indexSourceFileFullArgv (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable client_data, jdk.incubator.foreign.Addressable index_callbacks, int index_callbacks_size, int index_options, jdk.incubator.foreign.Addressable source_filename, jdk.incubator.foreign.Addressable command_line_args, int num_command_line_args, jdk.incubator.foreign.Addressable unsaved_files, int num_unsaved_files, jdk.incubator.foreign.Addressable out_TU, int TU_options) {
         try {
-            return (MemoryAddress)clang_index_getObjCPropertyDeclInfo.invokeExact(x0);
+            return (int)Index_h$constants_2.clang_indexSourceFileFullArgv$MH().invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_index_getIBOutletCollectionAttrInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getIBOutletCollectionAttrInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getIBOutletCollectionAttrInfo (MemoryAddress x0) {
-        try {
-            return (MemoryAddress)clang_index_getIBOutletCollectionAttrInfo.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_indexTranslationUnit$MH() {
+        return Index_h$constants_2.clang_indexTranslationUnit$MH();
     }
-    public static final MethodHandle clang_index_getCXXClassDeclInfo = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getCXXClassDeclInfo",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getCXXClassDeclInfo (MemoryAddress x0) {
+    public static int clang_indexTranslationUnit (jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable client_data, jdk.incubator.foreign.Addressable index_callbacks, int index_callbacks_size, int index_options, jdk.incubator.foreign.Addressable x5) {
         try {
-            return (MemoryAddress)clang_index_getCXXClassDeclInfo.invokeExact(x0);
+            return (int)Index_h$constants_2.clang_indexTranslationUnit$MH().invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, x5.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_index_getClientContainer = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getClientContainer",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getClientContainer (MemoryAddress x0) {
-        try {
-            return (MemoryAddress)clang_index_getClientContainer.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_indexLoc_getFileLocation$MH() {
+        return Index_h$constants_2.clang_indexLoc_getFileLocation$MH();
     }
-    public static final MethodHandle clang_index_setClientContainer = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_setClientContainer",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_index_setClientContainer (MemoryAddress x0, MemoryAddress x1) {
+    public static void clang_indexLoc_getFileLocation (jdk.incubator.foreign.MemorySegment loc, jdk.incubator.foreign.Addressable indexFile, jdk.incubator.foreign.Addressable file, jdk.incubator.foreign.Addressable line, jdk.incubator.foreign.Addressable column, jdk.incubator.foreign.Addressable offset) {
         try {
-            clang_index_setClientContainer.invokeExact(x0, x1);
+            Index_h$constants_2.clang_indexLoc_getFileLocation$MH().invokeExact(loc, indexFile.address(), file.address(), line.address(), column.address(), offset.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_index_getClientEntity = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_getClientEntity",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_index_getClientEntity (MemoryAddress x0) {
-        try {
-            return (MemoryAddress)clang_index_getClientEntity.invokeExact(x0);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_indexLoc_getCXSourceLocation$MH() {
+        return Index_h$constants_2.clang_indexLoc_getCXSourceLocation$MH();
     }
-    public static final MethodHandle clang_index_setClientEntity = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_index_setClientEntity",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_index_setClientEntity (MemoryAddress x0, MemoryAddress x1) {
+    public static jdk.incubator.foreign.MemorySegment clang_indexLoc_getCXSourceLocation (jdk.incubator.foreign.MemorySegment loc) {
         try {
-            clang_index_setClientEntity.invokeExact(x0, x1);
+            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_2.clang_indexLoc_getCXSourceLocation$MH().invokeExact(loc);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final MethodHandle clang_IndexAction_create = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_IndexAction_create",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final MemoryAddress clang_IndexAction_create (MemoryAddress CIdx) {
-        try {
-            return (MemoryAddress)clang_IndexAction_create.invokeExact(CIdx);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
+    public static MethodHandle clang_Type_visitFields$MH() {
+        return Index_h$constants_2.clang_Type_visitFields$MH();
     }
-    public static final MethodHandle clang_IndexAction_dispose = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_IndexAction_dispose",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_IndexAction_dispose (MemoryAddress x0) {
+    public static int clang_Type_visitFields (jdk.incubator.foreign.MemorySegment T, jdk.incubator.foreign.Addressable visitor, jdk.incubator.foreign.Addressable client_data) {
         try {
-            clang_IndexAction_dispose.invokeExact(x0);
+            return (int)Index_h$constants_2.clang_Type_visitFields$MH().invokeExact(T, visitor.address(), client_data.address());
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    public static final int CXIndexOpt_None = (int)0L;
-    public static final int CXIndexOpt_SuppressRedundantRefs = (int)1L;
-    public static final int CXIndexOpt_IndexFunctionLocalSymbols = (int)2L;
-    public static final int CXIndexOpt_IndexImplicitTemplateInstantiations = (int)4L;
-    public static final int CXIndexOpt_SuppressWarnings = (int)8L;
-    public static final int CXIndexOpt_SkipParsedBodiesInSession = (int)16L;
-    public static final MethodHandle clang_indexSourceFile = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_indexSourceFile",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_indexSourceFile (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, MemoryAddress out_TU, int TU_options) {
-        try {
-            return (int)clang_indexSourceFile.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+    public interface clang_Type_visitFields$visitor {
+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemoryAddress x1);
+        public static MemorySegment allocate(clang_Type_visitFields$visitor fi) {
+            return RuntimeHelper.upcallStub(clang_Type_visitFields$visitor.class, fi, Index_h$constants_2.clang_Type_visitFields$visitor$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
         }
-    }
-    public static final MethodHandle clang_indexSourceFileFullArgv = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_indexSourceFileFullArgv",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_INT
-        )
-    );
-    public static final int clang_indexSourceFileFullArgv (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, MemoryAddress out_TU, int TU_options) {
-        try {
-            return (int)clang_indexSourceFileFullArgv.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
+        public static MemorySegment allocate(clang_Type_visitFields$visitor fi, NativeScope scope) {
+            return scope.register(allocate(fi));
         }
     }
-    public static final MethodHandle clang_indexTranslationUnit = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_indexTranslationUnit",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_INT,
-            CSupport.C_INT,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_indexTranslationUnit (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress x5) {
-        try {
-            return (int)clang_indexTranslationUnit.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, x5);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_indexLoc_getFileLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_indexLoc_getFileLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
-        FunctionDescriptor.ofVoid(
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final void clang_indexLoc_getFileLocation (MemorySegment loc, MemoryAddress indexFile, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
-        try {
-            clang_indexLoc_getFileLocation.invokeExact(loc, indexFile, file, line, column, offset);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_indexLoc_getCXSourceLocation = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_indexLoc_getCXSourceLocation",
-        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
-        FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-            CSupport.C_INT.withName("int_data"),
-            MemoryLayout.ofPaddingBits(32)
-        ),
-            MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
-                CSupport.C_INT.withName("int_data"),
-                MemoryLayout.ofPaddingBits(32)
-            )
-        )
-    );
-    public static final MemorySegment clang_indexLoc_getCXSourceLocation (MemorySegment loc) {
-        try {
-            return (MemorySegment)clang_indexLoc_getCXSourceLocation.invokeExact(loc);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    public static final MethodHandle clang_Type_visitFields = RuntimeHelper.downcallHandle(
-        LIBRARIES, "clang_Type_visitFields",
-        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(CSupport.C_INT,
-            MemoryLayout.ofStruct(
-                CSupport.C_INT.withName("kind"),
-                MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
-            ),
-            CSupport.C_POINTER,
-            CSupport.C_POINTER
-        )
-    );
-    public static final int clang_Type_visitFields (MemorySegment T, MemoryAddress visitor, MemoryAddress client_data) {
-        try {
-            return (int)clang_Type_visitFields.invokeExact(T, visitor, client_data);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-    private static final FunctionDescriptor clang_Type_visitFields$visitor$DESC = FunctionDescriptor.of(CSupport.C_INT,
-        MemoryLayout.ofStruct(
-            CSupport.C_INT.withName("kind"),
-            CSupport.C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
-        ),
-        CSupport.C_POINTER
-    );
-    public interface clang_Type_visitFields$visitor {
-        int apply(MemorySegment x0, MemoryAddress x1);
-    }
-    public static final MemoryAddress clang_Type_visitFields$visitor$make(clang_Type_visitFields$visitor fi) {
-        return RuntimeHelper.upcallStub(clang_Type_visitFields$visitor.class, fi, clang_Type_visitFields$visitor$DESC, "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
+    public static int CINDEX_VERSION() {
+        return Index_h$constants_2.CINDEX_VERSION();
+    }
+    public static MemorySegment CINDEX_VERSION_STRING() {
+        return Index_h$constants_2.CINDEX_VERSION_STRING();
     }
 }
 
 
