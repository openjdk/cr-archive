diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
@@ -51,29 +51,29 @@
  * To allow for more usability, it is possible for an native scope to reclaim ownership of an existing memory segments
  * (see {@link #register(MemorySegment)}). This might be useful to allow one or more segments which were independently
  * created to share the same life-cycle as a given native scope - which in turns enables client to group all memory
  * allocation and usage under a single <em>try-with-resources block</em>.
  */
-public abstract class NativeScope implements AutoCloseable {
+public interface NativeScope extends AutoCloseable {
 
     /**
      * If this native scope is bounded, returns the size, in bytes, of this native scope.
      * @return the size, in bytes, of this native scope (if available).
      */
-    public abstract OptionalLong byteSize();
+    OptionalLong byteSize();
 
     /**
      * The thread owning this native scope.
      * @return the thread owning this native scope.
      */
-    public abstract Thread ownerThread();
+    Thread ownerThread();
 
     /**
      * Returns the number of allocated bytes in this native scope.
      * @return the number of allocated bytes in this native scope.
      */
-    public abstract long allocatedBytes();
+    long allocatedBytes();
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given byte value.
      * The segment returned by this method is associated with a segment which cannot be closed. Moreover, the returned
      * segment must conform to the layout alignment constraints.
@@ -82,11 +82,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a byte value.
      */
-    public MemorySegment allocate(MemoryLayout layout, byte value) {
+    default MemorySegment allocate(MemoryLayout layout, byte value) {
         VarHandle handle = layout.varHandle(byte.class);
         MemorySegment addr = allocate(layout);
         handle.set(addr, value);
         return addr;
     }
@@ -100,11 +100,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a short value.
      */
-    public MemorySegment allocate(MemoryLayout layout, short value) {
+    default MemorySegment allocate(MemoryLayout layout, short value) {
         VarHandle handle = layout.varHandle(short.class);
         MemorySegment addr = allocate(layout);
         handle.set(addr, value);
         return addr;
     }
@@ -118,11 +118,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a int value.
      */
-    public MemorySegment allocate(MemoryLayout layout, int value) {
+    default MemorySegment allocate(MemoryLayout layout, int value) {
         VarHandle handle = layout.varHandle(int.class);
         MemorySegment addr = allocate(layout);
         handle.set(addr, value);
         return addr;
     }
@@ -136,11 +136,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a float value.
      */
-    public MemorySegment allocate(MemoryLayout layout, float value) {
+    default MemorySegment allocate(MemoryLayout layout, float value) {
         VarHandle handle = layout.varHandle(float.class);
         MemorySegment addr = allocate(layout);
         handle.set(addr, value);
         return addr;
     }
@@ -154,11 +154,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a long value.
      */
-    public MemorySegment allocate(MemoryLayout layout, long value) {
+    default MemorySegment allocate(MemoryLayout layout, long value) {
         VarHandle handle = layout.varHandle(long.class);
         MemorySegment addr = allocate(layout);
         handle.set(addr, value);
         return addr;
     }
@@ -172,11 +172,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a double value.
      */
-    public MemorySegment allocate(MemoryLayout layout, double value) {
+    default MemorySegment allocate(MemoryLayout layout, double value) {
         VarHandle handle = layout.varHandle(double.class);
         MemorySegment addr = allocate(layout);
         handle.set(addr, value);
         return addr;
     }
@@ -190,11 +190,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a byte value.
      */
-    public MemorySegment allocateArray(ValueLayout elementLayout, byte[] array) {
+    default MemorySegment allocateArray(ValueLayout elementLayout, byte[] array) {
         return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given short array.
@@ -205,11 +205,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a short value.
      */
-    public MemorySegment allocateArray(ValueLayout elementLayout, short[] array) {
+    default MemorySegment allocateArray(ValueLayout elementLayout, short[] array) {
         return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given char array.
@@ -220,11 +220,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a char value.
      */
-    public MemorySegment allocateArray(ValueLayout elementLayout, char[] array) {
+    default MemorySegment allocateArray(ValueLayout elementLayout, char[] array) {
         return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given int array.
@@ -235,11 +235,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a int value.
      */
-    public MemorySegment allocateArray(ValueLayout elementLayout, int[] array) {
+    default MemorySegment allocateArray(ValueLayout elementLayout, int[] array) {
         return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given float array.
@@ -250,11 +250,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a float value.
      */
-    public MemorySegment allocateArray(ValueLayout elementLayout, float[] array) {
+    default MemorySegment allocateArray(ValueLayout elementLayout, float[] array) {
         return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given long array.
@@ -265,11 +265,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a long value.
      */
-    public MemorySegment allocateArray(ValueLayout elementLayout, long[] array) {
+    default MemorySegment allocateArray(ValueLayout elementLayout, long[] array) {
         return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given double array.
@@ -280,11 +280,11 @@
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a double value.
      */
-    public MemorySegment allocateArray(ValueLayout elementLayout, double[] array) {
+    default MemorySegment allocateArray(ValueLayout elementLayout, double[] array) {
         return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     private <Z> MemorySegment copyArrayWithSwapIfNeeded(Z array, ValueLayout elementLayout,
                                                         Function<Z, MemorySegment> heapSegmentFactory) {
@@ -304,11 +304,11 @@
      * @param layout the layout of the block of memory to be allocated.
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      */
-    public MemorySegment allocate(MemoryLayout layout) {
+    default MemorySegment allocate(MemoryLayout layout) {
         return allocate(layout.byteSize(), layout.byteAlignment());
     }
 
     /**
      * Allocate a block of memory corresponding to an array with given element layout and size.
@@ -322,11 +322,11 @@
      * @param size the array element count.
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * size)}.
      */
-    public MemorySegment allocateArray(MemoryLayout elementLayout, long size) {
+    default MemorySegment allocateArray(MemoryLayout elementLayout, long size) {
         return allocate(MemoryLayout.ofSequence(size, elementLayout));
     }
 
     /**
      * Allocate a block of memory in this native scope with given size. The segment returned by this method is
@@ -334,11 +334,11 @@
      * @param bytesSize the size (in bytes) of the block of memory to be allocated.
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < bytesSize}.
      */
-    public MemorySegment allocate(long bytesSize) {
+    default MemorySegment allocate(long bytesSize) {
         return allocate(bytesSize, bytesSize);
     }
 
     /**
      * Allocate a block of memory in this native scope with given size and alignment constraint.
@@ -348,11 +348,11 @@
      * @param bytesAlignment the alignment (in bytes) of the block of memory to be allocated.
      * @return a segment for the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < bytesSize}.
      */
-    public abstract MemorySegment allocate(long bytesSize, long bytesAlignment);
+    MemorySegment allocate(long bytesSize, long bytesAlignment);
 
     /**
      * Register a segment on this scope, which will then reclaim ownership of said segment.
      * The input segment must be closeable - that is, it must feature the {@link MemorySegment#CLOSE} access mode.
      * As a side-effect, the input segment will be marked as <em>not alive</em>, and a new segment will be returned.
@@ -367,31 +367,31 @@
      * @throws IllegalStateException if {@code segment} is not <em>alive</em> (see {@link MemorySegment#isAlive()}).
      * @throws NullPointerException if {@code segment == null}
      * @throws IllegalArgumentException if {@code segment} is not confined and {@code segment.ownerThread() != this.ownerThread()},
      * or if {@code segment} does not feature the {@link MemorySegment#CLOSE} access mode.
      */
-    public abstract MemorySegment register(MemorySegment segment);
+    MemorySegment register(MemorySegment segment);
 
     /**
      * Close this native scope; calling this method will render any segment obtained through this native scope
      * unusable and might release any backing memory resources associated with this native scope.
      */
     @Override
-    public abstract void close();
+    void close();
 
     /**
      * Creates a new bounded native scope, backed by off-heap memory.
      * @param size the size of the native scope.
      * @return a new bounded native scope, with given size (in bytes).
      */
-    public static NativeScope boundedScope(long size) {
+    static NativeScope boundedScope(long size) {
         return new AbstractNativeScope.BoundedNativeScope(size);
     }
 
     /**
      * Creates a new unbounded native scope, backed by off-heap memory.
      * @return a new unbounded native scope.
      */
-    public static NativeScope unboundedScope() {
+    static NativeScope unboundedScope() {
         return new AbstractNativeScope.UnboundedNativeScope();
     }
 }
