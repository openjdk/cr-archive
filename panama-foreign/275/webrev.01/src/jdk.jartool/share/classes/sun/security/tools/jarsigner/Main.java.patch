diff a/src/jdk.jartool/share/classes/sun/security/tools/jarsigner/Main.java b/src/jdk.jartool/share/classes/sun/security/tools/jarsigner/Main.java
--- a/src/jdk.jartool/share/classes/sun/security/tools/jarsigner/Main.java
+++ b/src/jdk.jartool/share/classes/sun/security/tools/jarsigner/Main.java
@@ -1057,221 +1057,213 @@
         List<String> info = new ArrayList<>();
 
         boolean signerNotExpired = expireDate == null
                 || expireDate.after(new Date());
 
-        if (badKeyUsage || badExtendedKeyUsage || badNetscapeCertType ||
-                notYetValidCert || chainNotValidated || hasExpiredCert ||
-                hasUnsignedEntry || signerSelfSigned || (legacyAlg != 0) ||
-                (disabledAlg != 0) || aliasNotInStore || notSignedByAlias ||
-                tsaChainNotValidated ||
-                (hasExpiredTsaCert && !signerNotExpired)) {
-
-            if (strict) {
-                result = isSigning
-                        ? rb.getString("jar.signed.with.signer.errors.")
-                        : rb.getString("jar.verified.with.signer.errors.");
-            } else {
-                result = isSigning
-                        ? rb.getString("jar.signed.")
-                        : rb.getString("jar.verified.");
-            }
+        if (badKeyUsage) {
+            errors.add(isSigning
+                    ? rb.getString("The.signer.certificate.s.KeyUsage.extension.doesn.t.allow.code.signing.")
+                    : rb.getString("This.jar.contains.entries.whose.signer.certificate.s.KeyUsage.extension.doesn.t.allow.code.signing."));
+        }
 
-            if (badKeyUsage) {
-                errors.add(isSigning
-                        ? rb.getString("The.signer.certificate.s.KeyUsage.extension.doesn.t.allow.code.signing.")
-                        : rb.getString("This.jar.contains.entries.whose.signer.certificate.s.KeyUsage.extension.doesn.t.allow.code.signing."));
-            }
+        if (badExtendedKeyUsage) {
+            errors.add(isSigning
+                    ? rb.getString("The.signer.certificate.s.ExtendedKeyUsage.extension.doesn.t.allow.code.signing.")
+                    : rb.getString("This.jar.contains.entries.whose.signer.certificate.s.ExtendedKeyUsage.extension.doesn.t.allow.code.signing."));
+        }
 
-            if (badExtendedKeyUsage) {
-                errors.add(isSigning
-                        ? rb.getString("The.signer.certificate.s.ExtendedKeyUsage.extension.doesn.t.allow.code.signing.")
-                        : rb.getString("This.jar.contains.entries.whose.signer.certificate.s.ExtendedKeyUsage.extension.doesn.t.allow.code.signing."));
-            }
+        if (badNetscapeCertType) {
+            errors.add(isSigning
+                    ? rb.getString("The.signer.certificate.s.NetscapeCertType.extension.doesn.t.allow.code.signing.")
+                    : rb.getString("This.jar.contains.entries.whose.signer.certificate.s.NetscapeCertType.extension.doesn.t.allow.code.signing."));
+        }
 
-            if (badNetscapeCertType) {
-                errors.add(isSigning
-                        ? rb.getString("The.signer.certificate.s.NetscapeCertType.extension.doesn.t.allow.code.signing.")
-                        : rb.getString("This.jar.contains.entries.whose.signer.certificate.s.NetscapeCertType.extension.doesn.t.allow.code.signing."));
-            }
+        // only in verifying
+        if (hasUnsignedEntry) {
+            errors.add(rb.getString(
+                    "This.jar.contains.unsigned.entries.which.have.not.been.integrity.checked."));
+        }
 
-            // only in verifying
-            if (hasUnsignedEntry) {
-                errors.add(rb.getString(
-                        "This.jar.contains.unsigned.entries.which.have.not.been.integrity.checked."));
-            }
-            if (hasExpiredCert) {
-                errors.add(isSigning
-                        ? rb.getString("The.signer.certificate.has.expired.")
-                        : rb.getString("This.jar.contains.entries.whose.signer.certificate.has.expired."));
-            }
-            if (notYetValidCert) {
-                errors.add(isSigning
-                        ? rb.getString("The.signer.certificate.is.not.yet.valid.")
-                        : rb.getString("This.jar.contains.entries.whose.signer.certificate.is.not.yet.valid."));
-            }
+        if (hasExpiredCert) {
+            errors.add(isSigning
+                    ? rb.getString("The.signer.certificate.has.expired.")
+                    : rb.getString("This.jar.contains.entries.whose.signer.certificate.has.expired."));
+        }
 
-            if (chainNotValidated) {
-                errors.add(String.format(isSigning
-                                ? rb.getString("The.signer.s.certificate.chain.is.invalid.reason.1")
-                                : rb.getString("This.jar.contains.entries.whose.certificate.chain.is.invalid.reason.1"),
-                        chainNotValidatedReason.getLocalizedMessage()));
-            }
+        if (notYetValidCert) {
+            errors.add(isSigning
+                    ? rb.getString("The.signer.certificate.is.not.yet.valid.")
+                    : rb.getString("This.jar.contains.entries.whose.signer.certificate.is.not.yet.valid."));
+        }
 
-            if (hasExpiredTsaCert) {
-                errors.add(rb.getString("The.timestamp.has.expired."));
-            }
-            if (tsaChainNotValidated) {
-                errors.add(String.format(isSigning
-                                ? rb.getString("The.tsa.certificate.chain.is.invalid.reason.1")
-                                : rb.getString("This.jar.contains.entries.whose.tsa.certificate.chain.is.invalid.reason.1"),
-                        tsaChainNotValidatedReason.getLocalizedMessage()));
-            }
+        if (chainNotValidated) {
+            errors.add(String.format(isSigning
+                            ? rb.getString("The.signer.s.certificate.chain.is.invalid.reason.1")
+                            : rb.getString("This.jar.contains.entries.whose.certificate.chain.is.invalid.reason.1"),
+                    chainNotValidatedReason.getLocalizedMessage()));
+        }
 
-            // only in verifying
-            if (notSignedByAlias) {
-                errors.add(
-                        rb.getString("This.jar.contains.signed.entries.which.is.not.signed.by.the.specified.alias.es."));
+        if (tsaChainNotValidated) {
+            errors.add(String.format(isSigning
+                            ? rb.getString("The.tsa.certificate.chain.is.invalid.reason.1")
+                            : rb.getString("This.jar.contains.entries.whose.tsa.certificate.chain.is.invalid.reason.1"),
+                    tsaChainNotValidatedReason.getLocalizedMessage()));
+        }
+
+        // only in verifying
+        if (notSignedByAlias) {
+            errors.add(
+                    rb.getString("This.jar.contains.signed.entries.which.is.not.signed.by.the.specified.alias.es."));
+        }
+
+        // only in verifying
+        if (aliasNotInStore) {
+            errors.add(rb.getString("This.jar.contains.signed.entries.that.s.not.signed.by.alias.in.this.keystore."));
+        }
+
+        if (signerSelfSigned) {
+            errors.add(isSigning
+                    ? rb.getString("The.signer.s.certificate.is.self.signed.")
+                    : rb.getString("This.jar.contains.entries.whose.signer.certificate.is.self.signed."));
+        }
+
+        if (isSigning) {
+            if ((legacyAlg & 1) == 1) {
+                warnings.add(String.format(
+                        rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
+                        digestalg, "-digestalg"));
             }
 
-            // only in verifying
-            if (aliasNotInStore) {
-                errors.add(rb.getString("This.jar.contains.signed.entries.that.s.not.signed.by.alias.in.this.keystore."));
+            if ((disabledAlg & 1) == 1) {
+                errors.add(String.format(
+                        rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled."),
+                        digestalg, "-digestalg"));
             }
 
-            if (signerSelfSigned) {
-                errors.add(isSigning
-                        ? rb.getString("The.signer.s.certificate.is.self.signed.")
-                        : rb.getString("This.jar.contains.entries.whose.signer.certificate.is.self.signed."));
+            if ((legacyAlg & 2) == 2) {
+                warnings.add(String.format(
+                        rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
+                        sigalg, "-sigalg"));
             }
 
-            if (isSigning) {
-                if ((legacyAlg & 1) == 1) {
-                    warnings.add(String.format(
-                            rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
-                            digestalg, "-digestalg"));
-                }
+            if ((disabledAlg & 2) == 2) {
+                errors.add(String.format(
+                        rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled."),
+                        sigalg, "-sigalg"));
+            }
 
-                if ((disabledAlg & 1) == 1) {
-                    errors.add(String.format(
-                            rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled."),
-                            digestalg, "-digestalg"));
-                }
+            if ((legacyAlg & 4) == 4) {
+                warnings.add(String.format(
+                        rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
+                        tSADigestAlg, "-tsadigestalg"));
+            }
 
-                if ((legacyAlg & 2) == 2) {
-                    warnings.add(String.format(
-                            rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
-                            sigalg, "-sigalg"));
-                }
-                if ((disabledAlg & 2) == 2) {
-                    errors.add(String.format(
-                            rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled."),
-                            sigalg, "-sigalg"));
-                }
+            if ((disabledAlg & 4) == 4) {
+                errors.add(String.format(
+                        rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled."),
+                        tSADigestAlg, "-tsadigestalg"));
+            }
 
-                if ((legacyAlg & 4) == 4) {
-                    warnings.add(String.format(
-                            rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
-                            tSADigestAlg, "-tsadigestalg"));
-                }
-                if ((disabledAlg & 4) == 4) {
-                    errors.add(String.format(
-                            rb.getString("The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled."),
-                            tSADigestAlg, "-tsadigestalg"));
-                }
+            if ((legacyAlg & 8) == 8) {
+                warnings.add(String.format(
+                        rb.getString("The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update."),
+                        privateKey.getAlgorithm(), KeyUtil.getKeySize(privateKey)));
+            }
 
-                if ((legacyAlg & 8) == 8) {
-                    warnings.add(String.format(
-                            rb.getString("The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update."),
-                            privateKey.getAlgorithm(), KeyUtil.getKeySize(privateKey)));
-                }
-                if ((disabledAlg & 8) == 8) {
-                    errors.add(String.format(
-                            rb.getString("The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.and.is.disabled."),
-                            privateKey.getAlgorithm(), KeyUtil.getKeySize(privateKey)));
-                }
-            } else {
-                if ((legacyAlg & 1) != 0) {
-                    warnings.add(String.format(
-                            rb.getString("The.digest.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
-                            legacyDigestAlg));
-                }
+            if ((disabledAlg & 8) == 8) {
+                errors.add(String.format(
+                        rb.getString("The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.and.is.disabled."),
+                        privateKey.getAlgorithm(), KeyUtil.getKeySize(privateKey)));
+            }
+        } else {
+            if ((legacyAlg & 1) != 0) {
+                warnings.add(String.format(
+                        rb.getString("The.digest.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
+                        legacyDigestAlg));
+            }
 
-                if ((legacyAlg & 2) == 2) {
-                     warnings.add(String.format(
-                             rb.getString("The.signature.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
-                             legacySigAlg));
-                }
+            if ((legacyAlg & 2) == 2) {
+                warnings.add(String.format(
+                        rb.getString("The.signature.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
+                        legacySigAlg));
+            }
 
-                if ((legacyAlg & 4) != 0) {
-                    warnings.add(String.format(
-                            rb.getString("The.timestamp.digest.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
-                            legacyTsaDigestAlg));
-                }
+            if ((legacyAlg & 4) != 0) {
+                warnings.add(String.format(
+                        rb.getString("The.timestamp.digest.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update."),
+                        legacyTsaDigestAlg));
+            }
 
-                if ((legacyAlg & 8) == 8) {
-                    warnings.add(String.format(
-                            rb.getString("The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update."),
-                            weakPublicKey.getAlgorithm(), KeyUtil.getKeySize(weakPublicKey)));
-                }
+            if ((legacyAlg & 8) == 8) {
+                warnings.add(String.format(
+                        rb.getString("The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update."),
+                        weakPublicKey.getAlgorithm(), KeyUtil.getKeySize(weakPublicKey)));
             }
-        } else {
-            result = isSigning ? rb.getString("jar.signed.") : rb.getString("jar.verified.");
         }
 
+        // This check must be placed after all other "errors.add()" calls were done.
         if (hasExpiredTsaCert) {
             // No need to warn about expiring if already expired
             hasExpiringTsaCert = false;
-        }
-
-        if (hasExpiringCert ||
-                (hasExpiringTsaCert  && expireDate != null) ||
-                (noTimestamp && expireDate != null) ||
-                (hasExpiredTsaCert && signerNotExpired) ||
-                permsDetected) {
-
-            if (hasExpiredTsaCert && signerNotExpired) {
+            // If there are already another errors, we just say it expired.
+            if (!signerNotExpired || !errors.isEmpty()) {
+                errors.add(rb.getString("The.timestamp.has.expired."));
+            } else if (signerNotExpired) {
                 if (expireDate != null) {
                     warnings.add(String.format(
                             rb.getString("The.timestamp.expired.1.but.usable.2"),
                             tsaExpireDate,
                             expireDate));
                 }
                 // Reset the flag so exit code is 0
                 hasExpiredTsaCert = false;
             }
-            if (hasExpiringCert) {
-                warnings.add(isSigning
-                        ? rb.getString("The.signer.certificate.will.expire.within.six.months.")
-                        : rb.getString("This.jar.contains.entries.whose.signer.certificate.will.expire.within.six.months."));
-            }
-            if (hasExpiringTsaCert && expireDate != null) {
-                if (expireDate.after(tsaExpireDate)) {
-                    warnings.add(String.format(rb.getString(
-                            "The.timestamp.will.expire.within.one.year.on.1.but.2"), tsaExpireDate, expireDate));
-                } else {
-                    warnings.add(String.format(rb.getString(
-                            "The.timestamp.will.expire.within.one.year.on.1"), tsaExpireDate));
-                }
-            }
-            if (noTimestamp && expireDate != null) {
-                if (hasTimestampBlock) {
-                    warnings.add(String.format(isSigning
-                            ? rb.getString("invalid.timestamp.signing")
-                            : rb.getString("bad.timestamp.verifying"), expireDate));
-                } else {
-                    warnings.add(String.format(isSigning
-                            ? rb.getString("no.timestamp.signing")
-                            : rb.getString("no.timestamp.verifying"), expireDate));
-                }
+        }
+
+        if (hasExpiringCert) {
+            warnings.add(isSigning
+                    ? rb.getString("The.signer.certificate.will.expire.within.six.months.")
+                    : rb.getString("This.jar.contains.entries.whose.signer.certificate.will.expire.within.six.months."));
+        }
+
+        if (hasExpiringTsaCert && expireDate != null) {
+            if (expireDate.after(tsaExpireDate)) {
+                warnings.add(String.format(rb.getString(
+                        "The.timestamp.will.expire.within.one.year.on.1.but.2"), tsaExpireDate, expireDate));
+            } else {
+                warnings.add(String.format(rb.getString(
+                        "The.timestamp.will.expire.within.one.year.on.1"), tsaExpireDate));
             }
-            if (permsDetected) {
-                warnings.add(rb.getString("posix.attributes.detected"));
+        }
+
+        if (noTimestamp && expireDate != null) {
+            if (hasTimestampBlock) {
+                warnings.add(String.format(isSigning
+                        ? rb.getString("invalid.timestamp.signing")
+                        : rb.getString("bad.timestamp.verifying"), expireDate));
+            } else {
+                warnings.add(String.format(isSigning
+                        ? rb.getString("no.timestamp.signing")
+                        : rb.getString("no.timestamp.verifying"), expireDate));
             }
         }
 
+        if (permsDetected) {
+            warnings.add(rb.getString("posix.attributes.detected"));
+        }
+
+        if ((strict) && (!errors.isEmpty())) {
+            result = isSigning
+                    ? rb.getString("jar.signed.with.signer.errors.")
+                    : rb.getString("jar.verified.with.signer.errors.");
+        } else {
+            result = isSigning
+                    ? rb.getString("jar.signed.")
+                    : rb.getString("jar.verified.");
+        }
         System.out.println(result);
+
         if (strict) {
             if (!errors.isEmpty()) {
                 System.out.println();
                 System.out.println(rb.getString("Error."));
                 errors.forEach(System.out::println);
@@ -1287,10 +1279,11 @@
                 System.out.println(rb.getString("Warning."));
                 errors.forEach(System.out::println);
                 warnings.forEach(System.out::println);
             }
         }
+
         if (!isSigning && (!errors.isEmpty() || !warnings.isEmpty())) {
             if (! (verbose != null && showcerts)) {
                 System.out.println();
                 System.out.println(rb.getString(
                         "Re.run.with.the.verbose.and.certs.options.for.more.details."));
