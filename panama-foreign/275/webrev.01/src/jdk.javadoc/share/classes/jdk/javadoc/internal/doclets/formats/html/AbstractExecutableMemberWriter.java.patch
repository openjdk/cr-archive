diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractExecutableMemberWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractExecutableMemberWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractExecutableMemberWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractExecutableMemberWriter.java
@@ -175,18 +175,15 @@
      * @param member the member to write parameters for.
      * @param htmltree the content tree to which the parameters information will be added.
      */
     protected void addParameters(ExecutableElement member, Content htmltree) {
         Content paramTree = getParameters(member, false);
-        if (paramTree.isEmpty()) {
-            htmltree.add("()");
-        } else {
+        if (paramTree.charCount() > 2) {
+            // only add zero-width-space for non-empty parameters
             htmltree.add(Entity.ZERO_WIDTH_SPACE);
-            htmltree.add("(");
-            htmltree.add(paramTree);
-            paramTree.add(")");
         }
+        htmltree.add(paramTree);
     }
 
     /**
      * Add all the parameters for the executable member.
      *
@@ -194,17 +191,18 @@
      * @param includeAnnotations true if annotation information needs to be added.
      * @return the content tree containing the parameter information
      */
     protected Content getParameters(ExecutableElement member, boolean includeAnnotations) {
         Content paramTree = new ContentBuilder();
+        paramTree.add("(");
         String sep = "";
         List<? extends VariableElement> parameters = member.getParameters();
         TypeMirror rcvrType = member.getReceiverType();
         if (includeAnnotations && rcvrType != null && utils.isAnnotated(rcvrType)) {
             List<? extends AnnotationMirror> annotationMirrors = rcvrType.getAnnotationMirrors();
             addReceiverAnnotations(member, rcvrType, annotationMirrors, paramTree);
-            sep = "," + DocletConstants.NL;
+            sep = "," + DocletConstants.NL + " ";
         }
         int paramstart;
         ExecutableType instMeth = utils.asInstantiatedMethodType(typeElement, member);
         for (paramstart = 0; paramstart < parameters.size(); paramstart++) {
             paramTree.add(sep);
@@ -215,10 +213,11 @@
                 if (includeAnnotations) {
                     boolean foundAnnotations =
                             writer.addAnnotationInfo(param, paramTree);
                     if (foundAnnotations) {
                         paramTree.add(DocletConstants.NL);
+                        paramTree.add(" ");
                     }
                 }
                 addParam(member, param, paramType,
                     (paramstart == parameters.size() - 1) && member.isVarArgs(), paramTree);
                 break;
@@ -226,23 +225,26 @@
         }
 
         for (int i = paramstart + 1; i < parameters.size(); i++) {
             paramTree.add(",");
             paramTree.add(DocletConstants.NL);
+            paramTree.add(" ");
+
             if (includeAnnotations) {
                 boolean foundAnnotations =
                         writer.addAnnotationInfo(parameters.get(i),
                         paramTree);
                 if (foundAnnotations) {
                     paramTree.add(DocletConstants.NL);
+                    paramTree.add(" ");
                 }
             }
             addParam(member, parameters.get(i), instMeth.getParameterTypes().get(i),
                     (i == parameters.size() - 1) && member.isVarArgs(),
                     paramTree);
         }
-
+        paramTree.add(")");
         return paramTree;
     }
 
     /**
      * Get a content tree containing the exception information for the executable member.
