diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java
@@ -146,33 +146,40 @@
         }
     }
 
     public static void exec(ProcessBuilder pb)
             throws IOException {
-        exec(pb, false, null, false);
+        exec(pb, false, null, false, Executor.INFINITE_TIMEOUT);
+    }
+
+    // timeout in seconds. -1 will be return if process timeouts.
+    public static void exec(ProcessBuilder pb, long timeout)
+            throws IOException {
+        exec(pb, false, null, false, timeout);
     }
 
     // See JDK-8236282
     // Reading output from some processes (currently known "hdiutil attach")
     // might hang even if process already exited. Only possible workaround found
     // in "hdiutil attach" case is to redirect the output to a temp file and then
     // read this file back.
     public static void exec(ProcessBuilder pb, boolean writeOutputToFile)
             throws IOException {
-        exec(pb, false, null, writeOutputToFile);
+        exec(pb, false, null, writeOutputToFile, Executor.INFINITE_TIMEOUT);
     }
 
     static void exec(ProcessBuilder pb, boolean testForPresenceOnly,
             PrintStream consumer) throws IOException {
-        exec(pb, testForPresenceOnly, consumer, false);
+        exec(pb, testForPresenceOnly, consumer, false, Executor.INFINITE_TIMEOUT);
     }
 
     static void exec(ProcessBuilder pb, boolean testForPresenceOnly,
-            PrintStream consumer, boolean writeOutputToFile) throws IOException {
+            PrintStream consumer, boolean writeOutputToFile, long timeout)
+            throws IOException {
         List<String> output = new ArrayList<>();
         Executor exec = Executor.of(pb).setWriteOutputToFile(writeOutputToFile)
-                .setOutputConsumer(lines -> {
+                .setTimeout(timeout).setOutputConsumer(lines -> {
             lines.forEach(output::add);
             if (consumer != null) {
                 output.forEach(consumer::println);
             }
         });
