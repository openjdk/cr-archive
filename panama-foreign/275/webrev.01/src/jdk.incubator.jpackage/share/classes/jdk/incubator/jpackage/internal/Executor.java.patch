diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java
@@ -28,10 +28,11 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
@@ -53,10 +54,20 @@
     Executor setWriteOutputToFile(boolean v) {
         writeOutputToFile = v;
         return this;
     }
 
+    Executor setTimeout(long v) {
+        timeout = v;
+        if (timeout != INFINITE_TIMEOUT) {
+            // Redirect output to file if timeout is requested, otherwise we will
+            // reading until process ends and timeout will never be reached.
+            setWriteOutputToFile(true);
+        }
+        return this;
+    }
+
     Executor setProcessBuilder(ProcessBuilder v) {
         pb = v;
         return this;
     }
 
@@ -101,11 +112,11 @@
         Process p = pb.start();
 
         int code = 0;
         if (writeOutputToFile) {
             try {
-                code = p.waitFor();
+                code = waitForProcess(p);
             } catch (InterruptedException ex) {
                 Log.verbose(ex);
                 throw new RuntimeException(ex);
             }
         }
@@ -182,10 +193,25 @@
             Log.verbose(ex);
             throw new RuntimeException(ex);
         }
     }
 
+    private int waitForProcess(Process p) throws InterruptedException {
+        if (timeout == INFINITE_TIMEOUT) {
+            return p.waitFor();
+        } else {
+            if (p.waitFor(timeout, TimeUnit.SECONDS)) {
+                return p.exitValue();
+            } else {
+                Log.verbose(String.format("Command %s timeout after %d seconds",
+                            createLogMessage(pb), timeout));
+                p.destroy();
+                return -1;
+            }
+        }
+    }
+
     static Executor of(String... cmdline) {
         return new Executor().setCommandLine(cmdline);
     }
 
     static Executor of(ProcessBuilder pb) {
@@ -199,11 +225,14 @@
             sb.append(String.format("in %s", pb.directory().getAbsolutePath()));
         }
         return sb.toString();
     }
 
+    public final static int INFINITE_TIMEOUT = -1;
+
     private ProcessBuilder pb;
     private boolean saveOutput;
     private boolean writeOutputToFile;
+    private long timeout = INFINITE_TIMEOUT;
     private List<String> output;
     private Consumer<Stream<String>> outputConsumer;
 }
