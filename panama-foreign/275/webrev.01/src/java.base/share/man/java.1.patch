diff a/src/java.base/share/man/java.1 b/src/java.base/share/man/java.1
--- a/src/java.base/share/man/java.1
+++ b/src/java.base/share/man/java.1
@@ -20,11 +20,11 @@
 .\" or visit www.oracle.com if you need additional information or have any
 .\" questions.
 .\"
 .\" Automatically generated by Pandoc 2.3.1
 .\"
-.TH "JAVA" "1" "2020" "JDK 14" "JDK Commands"
+.TH "JAVA" "1" "2020" "JDK 15" "JDK Commands"
 .hy
 .SH NAME
 .PP
 java \- launch a Java application
 .SH SYNOPSIS
@@ -178,13 +178,14 @@
 .PP
 \f[B]Note:\f[R] The valid values of \f[I]N\f[R] change for each release,
 with new values added and old values removed.
 You\[aq]ll get an error message if you use a value of \f[I]N\f[R] that is
 no longer supported.
-Supported values of \f[I]N\f[R] for this release are \f[CB]7\f[R],
-\f[CB]8\f[R], \f[CB]9\f[R], \f[CB]10\f[R], \f[CB]11\f[R], \f[CB]12\f[R],
-\f[CB]13\f[R], and \f[CB]14\f[R].
+The supported values of \f[I]N\f[R] are the current Java SE release
+(\f[CB]15\f[R]) and a limited number of previous releases, detailed in the
+command\-line help for \f[CB]javac\f[R], under the \f[CB]\-\-source\f[R] and
+\f[CB]\-\-release\f[R] options.
 .RE
 .PP
 If the file does not have the \f[CB]\&.java\f[R] extension, the
 \f[CB]\-\-source\f[R] option must be used to tell the \f[CB]java\f[R]
 command to use the source\-file mode.
@@ -435,13 +436,13 @@
 Loads the specified native agent library.
 After the library name, a comma\-separated list of options specific to
 the library can be used.
 .RS
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] If the option
-\f[CB]\-agentlib:foo\f[R] is specified, then the JVM attempts to load the
-library named \f[CB]libfoo.so\f[R] in the location specified by the
+\f[B]Linux and macOS:\f[R] If the option \f[CB]\-agentlib:foo\f[R] is
+specified, then the JVM attempts to load the library named
+\f[CB]libfoo.so\f[R] in the location specified by the
 \f[CB]LD_LIBRARY_PATH\f[R] system variable (on macOS this variable is
 \f[CB]DYLD_LIBRARY_PATH\f[R]).
 .IP \[bu] 2
 \f[B]Windows:\f[R] If the option \f[CB]\-agentlib:foo\f[R] is specified,
 then the JVM attempts to load the library named \f[CB]foo.dll\f[R] in the
@@ -782,12 +783,12 @@
 .B \f[CB]\-Xbootclasspath/a:\f[R]\f[I]directories\f[R]|\f[I]zip\f[R]|\f[I]JAR\-files\f[R]
 Specifies a list of directories, JAR files, and ZIP archives to append
 to the end of the default bootstrap class path.
 .RS
 .PP
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] Colons (\f[CB]:\f[R]) separate
-entities in this list.
+\f[B]Linux and macOS:\f[R] Colons (\f[CB]:\f[R]) separate entities in this
+list.
 .PP
 \f[B]Windows:\f[R] Semicolons (\f[CB];\f[R]) separate entities in this
 list.
 .RE
 .TP
@@ -946,11 +947,11 @@
 Shutdown hooks enable the orderly shutdown of a Java application by
 running user cleanup code (such as closing database connections) at
 shutdown, even if the JVM terminates abruptly.
 .RS
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R]
+\f[B]Linux and macOS:\f[R]
 .RS 2
 .IP \[bu] 2
 The JVM catches signals to implement shutdown hooks for unexpected
 termination.
 The JVM uses \f[CB]SIGHUP\f[R], \f[CB]SIGINT\f[R], and \f[CB]SIGTERM\f[R] to
@@ -992,12 +993,12 @@
 \f[CB]CTRL_LOGOFF_EVENT\f[R], or \f[CB]CTRL_SHUTDOWN_EVENT\f[R].
 .RE
 .PP
 There are two consequences of specifying \f[CB]\-Xrs\f[R]:
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] \f[CB]SIGQUIT\f[R] thread dumps
-aren\[aq]t available.
+\f[B]Linux and macOS:\f[R] \f[CB]SIGQUIT\f[R] thread dumps aren\[aq]t
+available.
 .IP \[bu] 2
 \f[B]Windows:\f[R] Ctrl + Break thread dumps aren\[aq]t available.
 .PP
 User code is responsible for causing shutdown hooks to run, for example,
 by calling the \f[CB]System.exit()\f[R] when the JVM is to be terminated.
@@ -1080,12 +1081,10 @@
 .IP \[bu] 2
 Linux/x64 (64\-bit): 1024 KB
 .IP \[bu] 2
 macOS (64\-bit): 1024 KB
 .IP \[bu] 2
-Oracle Solaris (64\-bit): 1024 KB
-.IP \[bu] 2
 Windows: The default value depends on virtual memory
 .PP
 The following examples set the thread stack size to 1024 KB in different
 units:
 .IP
@@ -1332,12 +1331,12 @@
 .RS
 .PP
 \f[CB]\-XX:ErrorFile=./hs_err_pid%p.log\f[R]
 .RE
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] The following example shows
-how to set the error log to \f[CB]/var/log/java/java_error.log\f[R]:
+\f[B]Linux and macOS:\f[R] The following example shows how to set the
+error log to \f[CB]/var/log/java/java_error.log\f[R]:
 .RS 2
 .RS
 .PP
 \f[CB]\-XX:ErrorFile=/var/log/java/java_error.log\f[R]
 .RE
@@ -1355,12 +1354,11 @@
 If the file exists, and is writeable, then it will be overwritten.
 Otherwise, if the file can\[aq]t be created in the specified directory
 (due to insufficient space, permission problem, or another issue), then
 the file is created in the temporary directory for the operating system:
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] The temporary directory is
-\f[CB]/tmp\f[R].
+\f[B]Linux and macOS:\f[R] The temporary directory is \f[CB]/tmp\f[R].
 .IP \[bu] 2
 \f[B]Windows:\f[R] The temporary directory is specified by the value of
 the \f[CB]TMP\f[R] environment variable; if that environment variable
 isn\[aq]t defined, then the value of the \f[CB]TEMP\f[R] environment
 variable is used.
@@ -1577,16 +1575,15 @@
 run when an irrecoverable error occurs.
 If the string contains spaces, then it must be enclosed in quotation
 marks.
 .RS
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] The following example shows
-how the \f[CB]\-XX:OnError\f[R] option can be used to run the
-\f[CB]gcore\f[R] command to create a core image, and start the
-\f[CB]gdb\f[R] debugger to attach to the process in case of an
-irrecoverable error (the \f[CB]%p\f[R] designates the current process
-identifier):
+\f[B]Linux and macOS:\f[R] The following example shows how the
+\f[CB]\-XX:OnError\f[R] option can be used to run the \f[CB]gcore\f[R]
+command to create a core image, and start the \f[CB]gdb\f[R] debugger to
+attach to the process in case of an irrecoverable error (the \f[CB]%p\f[R]
+designates the current process identifier):
 .RS 2
 .RS
 .PP
 \f[CB]\-XX:OnError="gcore\ %p;gdb\ \-p\ %p"\f[R]
 .RE
@@ -1689,11 +1686,11 @@
 determine precisely which reference is \f[CB]null\f[R], and describes the
 source with a null\-detail message.
 The null\-detail message is calculated and returned by
 \f[CB]NullPointerException.getMessage()\f[R], and will be printed as the
 exception message along with the method, filename, and line number.
-By default, this option is disabled.
+By default, this option is enabled.
 .RS
 .RE
 .TP
 .B \f[CB]\-XX:+ShowMessageBoxOnError\f[R]
 Enables the display of a dialog box when the JVM experiences an
@@ -1837,12 +1834,10 @@
 .IP \[bu] 2
 Linux/x64 (64\-bit): 1024 KB
 .IP \[bu] 2
 macOS (64\-bit): 1024 KB
 .IP \[bu] 2
-Oracle Solaris (64\-bit): 1024 KB
-.IP \[bu] 2
 Windows: The default value depends on virtual memory
 .PP
 The following examples show how to set the thread stack size to 1
 megabyte in different units:
 .IP
@@ -1854,21 +1849,10 @@
 .fi
 .PP
 This option is similar to \f[CB]\-Xss\f[R].
 .RE
 .TP
-.B \f[CB]\-XX:\-UseBiasedLocking\f[R]
-Disables the use of biased locking.
-Some applications with significant amounts of uncontended
-synchronization may attain significant speedups with this flag enabled,
-but applications with certain patterns of locking may see slowdowns.
-\&.
-.RS
-.PP
-By default, this option is enabled.
-.RE
-.TP
 .B \f[CB]\-XX:\-UseCompressedOops\f[R]
 Disables the use of compressed pointers.
 By default, this option is enabled, and compressed pointers are used.
 This will automatically limit the maximum ergonomically determined Java
 heap size to the maximum amount of memory that can be covered by
@@ -2360,10 +2344,11 @@
 .RE
 .TP
 .B \f[CB]\-XX:InlineSmallCode=\f[R]\f[I]size\f[R]
 Sets the maximum code size (in bytes) for already compiled methods that
 may be inlined.
+This flag only applies to the C2 compiler.
 Append the letter \f[CB]k\f[R] or \f[CB]K\f[R] to indicate kilobytes,
 \f[CB]m\f[R] or \f[CB]M\f[R] to indicate megabytes, or \f[CB]g\f[R] or
 \f[CB]G\f[R] to indicate gigabytes.
 The default value depends on the platform and on whether tiered
 compilation is enabled.
@@ -2393,10 +2378,11 @@
 \f[CB]\-XX:+PrintCompilation\f[R] option.
 .RE
 .TP
 .B \f[CB]\-XX:FreqInlineSize=\f[R]\f[I]size\f[R]
 Sets the maximum bytecode size (in bytes) of a hot method to be inlined.
+This flag only applies to the C2 compiler.
 Append the letter \f[CB]k\f[R] or \f[CB]K\f[R] to indicate kilobytes,
 \f[CB]m\f[R] or \f[CB]M\f[R] to indicate megabytes, or \f[CB]g\f[R] or
 \f[CB]G\f[R] to indicate gigabytes.
 The default value depends on the platform.
 In the following example it is set to 325 bytes:
@@ -2408,10 +2394,26 @@
 .RE
 .TP
 .B \f[CB]\-XX:MaxInlineSize=\f[R]\f[I]size\f[R]
 Sets the maximum bytecode size (in bytes) of a cold method to be
 inlined.
+This flag only applies to the C2 compiler.
+Append the letter \f[CB]k\f[R] or \f[CB]K\f[R] to indicate kilobytes,
+\f[CB]m\f[R] or \f[CB]M\f[R] to indicate megabytes, or \f[CB]g\f[R] or
+\f[CB]G\f[R] to indicate gigabytes.
+By default, the maximum bytecode size is set to 35 bytes:
+.RS
+.RS
+.PP
+\f[CB]\-XX:MaxInlineSize=35\f[R]
+.RE
+.RE
+.TP
+.B \f[CB]\-XX:C1MaxInlineSize=\f[R]\f[I]size\f[R]
+Sets the maximum bytecode size (in bytes) of a cold method to be
+inlined.
+This flag only applies to the C1 compiler.
 Append the letter \f[CB]k\f[R] or \f[CB]K\f[R] to indicate kilobytes,
 \f[CB]m\f[R] or \f[CB]M\f[R] to indicate megabytes, or \f[CB]g\f[R] or
 \f[CB]G\f[R] to indicate gigabytes.
 By default, the maximum bytecode size is set to 35 bytes:
 .RS
@@ -2422,10 +2424,27 @@
 .RE
 .TP
 .B \f[CB]\-XX:MaxTrivialSize=\f[R]\f[I]size\f[R]
 Sets the maximum bytecode size (in bytes) of a trivial method to be
 inlined.
+This flag only applies to the C2 compiler.
+Append the letter \f[CB]k\f[R] or \f[CB]K\f[R] to indicate kilobytes,
+\f[CB]m\f[R] or \f[CB]M\f[R] to indicate megabytes, or \f[CB]g\f[R] or
+\f[CB]G\f[R] to indicate gigabytes.
+By default, the maximum bytecode size of a trivial method is set to 6
+bytes:
+.RS
+.RS
+.PP
+\f[CB]\-XX:MaxTrivialSize=6\f[R]
+.RE
+.RE
+.TP
+.B \f[CB]\-XX:C1MaxTrivialSize=\f[R]\f[I]size\f[R]
+Sets the maximum bytecode size (in bytes) of a trivial method to be
+inlined.
+This flag only applies to the C1 compiler.
 Append the letter \f[CB]k\f[R] or \f[CB]K\f[R] to indicate kilobytes,
 \f[CB]m\f[R] or \f[CB]M\f[R] to indicate megabytes, or \f[CB]g\f[R] or
 \f[CB]G\f[R] to indicate gigabytes.
 By default, the maximum bytecode size of a trivial method is set to 6
 bytes:
@@ -2673,11 +2692,11 @@
 .RS
 .RE
 .TP
 .B \f[CB]\-XX:+UseSHA\f[R]
 Enables hardware\-based intrinsics for SHA crypto hash functions for
-SPARC hardware.
+some hardware.
 The \f[CB]UseSHA\f[R] option is used in conjunction with the
 \f[CB]UseSHA1Intrinsics\f[R], \f[CB]UseSHA256Intrinsics\f[R], and
 \f[CB]UseSHA512Intrinsics\f[R] options.
 .RS
 .PP
@@ -2815,11 +2834,11 @@
 .RS
 .RE
 .TP
 .B \f[CB]\-XX:+UseFMA\f[R]
 Enables hardware\-based FMA intrinsics for hardware where FMA
-instructions are available (such as, Intel, SPARC, and ARM64).
+instructions are available (such as, Intel and ARM64).
 FMA intrinsics are generated for the
 \f[CB]java.lang.Math.fma(\f[R]\f[I]a\f[R]\f[CB],\f[R] \f[I]b\f[R]\f[CB],\f[R]
 \f[I]c\f[R]\f[CB])\f[R] methods that calculate the value of \f[CB](\f[R]
 \f[I]a\f[R] \f[CB]*\f[R] \f[I]b\f[R] \f[CB]+\f[R] \f[I]c\f[R] \f[CB])\f[R]
 expressions.
@@ -2914,12 +2933,12 @@
 different JDK version.
 .RE
 .RE
 .TP
 .B \f[CB]\-XX:+ExtendedDTraceProbes\f[R]
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] Enables additional
-\f[CB]dtrace\f[R] tool probes that affect the performance.
+\f[B]Linux and macOS:\f[R] Enables additional \f[CB]dtrace\f[R] tool probes
+that affect the performance.
 By default, this option is disabled and \f[CB]dtrace\f[R] performs only
 standard probes.
 .RS
 .RE
 .TP
@@ -2947,13 +2966,12 @@
 .RS
 .PP
 \f[CB]\-XX:HeapDumpPath=./java_pid%p.hprof\f[R]
 .RE
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] The following example shows
-how to set the heap dump file to
-\f[CB]/var/log/java/java_heapdump.hprof\f[R]:
+\f[B]Linux and macOS:\f[R] The following example shows how to set the
+heap dump file to \f[CB]/var/log/java/java_heapdump.hprof\f[R]:
 .RS 2
 .RS
 .PP
 \f[CB]\-XX:HeapDumpPath=/var/log/java/java_heapdump.hprof\f[R]
 .RE
@@ -2973,12 +2991,12 @@
 Sets the path and file name to where log data is written.
 By default, the file is created in the current working directory, and
 it\[aq]s named \f[CB]hotspot.log\f[R].
 .RS
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] The following example shows
-how to set the log file to \f[CB]/var/log/java/hotspot.log\f[R]:
+\f[B]Linux and macOS:\f[R] The following example shows how to set the log
+file to \f[CB]/var/log/java/hotspot.log\f[R]:
 .RS 2
 .RS
 .PP
 \f[CB]\-XX:LogFile=/var/log/java/hotspot.log\f[R]
 .RE
@@ -2997,11 +3015,11 @@
 .B \f[CB]\-XX:+PrintClassHistogram\f[R]
 Enables printing of a class instance histogram after one of the
 following events:
 .RS
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] \f[CB]Control+Break\f[R]
+\f[B]Linux and macOS:\f[R] \f[CB]Control+Break\f[R]
 .IP \[bu] 2
 \f[B]Windows:\f[R] \f[CB]Control+C\f[R] (\f[CB]SIGTERM\f[R])
 .PP
 By default, this option is disabled.
 .PP
@@ -3013,11 +3031,11 @@
 .B \f[CB]\-XX:+PrintConcurrentLocks\f[R]
 Enables printing of \f[CB]java.util.concurrent\f[R] locks after one of the
 following events:
 .RS
 .IP \[bu] 2
-\f[B]Oracle Solaris, Linux, and macOS:\f[R] \f[CB]Control+Break\f[R]
+\f[B]Linux and macOS:\f[R] \f[CB]Control+Break\f[R]
 .IP \[bu] 2
 \f[B]Windows:\f[R] \f[CB]Control+C\f[R] (\f[CB]SIGTERM\f[R])
 .PP
 By default, this option is disabled.
 .PP
@@ -3276,17 +3294,15 @@
 .RE
 .RE
 .TP
 .B \f[CB]\-XX:InitialSurvivorRatio=\f[R]\f[I]ratio\f[R]
 Sets the initial survivor space ratio used by the throughput garbage
-collector (which is enabled by the \f[CB]\-XX:+UseParallelGC\f[R] and/or
-\f[CB]\-XX:+UseParallelOldGC\f[R] options).
+collector (which is enabled by the \f[CB]\-XX:+UseParallelGC\f[R] option).
 Adaptive sizing is enabled by default with the throughput garbage
-collector by using the \f[CB]\-XX:+UseParallelGC\f[R] and
-\f[CB]\-XX:+UseParallelOldGC\f[R] options, and the survivor space is
-resized according to the application behavior, starting with the initial
-value.
+collector by using the \f[CB]\-XX:+UseParallelGC\f[R] option, and the
+survivor space is resized according to the application behavior,
+starting with the initial value.
 If adaptive sizing is disabled (using the
 \f[CB]\-XX:\-UseAdaptiveSizePolicy\f[R] option), then the
 \f[CB]\-XX:SurvivorRatio\f[R] option should be used to set the size of the
 survivor space for the entire execution of the application.
 .RS
@@ -3809,12 +3825,10 @@
 as the throughput collector) to improve the performance of your
 application by leveraging multiple processors.
 .RS
 .PP
 By default, this option is disabled and the default collector is used.
-If it\[aq]s enabled, then the \f[CB]\-XX:+UseParallelOldGC\f[R] option is
-automatically enabled, unless you explicitly disable it.
 .RE
 .TP
 .B \f[CB]\-XX:+UseSerialGC\f[R]
 Enables the use of the serial garbage collector.
 This is generally the best choice for small and simple applications that
@@ -3853,23 +3867,70 @@
 To disable the use of TLABs, specify the option \f[CB]\-XX:\-UseTLAB\f[R].
 .RS
 .RE
 .TP
 .B \f[CB]\-XX:+UseZGC\f[R]
-Enables the use of the Z garbage collector.
-This garbage collector is best for providing lowest latency with large
-Java heaps at some throughput cost.
-This is an experimental garbage collector, you need to specify
-\f[CB]\-XX:+UnlockExperimentalVMOptions\f[R] before \f[CB]\-XX:+UseZGC\f[R]
-on the command line.
+Enables the use of the Z garbage collector (ZGC).
+This is a low latency garbage collector, providing max pause times of a
+few milliseconds, at some throughput cost.
+Pause times are independent of what heap size is used.
+Supports heap sizes from 8MB to 16TB.
 .RS
-.PP
-Example:
+.RE
+.TP
+.B \f[CB]\-XX:ZAllocationSpikeTolerance\f[R]=\f[I]factor\f[R]
+Sets the allocation spike tolerance for ZGC.
+By default, this option is set to 2.0.
+This factor describes the level of allocation spikes to expect.
+For example, using a factor of 3.0 means the current allocation rate can
+be expected to triple at any time.
+.RS
+.RE
+.TP
+.B \f[CB]\-XX:ZCollectionInterval\f[R]=\f[I]seconds\f[R]
+Sets the maximum interval (in seconds) between two GC cycles when using
+ZGC.
+By default, this option is set to 0 (disabled).
+.RS
+.RE
+.TP
+.B \f[CB]\-XX:ZFragmentationLimit\f[R]=\f[I]percent\f[R]
+Sets the maximum acceptable heap fragmentation (in percent) for ZGC.
+By default, this option is set to 25.
+Using a lower value will cause the heap to be compacted more
+aggressively, to reclaim more memory at the cost of using more CPU time.
+.RS
+.RE
+.TP
+.B \f[CB]\-XX:+ZProactive\f[R]
+Enables proactive GC cycles when using ZGC.
+By default, this option is enabled.
+ZGC will start a proactive GC cycle if doing so is expected to have
+minimal impact on the running application.
+This is useful if the application is mostly idle or allocates very few
+objects, but you still want to keep the heap size down and allow
+reference processing to happen even when there are a lot of free space
+on the heap.
+.RS
+.RE
+.TP
+.B \f[CB]\-XX:+ZUncommit\f[R]
+Enables uncommitting of unused heap memory when using ZGC.
+By default, this option is enabled.
+Uncommitting unused heap memory will lower the memory footprint of the
+JVM, and make that memory available for other processes to use.
 .RS
-.PP
-\f[CB]\-XX:+UnlockExperimentalVMOptions\ \-XX:+UseZGC\f[R]
 .RE
+.TP
+.B \f[CB]\-XX:ZUncommitDelay\f[R]=\f[I]seconds\f[R]
+Sets the amount of time (in seconds) that heap memory must have been
+unused before being uncommitted.
+By default, this option is set to 300 (5 minutes).
+Committing and uncommitting memory are relatively expensive operations.
+Using a lower value will cause heap memory to be uncommitted earlier, at
+the risk of soon having to commit it again.
+.RS
 .RE
 .SH DEPRECATED JAVA OPTIONS
 .PP
 These \f[CB]java\f[R] options are deprecated and might be removed in a
 future JDK release.
@@ -3991,31 +4052,24 @@
 The replacement Unified Logging syntax is
 \f[CB]\-Xlog:class+loader+constraints=info\f[R].
 See \f[B]Enable Logging with the JVM Unified Logging Framework\f[R].
 .RE
 .TP
-.B \f[CB]\-XX:+UseParallelOldGC\f[R]
-Enables the use of the parallel garbage collector for full GCs.
-By default, this option is disabled.
-Enabling it automatically enables the \f[CB]\-XX:+UseParallelGC\f[R]
-option.
+.B \f[CB]\-XX:+UseBiasedLocking\f[R]
+Enables the use of biased locking.
+Some applications with significant amounts of uncontended
+synchronization may attain significant speedups with this flag enabled,
+but applications with certain patterns of locking may see slowdowns.
 .RS
+.PP
+By default, this option is disabled.
 .RE
 .SH OBSOLETE JAVA OPTIONS
 .PP
 These \f[CB]java\f[R] options are still accepted but ignored, and a
 warning is issued when they\[aq]re used.
 .TP
-.B \f[CB]\-XX:+FailOverToOldVerifier\f[R]
-Enables automatic failover to the old verifier when the new type checker
-fails.
-By default, this option is disabled and it\[aq]s ignored (that is,
-treated as disabled) for classes with a recent bytecode version.
-You can enable it only for classes with older versions of the bytecode.
-.RS
-.RE
-.TP
 .B \f[CB]\-XX:+UseMembar\f[R]
 Enabled issuing membars on thread\-state transitions.
 This option was disabled by default on all platforms except ARM servers,
 where it was enabled.
 .RS
@@ -4033,17 +4087,52 @@
 triggers a garbage collection if it\[aq]s exceeded.
 This option was deprecated in JDK 8 and superseded by the
 \f[CB]\-XX:MetaspaceSize\f[R] option.
 .RS
 .RE
+.TP
+.B \f[CB]\-XX:+UseParallelOldGC\f[R]
+Enables the use of the parallel garbage collector for full GCs.
+By default, this option is disabled.
+Enabling it automatically enables the \f[CB]\-XX:+UseParallelGC\f[R]
+option.
+.RS
+.RE
 .SH REMOVED JAVA OPTIONS
 .PP
-No documented \f[CB]java\f[R] options have been removed in JDK 14.
+These \f[CB]java\f[R] options have been removed in JDK 15 and using them
+results in an error of:
+.RS
+.PP
+\f[CB]Unrecognized\ VM\ option\f[R] \f[I]option\-name\f[R]
+.RE
+.TP
+.B \f[CB]\-XX:+FailOverToOldVerifier\f[R]
+Enables automatic failover to the old verifier when the new type checker
+fails.
+By default, this option is disabled and it\[aq]s ignored (that is,
+treated as disabled) for classes with a recent bytecode version.
+You can enable it only for classes with older versions of the bytecode.
+.RS
+.RE
+.TP
+.B \f[CB]\-XX:+UseConcMarkSweepGC\f[R]
+Enables the use of the CMS garbage collector for the old generation.
+CMS is an alternative to the default garbage collector (G1), which also
+focuses on meeting application latency requirements.
+By default, this option is disabled and the collector is selected
+automatically based on the configuration of the machine and type of the
+JVM.
+.RS
+.RE
 .PP
 For the lists and descriptions of options removed in previous releases
 see the \f[I]Removed Java Options\f[R] section in:
 .IP \[bu] 2
+\f[B]Java Platform, Standard Edition Tools Reference, Release 14\f[R]
+[https://docs.oracle.com/en/java/javase/14/docs/specs/man/java.html]
+.IP \[bu] 2
 \f[B]Java Platform, Standard Edition Tools Reference, Release 13\f[R]
 [https://docs.oracle.com/en/java/javase/13/docs/specs/man/java.html]
 .IP \[bu] 2
 \f[B]Java Platform, Standard Edition Tools Reference, Release 12\f[R]
 [https://docs.oracle.com/en/java/javase/12/tools/java.html#GUID\-3B1CE181\-CD30\-4178\-9602\-230B800D4FAE]
@@ -5058,15 +5147,11 @@
 Also, a system that has been up for a long time could produce excessive
 fragmentation, which could make it impossible to reserve enough large
 page memory.
 When this happens, either the OS or JVM reverts to using regular pages.
 .PP
-Oracle Solaris, Linux, and Windows support large pages.
-.SS Large Pages Support for Oracle Solaris
-.PP
-Oracle Solaris includes Multiple Page Size Support (MPSS).
-No additional configuration is necessary.
+Linux and Windows support large pages.
 .SS Large Pages Support for Linux
 .PP
 The 2.6 kernel supports large pages.
 Some vendors have backported the code to their 2.4\-based releases.
 To check if your system can support large page memory, try the
@@ -5621,13 +5706,13 @@
 .IP "2." 3
 Create a single list of classes used by all the applications that will
 share the shared archive file.
 .RS 4
 .PP
-\f[B]Oracle Solaris, Linux, and macOS\f[R] The following commands combine
-the files \f[CB]hello.classlist\f[R] and \f[CB]hi.classlist\f[R] into one
-file, \f[CB]common.classlist\f[R]:
+\f[B]Linux and macOS\f[R] The following commands combine the files
+\f[CB]hello.classlist\f[R] and \f[CB]hi.classlist\f[R] into one file,
+\f[CB]common.classlist\f[R]:
 .RS
 .PP
 \f[CB]cat\ hello.classlist\ hi.classlist\ >\ common.classlist\f[R]
 .RE
 .PP
