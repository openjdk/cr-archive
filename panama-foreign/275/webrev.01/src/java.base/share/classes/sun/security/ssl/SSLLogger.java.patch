diff a/src/java.base/share/classes/sun/security/ssl/SSLLogger.java b/src/java.base/share/classes/sun/security/ssl/SSLLogger.java
--- a/src/java.base/share/classes/sun/security/ssl/SSLLogger.java
+++ b/src/java.base/share/classes/sun/security/ssl/SSLLogger.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -34,15 +34,17 @@
 import java.nio.ByteBuffer;
 import java.security.cert.Certificate;
 import java.security.cert.Extension;
 import java.security.cert.X509Certificate;
 import java.text.MessageFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
+import java.time.Instant;
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
 import java.util.Locale;
 import java.util.Map;
 import java.util.ResourceBundle;
+
 import sun.security.action.GetPropertyAction;
 import sun.security.util.HexDumpEncoder;
 import sun.security.x509.*;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
@@ -252,17 +254,13 @@
             }
         }
     }
 
     private static class SSLSimpleFormatter {
-        private static final ThreadLocal<SimpleDateFormat> dateFormat =
-            new ThreadLocal<SimpleDateFormat>() {
-                @Override protected SimpleDateFormat initialValue() {
-                    return new SimpleDateFormat(
-                            "yyyy-MM-dd kk:mm:ss.SSS z", Locale.ENGLISH);
-                }
-            };
+        private static final String PATTERN = "yyyy-MM-dd kk:mm:ss.SSS z";
+        private static final DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern(PATTERN, Locale.ENGLISH)
+                                                                                 .withZone(ZoneId.systemDefault());
 
         private static final MessageFormat basicCertFormat = new MessageFormat(
                 "\"version\"            : \"v{0}\",\n" +
                 "\"serial number\"      : \"{1}\",\n" +
                 "\"signature algorithm\": \"{2}\",\n" +
@@ -355,11 +353,11 @@
                 Object[] messageFields = {
                     logger.loggerName,
                     level.getName(),
                     Utilities.toHexString(Thread.currentThread().getId()),
                     Thread.currentThread().getName(),
-                    dateFormat.get().format(new Date(System.currentTimeMillis())),
+                    dateTimeFormat.format(Instant.now()),
                     formatCaller(),
                     message
                 };
 
                 if (logger.useCompactFormat) {
@@ -372,11 +370,11 @@
             Object[] messageFields = {
                     logger.loggerName,
                     level.getName(),
                     Utilities.toHexString(Thread.currentThread().getId()),
                     Thread.currentThread().getName(),
-                    dateFormat.get().format(new Date(System.currentTimeMillis())),
+                    dateTimeFormat.format(Instant.now()),
                     formatCaller(),
                     message,
                     (logger.useCompactFormat ?
                         formatParameters(parameters) :
                         Utilities.indent(formatParameters(parameters)))
@@ -474,12 +472,12 @@
                         x509.getVersion(),
                         Utilities.toHexString(
                                 x509.getSerialNumber().toByteArray()),
                         x509.getSigAlgName(),
                         x509.getIssuerX500Principal().toString(),
-                        dateFormat.get().format(x509.getNotBefore()),
-                        dateFormat.get().format(x509.getNotAfter()),
+                        dateTimeFormat.format(x509.getNotBefore().toInstant()),
+                        dateTimeFormat.format(x509.getNotAfter().toInstant()),
                         x509.getSubjectX500Principal().toString(),
                         x509.getPublicKey().getAlgorithm()
                         };
                     builder.append(Utilities.indent(
                             basicCertFormat.format(certFields)));
@@ -499,12 +497,12 @@
                         x509.getVersion(),
                         Utilities.toHexString(
                                 x509.getSerialNumber().toByteArray()),
                         x509.getSigAlgName(),
                         x509.getIssuerX500Principal().toString(),
-                        dateFormat.get().format(x509.getNotBefore()),
-                        dateFormat.get().format(x509.getNotAfter()),
+                        dateTimeFormat.format(x509.getNotBefore().toInstant()),
+                        dateTimeFormat.format(x509.getNotAfter().toInstant()),
                         x509.getSubjectX500Principal().toString(),
                         x509.getPublicKey().getAlgorithm(),
                         Utilities.indent(extBuilder.toString())
                         };
                     builder.append(Utilities.indent(
