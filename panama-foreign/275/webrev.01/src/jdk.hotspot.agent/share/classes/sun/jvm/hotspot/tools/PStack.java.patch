diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java
@@ -57,15 +57,10 @@
       Debugger dbg = getAgent().getDebugger();
       run(out, dbg);
    }
 
    public void run(PrintStream out, Debugger dbg) {
-      if (PlatformInfo.getOS().equals("darwin")) {
-        out.println("Not available on Mac OS X");
-        return;
-      }
-
       CDebugger cdbg = dbg.getCDebugger();
       if (cdbg != null) {
          ConcurrentLocksPrinter concLocksPrinter = null;
          // compute and cache java Vframes.
          initJFrameCache();
@@ -78,10 +73,16 @@
          } catch (Exception exp) {
             out.println("can't print deadlock information: " + exp.getMessage());
          }
 
          List<ThreadProxy> l = cdbg.getThreadList();
+         if (l.isEmpty() && PlatformInfo.getOS().equals("darwin")) {
+           // If the list is empty, we assume we attached to a process, and on OSX we can only
+           // get the native thread list for core files.
+           out.println("Not available for Mac OS X processes");
+           return;
+        }
          final boolean cdbgCanDemangle = cdbg.canDemangle();
          for (Iterator<ThreadProxy> itr = l.iterator() ; itr.hasNext();) {
             ThreadProxy th = itr.next();
             try {
                CFrame f = cdbg.topFrameForThread(th);
