diff a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java
--- a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java
+++ b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -549,10 +549,15 @@
      * A document locator to provide better error messages: this allows the
      * tool to display in which line of the log file the problem occurred.
      */
     private Locator locator;
 
+    /**
+     * Record the location in a replace_string_concat.
+     */
+    private boolean expectStringConcatTrap = false;
+
     /**
      * Callback for the SAX framework to set the document locator.
      */
     @Override
     public void setDocumentLocator(Locator locator) {
@@ -985,10 +990,12 @@
             CallSite cs = (site != null) ? site : scopes.peek();
             assert cs != null : "no CallSite?";
             cs.setIntrinsicName(id);
         } else if (qname.equals("regalloc")) {
             compile.setAttempts(Integer.parseInt(search(atts, "attempts")));
+        } else if (qname.equals("replace_string_concat")) {
+            expectStringConcatTrap = true;
         } else if (qname.equals("inline_fail")) {
             if (methodHandleSite != null) {
                 scopes.peek().add(methodHandleSite);
                 methodHandleSite = null;
             }
@@ -1085,13 +1092,18 @@
             } else if (lateInlineScope != null) {
                 current_bci = Integer.parseInt(search(atts, "bci"));
                 Method m = method(search(atts, "method"));
                 site = new CallSite(current_bci, m);
                 lateInlineScope.push(site);
+            } else if (expectStringConcatTrap == true) {
+                // Record the location of the replace_string_concat for the
+                // uncommon_trap 'intrinsic_or_type_checked_inlining' that should follow it
+                current_bci = Integer.parseInt(search(atts, "bci"));
+                Method m = method(search(atts, "method"));
+                site = new CallSite(current_bci, m);
             } else {
                 // Ignore <eliminate_allocation type='667'>,
-                //        <replace_string_concat arguments='2' string_alloc='0' multiple='0'>
             }
         } else if (qname.equals("inline_id")) {
             if (methodHandleSite != null) {
                 reportInternalError("method handle site should have been replaced");
             }
@@ -1140,11 +1152,11 @@
                 scopes.push(site);
             } else {
                 // The method being parsed is *not* the current compilation's
                 // top scope; i.e., we're dealing with an actual call site
                 // in the top scope or somewhere further down a call stack.
-                if (site.getMethod() == m) {
+                if (site != null && site.getMethod() == m) {
                     // We're dealing with monomorphic inlining that didn't have
                     // to be narrowed down, because the receiver was known
                     // beforehand.
                     scopes.push(site);
                 } else if (scopes.peek().getCalls().size() > 2 && m == scopes.peek().lastButOne().getMethod()) {
@@ -1213,10 +1225,12 @@
                 // left, no late inlining can be going on.
                 scopes.pop();
                 if (scopes.size() == 0) {
                     lateInlining = false;
                 }
+                // Don't carry a stale site to the next parse
+                site = null;
             } else if (qname.equals("uncommon_trap")) {
                 currentTrap = null;
             } else if (qname.startsWith("eliminate_lock")) {
                 currentLockElimination = null;
             } else if (qname.equals("late_inline")) {
@@ -1287,10 +1301,12 @@
             } else if (qname.equals("task")) {
                 types.clear();
                 methods.clear();
                 site = null;
                 lateInlining = false;
+            } else if (qname.equals("replace_string_concat")) {
+                expectStringConcatTrap = false;
             }
         } catch (Exception e) {
             reportInternalError("exception while processing end element", e);
         }
     }
