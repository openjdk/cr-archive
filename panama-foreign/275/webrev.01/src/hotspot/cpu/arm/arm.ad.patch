diff a/src/hotspot/cpu/arm/arm.ad b/src/hotspot/cpu/arm/arm.ad
--- a/src/hotspot/cpu/arm/arm.ad
+++ b/src/hotspot/cpu/arm/arm.ad
@@ -8867,16 +8867,16 @@
 
 // Tail Call; Jump from runtime stub to Java code.
 // Also known as an 'interprocedural jump'.
 // Target of jump will eventually return to caller.
 // TailJump below removes the return address.
-instruct TailCalljmpInd(IPRegP jump_target, inline_cache_regP method_oop) %{
-  match(TailCall jump_target method_oop );
+instruct TailCalljmpInd(IPRegP jump_target, inline_cache_regP method_ptr) %{
+  match(TailCall jump_target method_ptr);
 
   ins_cost(CALL_COST);
   format %{ "MOV    Rexception_pc, LR\n\t"
-            "jump   $jump_target  \t! $method_oop holds method oop" %}
+            "jump   $jump_target  \t! $method_ptr holds method" %}
   ins_encode %{
     __ mov(Rexception_pc, LR);   // this is used only to call
                                  // StubRoutines::forward_exception_entry()
                                  // which expects PC of exception in
                                  // R5. FIXME?
