diff a/src/hotspot/cpu/x86/x86_32.ad b/src/hotspot/cpu/x86/x86_32.ad
--- a/src/hotspot/cpu/x86/x86_32.ad
+++ b/src/hotspot/cpu/x86/x86_32.ad
@@ -1932,13 +1932,13 @@
 //     // int ic_reg     = Matcher::inline_cache_reg();
 //     // int ic_encode  = Matcher::_regEncode[ic_reg];
 //     // int imo_reg    = Matcher::interpreter_method_oop_reg();
 //     // int imo_encode = Matcher::_regEncode[imo_reg];
 //
-//     // // Interpreter expects method_oop in EBX, currently a callee-saved register,
+//     // // Interpreter expects method_ptr in EBX, currently a callee-saved register,
 //     // // so we load it immediately before the call
-//     // emit_opcode(cbuf, 0x8B);                     // MOV    imo_reg,ic_reg  # method_oop
+//     // emit_opcode(cbuf, 0x8B);                     // MOV    imo_reg,ic_reg  # method_ptr
 //     // emit_rm(cbuf, 0x03, imo_encode, ic_encode ); // R/M byte
 //
 //     // xor rbp,ebp
 //     emit_opcode(cbuf, 0x33);
 //     emit_rm(cbuf, 0x3, EBP_enc, EBP_enc);
@@ -13315,14 +13315,14 @@
 
 // Tail Call; Jump from runtime stub to Java code.
 // Also known as an 'interprocedural jump'.
 // Target of jump will eventually return to caller.
 // TailJump below removes the return address.
-instruct TailCalljmpInd(eRegP_no_EBP jump_target, eBXRegP method_oop) %{
-  match(TailCall jump_target method_oop );
+instruct TailCalljmpInd(eRegP_no_EBP jump_target, eBXRegP method_ptr) %{
+  match(TailCall jump_target method_ptr);
   ins_cost(300);
-  format %{ "JMP    $jump_target \t# EBX holds method oop" %}
+  format %{ "JMP    $jump_target \t# EBX holds method" %}
   opcode(0xFF, 0x4);  /* Opcode FF /4 */
   ins_encode( OpcP, RegOpc(jump_target) );
   ins_pipe( pipe_jmp );
 %}
 
