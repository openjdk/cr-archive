diff a/src/hotspot/share/memory/universe.hpp b/src/hotspot/share/memory/universe.hpp
--- a/src/hotspot/share/memory/universe.hpp
+++ b/src/hotspot/share/memory/universe.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -93,22 +93,10 @@
   // Known classes in the VM
   static Klass* _typeArrayKlassObjs[T_LONG+1];
   static Klass* _objectArrayKlassObj;
 
   // Known objects in the VM
-
-  // Primitive objects
-  static oop _int_mirror;
-  static oop _float_mirror;
-  static oop _double_mirror;
-  static oop _byte_mirror;
-  static oop _bool_mirror;
-  static oop _char_mirror;
-  static oop _long_mirror;
-  static oop _short_mirror;
-  static oop _void_mirror;
-
   static OopHandle    _main_thread_group;             // Reference to the main thread group object
   static OopHandle    _system_thread_group;           // Reference to the system thread group object
 
   static OopHandle    _the_empty_class_array;         // Canonicalized obj array of type java.lang.Class
   static OopHandle    _the_null_string;               // A cache of "null" as a Java string
@@ -145,11 +133,11 @@
   static OopHandle    _null_ptr_exception_instance;   // preallocated exception object
   static OopHandle    _arithmetic_exception_instance; // preallocated exception object
   static OopHandle    _virtual_machine_error_instance; // preallocated exception object
 
   // References waiting to be transferred to the ReferenceHandler
-  static oop          _reference_pending_list;
+  static OopHandle    _reference_pending_list;
 
   // The particular choice of collected heap.
   static CollectedHeap* _collectedHeap;
 
   static intptr_t _non_oop_bits;
@@ -230,37 +218,28 @@
     assert(_typeArrayKlassObjs[t] != NULL, "domain check");
     return _typeArrayKlassObjs[t];
   }
 
   // Known objects in the VM
-  static oop int_mirror()                   { return check_mirror(_int_mirror); }
-  static oop float_mirror()                 { return check_mirror(_float_mirror); }
-  static oop double_mirror()                { return check_mirror(_double_mirror); }
-  static oop byte_mirror()                  { return check_mirror(_byte_mirror); }
-  static oop bool_mirror()                  { return check_mirror(_bool_mirror); }
-  static oop char_mirror()                  { return check_mirror(_char_mirror); }
-  static oop long_mirror()                  { return check_mirror(_long_mirror); }
-  static oop short_mirror()                 { return check_mirror(_short_mirror); }
-  static oop void_mirror()                  { return check_mirror(_void_mirror); }
-
-  static void set_int_mirror(oop m)         { _int_mirror = m;    }
-  static void set_float_mirror(oop m)       { _float_mirror = m;  }
-  static void set_double_mirror(oop m)      { _double_mirror = m; }
-  static void set_byte_mirror(oop m)        { _byte_mirror = m;   }
-  static void set_bool_mirror(oop m)        { _bool_mirror = m;   }
-  static void set_char_mirror(oop m)        { _char_mirror = m;   }
-  static void set_long_mirror(oop m)        { _long_mirror = m;   }
-  static void set_short_mirror(oop m)       { _short_mirror = m;  }
-  static void set_void_mirror(oop m)        { _void_mirror = m;   }
-
-  // table of same
-  static oop _mirrors[T_VOID+1];
-
-  static oop java_mirror(BasicType t) {
-    assert((uint)t < T_VOID+1, "range check");
-    return check_mirror(_mirrors[t]);
-  }
+  static oop int_mirror();
+  static oop float_mirror();
+  static oop double_mirror();
+  static oop byte_mirror();
+  static oop bool_mirror();
+  static oop char_mirror();
+  static oop long_mirror();
+  static oop short_mirror();
+  static oop void_mirror();
+
+  // Table of primitive type mirrors, excluding T_OBJECT and T_ARRAY
+  // but including T_VOID, hence the index including T_VOID
+  static OopHandle _mirrors[T_VOID+1];
+
+  static oop java_mirror(BasicType t);
+  static void replace_mirror(BasicType t, oop obj);
+  static void clear_basic_type_mirrors();
+
   static oop      main_thread_group();
   static void set_main_thread_group(oop group);
 
   static oop      system_thread_group();
   static void set_system_thread_group(oop group);
