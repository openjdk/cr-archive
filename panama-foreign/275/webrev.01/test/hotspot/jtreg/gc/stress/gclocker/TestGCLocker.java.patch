diff a/test/hotspot/jtreg/gc/stress/gclocker/TestGCLocker.java b/test/hotspot/jtreg/gc/stress/gclocker/TestGCLocker.java
--- a/test/hotspot/jtreg/gc/stress/gclocker/TestGCLocker.java
+++ b/test/hotspot/jtreg/gc/stress/gclocker/TestGCLocker.java
@@ -78,17 +78,18 @@
     private MemoryPoolMXBean bean;
     private final int thresholdPromille = 750;
     private final int criticalThresholdPromille = 800;
     private final int minGCWaitMS = 1000;
     private final int minFreeWaitElapsedMS = 30000;
-    private final int minFreeCriticalWaitMS = 500;
+    private final int minFreeCriticalWaitMS;
 
     private int lastUsage = 0;
     private long lastGCDetected = System.currentTimeMillis();
     private long lastFree = System.currentTimeMillis();
 
-    public MemoryWatcher(String mxBeanName) {
+    public MemoryWatcher(String mxBeanName, int minFreeCriticalWaitMS) {
+        this.minFreeCriticalWaitMS = minFreeCriticalWaitMS;
         List<MemoryPoolMXBean> memoryBeans = ManagementFactory.getMemoryPoolMXBeans();
         for (MemoryPoolMXBean bean : memoryBeans) {
             if (bean.getName().equals(mxBeanName)) {
                 this.bean = bean;
                 break;
@@ -149,12 +150,12 @@
             }
         }
         cache.add(new Filler());
     }
 
-    public MemoryUser(String mxBeanName) {
-        watcher = new MemoryWatcher(mxBeanName);
+    public MemoryUser(String mxBeanName, int minFreeCriticalWaitMS) {
+        watcher = new MemoryWatcher(mxBeanName, minFreeCriticalWaitMS);
     }
 
     @Override
     public void run() {
         for (int i = 0; i < 200; i++) {
@@ -189,12 +190,12 @@
         thread.start();
 
         return task;
     }
 
-    private static Exitable startMemoryUser(String mxBeanName) {
-        MemoryUser task = new MemoryUser(mxBeanName);
+    private static Exitable startMemoryUser(String mxBeanName, int minFreeCriticalWaitMS) {
+        MemoryUser task = new MemoryUser(mxBeanName, minFreeCriticalWaitMS);
 
         Thread thread = new Thread(task);
         thread.setName("Memory User");
         thread.start();
 
@@ -204,16 +205,17 @@
     public static void main(String[] args) {
         System.loadLibrary("TestGCLocker");
 
         long durationMinutes = args.length > 0 ? Long.parseLong(args[0]) : 5;
         String mxBeanName = args.length > 1 ? args[1] : null;
+        int minFreeCriticalWaitMS = args.length > 2 ? Integer.parseInt(args[2]) : 500;
 
         long startMS = System.currentTimeMillis();
 
         Exitable stresser1 = startGCLockerStresser("GCLockerStresser1");
         Exitable stresser2 = startGCLockerStresser("GCLockerStresser2");
-        Exitable memoryUser = startMemoryUser(mxBeanName);
+        Exitable memoryUser = startMemoryUser(mxBeanName, minFreeCriticalWaitMS);
 
         long durationMS = durationMinutes * 60 * 1000;
         while ((System.currentTimeMillis() - startMS) < durationMS) {
             ThreadUtils.sleep(10 * 1010);
         }
