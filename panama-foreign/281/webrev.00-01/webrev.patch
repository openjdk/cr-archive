diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -881,10 +881,21 @@
         MemorySegment addr = scope.allocate(bytes.length + 1, 1L);
         copy(addr, bytes);
         return addr;
     }
 
+    /**
+     * Allocate memory of given size using malloc.
+     *
+     * @param size memory size to be allocated
+     * @return addr memory address of the allocated memory
+     */
+    public static MemoryAddress allocateMemoryRestricted(long size) {
+        Utils.checkRestrictedAccess("CSupport.allocateMemoryRestricted");
+        return SharedUtils.allocateMemoryInternal(size);
+    }
+
     /**
      * Free the memory pointed by the given memory address.
      *
      * @param addr memory address of the native memory to be freed
      */
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -267,29 +267,42 @@
             }
         }
         throw new IllegalArgumentException("String too large");
     }
 
-    // lazy init MH_FREE handle
-    private static class FreeHolder {
-        private static final MethodHandle MH_FREE;
+    // lazy init MH_ALLOC and MH_FREE handles
+    private static class AllocHolder {
+        static final MethodHandle MH_MALLOC;
+        static final MethodHandle MH_FREE;
 
         static {
             LibraryLookup lookup = LibraryLookup.ofDefault();
             try {
+                MH_MALLOC = getSystemLinker().downcallHandle(lookup.lookup("malloc"),
+                        MethodType.methodType(MemoryAddress.class, long.class),
+                        FunctionDescriptor.of(C_POINTER, C_LONGLONG));
+
                 MH_FREE = getSystemLinker().downcallHandle(lookup.lookup("free"),
                         MethodType.methodType(void.class, MemoryAddress.class),
                         FunctionDescriptor.ofVoid(C_POINTER));
             } catch (NoSuchMethodException nsme) {
                 throw new BootstrapMethodError(nsme);
             }
         }
     }
 
+    public static MemoryAddress allocateMemoryInternal(long size) {
+        try {
+            return (MemoryAddress) AllocHolder.MH_MALLOC.invokeExact(size);
+        } catch (Throwable th) {
+            throw new RuntimeException(th);
+        }
+    }
+
     public static void freeMemoryInternal(MemoryAddress addr) {
         try {
-            FreeHolder.MH_FREE.invokeExact(addr);
+            AllocHolder.MH_FREE.invokeExact(addr);
         } catch (Throwable th) {
             throw new RuntimeException(th);
         }
     }
 
diff a/test/jdk/java/foreign/TestFree.java b/test/jdk/java/foreign/TestFree.java
--- a/test/jdk/java/foreign/TestFree.java
+++ b/test/jdk/java/foreign/TestFree.java
@@ -27,36 +27,26 @@
  * @bug 8248421
  * @summary CSupport should have a way to free memory allocated outside Java
  * @run testng/othervm -Dforeign.restricted=permit TestFree
  */
 
-import jdk.incubator.foreign.FunctionDescriptor;
-import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.ForeignLinker;
-import java.lang.invoke.MethodHandle;
-import java.lang.invoke.MethodType;
 import static jdk.incubator.foreign.CSupport.*;
 import static org.testng.Assert.assertEquals;
 
 public class TestFree {
     private static MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {
         return MemorySegment.ofNativeRestricted(addr, numElements * layout.byteSize(),
                Thread.currentThread(), null, null);
     }
 
     public void test() throws Throwable {
-        LibraryLookup lib = LibraryLookup.ofDefault();
-        ForeignLinker abi = getSystemLinker();
-        MethodHandle malloc = getSystemLinker().downcallHandle(lib.lookup("malloc"),
-                    MethodType.methodType(void.class, MemoryAddress.class),
-                    FunctionDescriptor.of(C_POINTER, C_INT));
         String str = "hello world";
-        MemoryAddress addr = (MemoryAddress)malloc.invokeExact(str.length() + 1);
+        MemoryAddress addr = allocateMemoryRestricted(str.length() + 1);
         MemorySegment seg = asArrayRestricted(addr, C_CHAR, str.length() + 1);
         seg.copyFrom(MemorySegment.ofArray(str.getBytes()));
         MemoryAccess.setByteAtOffset(seg, str.length(), (byte)0);
         assertEquals(str, toJavaString(seg));
         freeMemoryRestricted(addr);
