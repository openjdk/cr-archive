diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -880,6 +880,27 @@
     private static MemorySegment toCString(byte[] bytes, NativeScope scope) {
         MemorySegment addr = scope.allocate(bytes.length + 1, 1L);
         copy(addr, bytes);
         return addr;
     }
+
+    /**
+     * Allocate memory of given size using malloc.
+     *
+     * @param size memory size to be allocated
+     * @return addr memory address of the allocated memory
+     */
+    public static MemoryAddress allocateMemoryRestricted(long size) {
+        Utils.checkRestrictedAccess("CSupport.allocateMemoryRestricted");
+        return SharedUtils.allocateMemoryInternal(size);
+    }
+
+    /**
+     * Free the memory pointed by the given memory address.
+     *
+     * @param addr memory address of the native memory to be freed
+     */
+    public static void freeMemoryRestricted(MemoryAddress addr) {
+        Utils.checkRestrictedAccess("CSupport.freeMemoryRestricted");
+        SharedUtils.freeMemoryInternal(addr);
+    }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -31,10 +31,11 @@
 import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.NativeScope;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.Utils;
@@ -266,10 +267,46 @@
             }
         }
         throw new IllegalArgumentException("String too large");
     }
 
+    // lazy init MH_ALLOC and MH_FREE handles
+    private static class AllocHolder {
+        static final MethodHandle MH_MALLOC;
+        static final MethodHandle MH_FREE;
+
+        static {
+            LibraryLookup lookup = LibraryLookup.ofDefault();
+            try {
+                MH_MALLOC = getSystemLinker().downcallHandle(lookup.lookup("malloc"),
+                        MethodType.methodType(MemoryAddress.class, long.class),
+                        FunctionDescriptor.of(C_POINTER, C_LONGLONG));
+
+                MH_FREE = getSystemLinker().downcallHandle(lookup.lookup("free"),
+                        MethodType.methodType(void.class, MemoryAddress.class),
+                        FunctionDescriptor.ofVoid(C_POINTER));
+            } catch (NoSuchMethodException nsme) {
+                throw new BootstrapMethodError(nsme);
+            }
+        }
+    }
+
+    public static MemoryAddress allocateMemoryInternal(long size) {
+        try {
+            return (MemoryAddress) AllocHolder.MH_MALLOC.invokeExact(size);
+        } catch (Throwable th) {
+            throw new RuntimeException(th);
+        }
+    }
+
+    public static void freeMemoryInternal(MemoryAddress addr) {
+        try {
+            AllocHolder.MH_FREE.invokeExact(addr);
+        } catch (Throwable th) {
+            throw new RuntimeException(th);
+        }
+    }
 
     public static VaList newVaList(Consumer<VaList.Builder> actions, Allocator allocator) {
         String name = CSupport.getSystemLinker().name();
         return switch(name) {
             case Win64.NAME -> Windowsx64Linker.newVaList(actions, allocator);
diff a/test/jdk/java/foreign/TestFree.java b/test/jdk/java/foreign/TestFree.java
--- /dev/null
+++ b/test/jdk/java/foreign/TestFree.java
@@ -0,0 +1,54 @@
+/*
+ *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ *  This code is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 only, as
+ *  published by the Free Software Foundation.
+ *
+ *  This code is distributed in the hope that it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  version 2 for more details (a copy is included in the LICENSE file that
+ *  accompanied this code).
+ *
+ *  You should have received a copy of the GNU General Public License version
+ *  2 along with this work; if not, write to the Free Software Foundation,
+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ *  or visit www.oracle.com if you need additional information or have any
+ *  questions.
+ *
+ */
+
+/*
+ * @test
+ * @bug 8248421
+ * @summary CSupport should have a way to free memory allocated outside Java
+ * @run testng/othervm -Dforeign.restricted=permit TestFree
+ */
+
+import jdk.incubator.foreign.MemoryAccess;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
+import static jdk.incubator.foreign.CSupport.*;
+import static org.testng.Assert.assertEquals;
+
+public class TestFree {
+    private static MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {
+        return MemorySegment.ofNativeRestricted(addr, numElements * layout.byteSize(),
+               Thread.currentThread(), null, null);
+    }
+
+    public void test() throws Throwable {
+        String str = "hello world";
+        MemoryAddress addr = allocateMemoryRestricted(str.length() + 1);
+        MemorySegment seg = asArrayRestricted(addr, C_CHAR, str.length() + 1);
+        seg.copyFrom(MemorySegment.ofArray(str.getBytes()));
+        MemoryAccess.setByteAtOffset(seg, str.length(), (byte)0);
+        assertEquals(str, toJavaString(seg));
+        freeMemoryRestricted(addr);
+    }
+}
