diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -25,10 +25,11 @@
 /*
  * @test
  * @run testng/othervm -Dforeign.restricted=permit TestNative
  */
 
+import jdk.incubator.foreign.CSupport;
 import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.MemoryLayouts;
@@ -138,12 +139,17 @@
     public static native long getLongRaw(long addr, int index);
     public static native double getDoubleRaw(long addr, int index);
 
     public static native long getCapacity(Buffer buffer);
 
-    public static native long allocate(int size);
-    public static native void free(long address);
+    public static MemoryAddress allocate(int size) {
+        return CSupport.allocateMemoryRestricted(size);
+    }
+
+    public static void free(MemoryAddress addr) {
+        CSupport.freeMemoryRestricted(addr);
+    }
 
     @Test(dataProvider="nativeAccessOps")
     public void testNativeAccess(Consumer<MemorySegment> checker, Consumer<MemorySegment> initializer, SequenceLayout seq) {
         try (MemorySegment segment = MemorySegment.allocateNative(seq)) {
             initializer.accept(segment);
@@ -163,13 +169,13 @@
         }
     }
 
     @Test
     public void testDefaultAccessModes() {
-        MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
+        MemoryAddress addr = allocate(12);
         MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,
-                () -> free(addr.toRawLongValue()), null);
+                () -> free(addr), null);
         try (MemorySegment segment = mallocSegment) {
             assertTrue(segment.hasAccessModes(ALL_ACCESS));
             assertEquals(segment.accessModes(), ALL_ACCESS);
         }
     }
@@ -181,25 +187,25 @@
         assertEquals(everything.accessModes(), READ | WRITE);
     }
 
     @Test
     public void testMallocSegment() {
-        MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
+        MemoryAddress addr = allocate(12);
         MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,
-                () -> free(addr.toRawLongValue()), null);
+                () -> free(addr), null);
         assertEquals(mallocSegment.byteSize(), 12);
         mallocSegment.close(); //free here
         assertTrue(!mallocSegment.isAlive());
     }
 
     @Test
     public void testEverythingSegment() {
-        MemoryAddress addr = MemoryAddress.ofLong(allocate(4));
+        MemoryAddress addr = allocate(4);
         MemorySegment everything = MemorySegment.ofNativeRestricted();
         MemoryAccess.setIntAtOffset(everything, addr.toRawLongValue(), 42);
         assertEquals(MemoryAccess.getIntAtOffset(everything, addr.toRawLongValue()), 42);
-        free(addr.toRawLongValue());
+        free(addr);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadResize() {
         try (MemorySegment segment = MemorySegment.allocateNative(4)) {
diff a/test/jdk/java/foreign/libNativeAccess.c b/test/jdk/java/foreign/libNativeAccess.c
--- a/test/jdk/java/foreign/libNativeAccess.c
+++ b/test/jdk/java/foreign/libNativeAccess.c
@@ -113,15 +113,5 @@
 
 JNIEXPORT jlong JNICALL
 Java_TestNative_getCapacity(JNIEnv *env, jclass cls, jobject buf) {
     return (*env)->GetDirectBufferCapacity(env, buf);
 }
-
-JNIEXPORT jlong JNICALL
-Java_TestNative_allocate(JNIEnv *env, jclass cls, jint size) {
-    return (jlong)(uintptr_t)malloc(size);
-}
-
-JNIEXPORT void JNICALL
-Java_TestNative_free(JNIEnv *env, jclass cls, jlong ptr) {
-    free((void*)(uintptr_t)ptr);
-}
