diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/SourceConstantHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/SourceConstantHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/SourceConstantHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/SourceConstantHelper.java
@@ -78,12 +78,12 @@
 
     @Override
     public DirectMethodHandleDesc addLayout(String javaName, MemoryLayout layout) {
         String layoutName = javaName + "$LAYOUT";
         if (namesGenerated.add(layoutName)) {
-            emitLayoutField(javaName, layout);
-            return emitGetter(layoutName, MemoryLayout.class, getLayoutFieldName(javaName));
+            String fieldName = emitLayoutField(javaName, layout);
+            return emitGetter(layoutName, MemoryLayout.class, fieldName);
         } else {
             return getGetterDesc(layoutName, MethodHandle.class);
         }
     }
 
@@ -301,17 +301,19 @@
 
     private String getLayoutFieldName(String javaName) {
         return javaName + "$LAYOUT_";
     }
 
-    private void emitLayoutField(String javaName, MemoryLayout layout) {
+    private String emitLayoutField(String javaName, MemoryLayout layout) {
+        String fieldName = getLayoutFieldName(javaName);
         incrAlign();
         indent();
-        append(PRIVATE_MODS + "MemoryLayout " + getLayoutFieldName(javaName) + " = ");
+        append(PRIVATE_MODS + "MemoryLayout " + fieldName + " = ");
         emitLayoutString(layout);
         append(";\n");
         decrAlign();
+        return fieldName;
     }
 
     private void emitLayoutString(MemoryLayout l) {
         if (l instanceof ValueLayout) {
             append(typeToLayoutName((ValueLayout) l));
