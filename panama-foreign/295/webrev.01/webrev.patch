diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
@@ -96,10 +96,29 @@
         emitAllocateArray();
         emitScopeAllocateArray();
         return super.classEnd();
     }
 
+    private String getQualifiedName(String fieldName) {
+        return className + "$" + fieldName;
+    }
+
+    @Override
+    void addVarHandleGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
+        var desc = constantHelper.addVarHandle(getQualifiedName(javaName), nativeName, layout, type, parentLayout);
+        incrAlign();
+        indent();
+        append(PUB_MODS + displayName(desc.invocationType().returnType()) + " " + javaName + "$VH() {\n");
+        incrAlign();
+        indent();
+        append("return " + getCallString(desc) + ";\n");
+        decrAlign();
+        indent();
+        append("}\n");
+        decrAlign();
+    }
+
     @Override
     void addLayoutGetter(String javaName, MemoryLayout layout) {
         var desc = constantHelper.addLayout(javaName + "$struct", layout);
         incrAlign();
         indent();
@@ -119,11 +138,11 @@
         indent();
         append(PUB_MODS + type.getName() + " " + javaName + "$get(MemorySegment seg) {\n");
         incrAlign();
         indent();
         append("return (" + type.getName() + ")"
-                + varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".get(seg);\n");
+                + varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayout) + ".get(seg);\n");
         decrAlign();
         indent();
         append("}\n");
         decrAlign();
 
@@ -136,11 +155,11 @@
         indent();
         String param = MemorySegment.class.getName() + " seg";
         append(PUB_MODS + "void " + javaName + "$set(" + param + ", " + type.getName() + " x) {\n");
         incrAlign();
         indent();
-        append(varHandleGetCallString(javaName, nativeName, layout, type, null) + ".set(seg, x);\n");
+        append(varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, null) + ".set(seg, x);\n");
         decrAlign();
         indent();
         append("}\n");
         decrAlign();
 
@@ -221,11 +240,12 @@
         String params = MemorySegment.class.getName() + " addr, long index";
         append(PUB_MODS + type.getName() + " " + javaName + "$get(" + params + ") {\n");
         incrAlign();
         indent();
         append("return (" + type.getName() + ")"
-                + varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".get(addr.asSlice(index*sizeof()));\n");
+                + varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayout) +
+                ".get(addr.asSlice(index*sizeof()));\n");
         decrAlign();
         indent();
         append("}\n");
         decrAlign();
     }
@@ -235,11 +255,12 @@
         indent();
         String params = MemorySegment.class.getName() + " addr, long index, " + type.getName() + " x";
         append(PUB_MODS + "void " + javaName + "$set(" + params + ") {\n");
         incrAlign();
         indent();
-        append(varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".set(addr.asSlice(index*sizeof()), x);\n");
+        append(varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayout) +
+                ".set(addr.asSlice(index*sizeof()), x);\n");
         decrAlign();
         indent();
         append("}\n");
         decrAlign();
     }
diff a/test/jdk/tools/jextract/test8252465/LibTest8252465Test.java b/test/jdk/tools/jextract/test8252465/LibTest8252465Test.java
--- /dev/null
+++ b/test/jdk/tools/jextract/test8252465/LibTest8252465Test.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import org.testng.annotations.Test;
+import jdk.incubator.foreign.NativeScope;
+import static org.testng.Assert.assertEquals;
+import static test.jextract.test8252465.test8252465_h.*;
+
+/*
+ * @test
+ * @library ..
+ * @modules jdk.incubator.jextract
+ * @bug 8252465
+ * @summary jextract generates wrong layout and varhandle when different structs have same named field
+ * @run driver JtregJextract -t test.jextract.test8252465 -- test8252465.h
+ * @run testng/othervm -Dforeign.restricted=permit LibTest8252465Test
+ */
+public class LibTest8252465Test {
+    @Test
+    public void test() {
+        try (var scope = NativeScope.unboundedScope()) {
+            var foo = Foo.allocate(scope);
+            Foo.x$set(foo, 3.14f);
+            assertEquals(Foo.x$get(foo), 3.14f, 0.001f);
+            var bar = Bar.allocate(scope);
+            Bar.x$set(bar, -42);
+            assertEquals(Bar.x$get(bar), -42);
+        }
+    }
+}
diff a/test/jdk/tools/jextract/test8252465/test8252465.h b/test/jdk/tools/jextract/test8252465/test8252465.h
--- /dev/null
+++ b/test/jdk/tools/jextract/test8252465/test8252465.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+struct Foo {
+    float x;
+};
+
+struct Bar {
+    int x;
+};
