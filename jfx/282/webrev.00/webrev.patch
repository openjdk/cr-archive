diff a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
@@ -58,10 +58,16 @@
  * @since JavaFX 2.0
  */
 public abstract class DoubleProperty extends ReadOnlyDoubleProperty implements
         Property<Number>, WritableDoubleValue {
 
+    /**
+     * Creates a default {@code DoubleProperty}.
+     */
+    public DoubleProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(Number v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
@@ -57,10 +57,16 @@
  * @since JavaFX 2.0
  */
 public abstract class FloatProperty extends ReadOnlyFloatProperty implements
         Property<Number>, WritableFloatValue {
 
+    /**
+     * Creates a default {@code FloatProperty}.
+     */
+    public FloatProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(Number v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
@@ -57,10 +57,16 @@
  * @since JavaFX 2.0
  */
 public abstract class IntegerProperty extends ReadOnlyIntegerProperty implements
         Property<Number>, WritableIntegerValue {
 
+    /**
+     * Creates a default {@code IntegerProperty}.
+     */
+    public IntegerProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(Number v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ListProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/ListProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ListProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ListProperty.java
@@ -53,10 +53,17 @@
  * @param <E> the type of the {@code List} elements
  * @since JavaFX 2.1
  */
 public abstract class ListProperty<E> extends ReadOnlyListProperty<E> implements
         Property<ObservableList<E>>, WritableListValue<E> {
+
+    /**
+     * Creates a default {@code ListProperty}.
+     */
+    public ListProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(ObservableList<E> v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
@@ -56,10 +56,16 @@
  * @since JavaFX 2.0
  */
 public abstract class LongProperty extends ReadOnlyLongProperty implements
         Property<Number>, WritableLongValue {
 
+    /**
+     * Creates a default {@code LongProperty}.
+     */
+    public LongProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(Number v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/MapProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/MapProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/MapProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/MapProperty.java
@@ -54,10 +54,17 @@
  * @param <V> the type of the value elements of the {@code Map}
  * @since JavaFX 2.1
  */
 public abstract class MapProperty<K, V> extends ReadOnlyMapProperty<K, V> implements
         Property<ObservableMap<K, V>>, WritableMapValue<K, V> {
+
+    /**
+     * Creates a default {@code MapProperty}.
+     */
+    public MapProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(ObservableMap<K, V> v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ObjectProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/ObjectProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ObjectProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ObjectProperty.java
@@ -62,10 +62,16 @@
  * @since JavaFX 2.0
  */
 public abstract class ObjectProperty<T> extends ReadOnlyObjectProperty<T>
         implements Property<T>, WritableObjectValue<T> {
 
+    /**
+     * Creates a default {@code ObjectProperty}.
+     */
+    public ObjectProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(T v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyBooleanPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyBooleanPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyBooleanPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyBooleanPropertyBase.java
@@ -39,10 +39,16 @@
  */
 public abstract class ReadOnlyBooleanPropertyBase extends ReadOnlyBooleanProperty {
 
     ExpressionHelper<Boolean> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyBooleanPropertyBase}.
+     */
+    public ReadOnlyBooleanPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyDoublePropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyDoublePropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyDoublePropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyDoublePropertyBase.java
@@ -39,10 +39,16 @@
  */
 public abstract class ReadOnlyDoublePropertyBase extends ReadOnlyDoubleProperty {
 
     ExpressionHelper<Number> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyDoublePropertyBase}.
+     */
+    public ReadOnlyDoublePropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyFloatPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyFloatPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyFloatPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyFloatPropertyBase.java
@@ -39,10 +39,16 @@
  */
 public abstract class ReadOnlyFloatPropertyBase extends ReadOnlyFloatProperty {
 
     ExpressionHelper<Number> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyFloatPropertyBase}.
+     */
+    public ReadOnlyFloatPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyIntegerPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyIntegerPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyIntegerPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyIntegerPropertyBase.java
@@ -39,10 +39,16 @@
  */
 public abstract class ReadOnlyIntegerPropertyBase extends ReadOnlyIntegerProperty {
 
     ExpressionHelper<Number> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyIntegerPropertyBase}.
+     */
+    public ReadOnlyIntegerPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyListPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyListPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyListPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyListPropertyBase.java
@@ -41,10 +41,16 @@
  */
 public abstract class ReadOnlyListPropertyBase<E> extends ReadOnlyListProperty<E> {
 
     private ListExpressionHelper<E> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyListPropertyBase}.
+     */
+    public ReadOnlyListPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ListExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyLongPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyLongPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyLongPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyLongPropertyBase.java
@@ -39,10 +39,16 @@
  */
 public abstract class ReadOnlyLongPropertyBase extends ReadOnlyLongProperty {
 
     ExpressionHelper<Number> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyLongPropertyBase}.
+     */
+    public ReadOnlyLongPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyMapPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyMapPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyMapPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyMapPropertyBase.java
@@ -40,10 +40,16 @@
  */
 public abstract class ReadOnlyMapPropertyBase<K, V> extends ReadOnlyMapProperty<K, V> {
 
     private MapExpressionHelper<K, V> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyMapPropertyBase}.
+     */
+    public ReadOnlyMapPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = MapExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyObjectPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyObjectPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyObjectPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyObjectPropertyBase.java
@@ -41,10 +41,16 @@
  */
 public abstract class ReadOnlyObjectPropertyBase<T> extends ReadOnlyObjectProperty<T> {
 
     ExpressionHelper<T> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyObjectPropertyBase}.
+     */
+    public ReadOnlyObjectPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlySetPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlySetPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlySetPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlySetPropertyBase.java
@@ -42,10 +42,16 @@
  */
 public abstract class ReadOnlySetPropertyBase<E> extends ReadOnlySetProperty<E> {
 
     private SetExpressionHelper<E> helper;
 
+    /**
+     * Creates a default {@code ReadOnlySetPropertyBase}.
+     */
+    public ReadOnlySetPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = SetExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyStringPropertyBase.java b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyStringPropertyBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyStringPropertyBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/ReadOnlyStringPropertyBase.java
@@ -39,10 +39,16 @@
  */
 public abstract class ReadOnlyStringPropertyBase extends ReadOnlyStringProperty {
 
     ExpressionHelper<String> helper;
 
+    /**
+     * Creates a default {@code ReadOnlyStringPropertyBase}.
+     */
+    public ReadOnlyStringPropertyBase() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/property/SetProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/SetProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/SetProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/SetProperty.java
@@ -55,10 +55,17 @@
  * @param <E> the type of the {@code Set} elements
  * @since JavaFX 2.1
  */
 public abstract class SetProperty<E> extends ReadOnlySetProperty<E> implements
         Property<ObservableSet<E>>, WritableSetValue<E> {
+
+    /**
+     * Creates a default {@code SetProperty}.
+     */
+    public SetProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(ObservableSet<E> v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/property/StringProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/StringProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/StringProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/StringProperty.java
@@ -55,10 +55,16 @@
  * @since JavaFX 2.0
  */
 public abstract class StringProperty extends ReadOnlyStringProperty implements
         Property<String>, WritableStringValue {
 
+    /**
+     * Creates a default {@code StringProperty}.
+     */
+    public StringProperty() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValue(String v) {
diff a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValueBase.java b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValueBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValueBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValueBase.java
@@ -45,10 +45,16 @@
  */
 public abstract class ObservableValueBase<T> implements ObservableValue<T> {
 
     private ExpressionHelper<T> helper;
 
+    /**
+     * Creates a default {@code ObservableValueBase}.
+     */
+    public ObservableValueBase() {
+    }
+
     /**
      * {@inheritDoc}
      */
     @Override
     public void addListener(InvalidationListener listener) {
diff a/modules/javafx.base/src/main/java/javafx/collections/ModifiableObservableListBase.java b/modules/javafx.base/src/main/java/javafx/collections/ModifiableObservableListBase.java
--- a/modules/javafx.base/src/main/java/javafx/collections/ModifiableObservableListBase.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/ModifiableObservableListBase.java
@@ -78,10 +78,16 @@
  * @see ObservableListBase
  * @since JavaFX 8.0
  */
 public abstract class ModifiableObservableListBase<E> extends ObservableListBase<E> {
 
+    /**
+     * Creates a default {@code ModifiableObservableListBase}.
+     */
+    public ModifiableObservableListBase() {
+    }
+
     @Override
     public boolean setAll(Collection<? extends E> col) {
         beginChange();
         try {
             clear();
diff a/modules/javafx.base/src/main/java/javafx/collections/ObservableArrayBase.java b/modules/javafx.base/src/main/java/javafx/collections/ObservableArrayBase.java
--- a/modules/javafx.base/src/main/java/javafx/collections/ObservableArrayBase.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/ObservableArrayBase.java
@@ -40,10 +40,16 @@
  */
 public abstract class ObservableArrayBase<T extends ObservableArray<T>> implements ObservableArray<T> {
 
     private ArrayListenerHelper<T> listenerHelper;
 
+    /**
+     * Creates a default {@code ObservableArrayBase}.
+     */
+    public ObservableArrayBase() {
+    }
+
     @Override public final void addListener(InvalidationListener listener) {
         listenerHelper = ArrayListenerHelper.<T>addListener(listenerHelper, (T) this, listener);
     }
 
     @Override public final void removeListener(InvalidationListener listener) {
diff a/modules/javafx.base/src/main/java/javafx/collections/ObservableListBase.java b/modules/javafx.base/src/main/java/javafx/collections/ObservableListBase.java
--- a/modules/javafx.base/src/main/java/javafx/collections/ObservableListBase.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/ObservableListBase.java
@@ -91,10 +91,16 @@
 public abstract class ObservableListBase<E> extends AbstractList<E>  implements ObservableList<E> {
 
     private ListListenerHelper<E> listenerHelper;
     private final ListChangeBuilder<E> changeBuilder = new ListChangeBuilder<E>(this);
 
+    /**
+     * Creates a default {@code ObservableListBase}.
+     */
+    public ObservableListBase() {
+    }
+
     /**
      * Adds a new update operation to the change.
      * <p><strong>Note</strong>: needs to be called inside {@code beginChange()} / {@code endChange()} block.
      * <p><strong>Note</strong>: needs to reflect the <em>current</em> state of the list.
      * @param pos the position in the list where the updated element resides.
diff a/modules/javafx.base/src/main/java/javafx/util/StringConverter.java b/modules/javafx.base/src/main/java/javafx/util/StringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/StringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/StringConverter.java
@@ -30,10 +30,17 @@
  * The type of objects and formats of strings are defined by the subclasses
  * of Converter.
  * @since JavaFX 2.0
  */
 public abstract class StringConverter<T> {
+
+    /**
+     * Creates a default {@code StringConverter}.
+     */
+    public StringConverter() {
+    }
+
     /**
     * Converts the object provided into its string form.
     * Format of the returned string is defined by the specific converter.
     * @param object the object of type {@code T} to convert
     * @return a string representation of the object passed in.
diff a/modules/javafx.base/src/main/java/javafx/util/converter/BigDecimalStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/BigDecimalStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/BigDecimalStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/BigDecimalStringConverter.java
@@ -32,10 +32,16 @@
  * <p>{@link StringConverter} implementation for {@link BigDecimal} values.</p>
  * @since JavaFX 2.1
  */
 public class BigDecimalStringConverter extends StringConverter<BigDecimal> {
 
+    /**
+     * Creates a default {@code BigDecimalStringConverter}.
+     */
+    public BigDecimalStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public BigDecimal fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/BigIntegerStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/BigIntegerStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/BigIntegerStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/BigIntegerStringConverter.java
@@ -31,10 +31,17 @@
 /**
  * <p>{@link StringConverter} implementation for {@link BigInteger} values.</p>
  * @since JavaFX 2.1
  */
 public class BigIntegerStringConverter extends StringConverter<BigInteger> {
+
+    /**
+     * Creates a default {@code BigIntegerStringConverter}.
+     */
+    public BigIntegerStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public BigInteger fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/BooleanStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/BooleanStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/BooleanStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/BooleanStringConverter.java
@@ -31,10 +31,17 @@
  * <p>{@link StringConverter} implementation for {@link Boolean}
  * (and boolean primitive) values.</p>
  * @since JavaFX 2.1
  */
 public class BooleanStringConverter extends StringConverter<Boolean> {
+
+    /**
+     * Creates a default {@code BooleanStringConverter}.
+     */
+    public BooleanStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Boolean fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/ByteStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/ByteStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/ByteStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/ByteStringConverter.java
@@ -31,10 +31,17 @@
  * <p>{@link StringConverter} implementation for {@link Byte}
  * (and byte primitive) values.</p>
  * @since JavaFX 2.1
  */
 public class ByteStringConverter extends StringConverter<Byte> {
+
+    /**
+     * Creates a default {@code ByteStringConverter}.
+     */
+    public ByteStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Byte fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/CharacterStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/CharacterStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/CharacterStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/CharacterStringConverter.java
@@ -31,10 +31,17 @@
  * <p>{@link StringConverter} implementation for {@link Character}
  * (and char primitive) values.</p>
  * @since JavaFX 2.1
  */
 public class CharacterStringConverter extends StringConverter<Character> {
+
+    /**
+     * Creates a default {@code CharacterStringConverter}.
+     */
+    public CharacterStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Character fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/DefaultStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/DefaultStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/DefaultStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/DefaultStringConverter.java
@@ -30,10 +30,17 @@
 /**
  * <p>{@link StringConverter} implementation for {@link String} values.</p>
  * @since JavaFX 2.1
  */
 public class DefaultStringConverter extends StringConverter<String> {
+
+    /**
+     * Creates a default {@code DefaultStringConverter}.
+     */
+    public DefaultStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public String toString(String value) {
         return (value != null) ? value : "";
     }
 
diff a/modules/javafx.base/src/main/java/javafx/util/converter/DoubleStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/DoubleStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/DoubleStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/DoubleStringConverter.java
@@ -31,10 +31,17 @@
  * <p>{@link StringConverter} implementation for {@link Double}
  * (and double primitive) values.</p>
  * @since JavaFX 2.1
  */
 public class DoubleStringConverter extends StringConverter<Double> {
+
+    /**
+     * Creates a default {@code DoubleStringConverter}.
+     */
+    public DoubleStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Double fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/FloatStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/FloatStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/FloatStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/FloatStringConverter.java
@@ -31,10 +31,17 @@
  * <p>{@link StringConverter} implementation for {@link Float}
  * (and float primitive) values.</p>
  * @since JavaFX 2.1
  */
 public class FloatStringConverter extends StringConverter<Float> {
+
+    /**
+     * Creates a default {@code FloatStringConverter}.
+     */
+    public FloatStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Float fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/IntegerStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/IntegerStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/IntegerStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/IntegerStringConverter.java
@@ -31,10 +31,17 @@
  * <p>{@link StringConverter} implementation for {@link Integer}
  * (and int primitive) values.</p>
  * @since JavaFX 2.1
  */
 public class IntegerStringConverter extends StringConverter<Integer> {
+
+    /**
+     * Creates a default {@code IntegerStringConverter}.
+     */
+    public IntegerStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Integer fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/LongStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/LongStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/LongStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/LongStringConverter.java
@@ -31,10 +31,17 @@
  * <p>{@link StringConverter} implementation for {@link Long}
  * (and long primitive) values.</p>
  * @since JavaFX 2.1
  */
 public class LongStringConverter extends StringConverter<Long> {
+
+    /**
+     * Creates a default {@code LongStringConverter}.
+     */
+    public LongStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Long fromString(String value) {
         // If the specified value is null or zero-length, return null
         if (value == null) {
             return null;
diff a/modules/javafx.base/src/main/java/javafx/util/converter/ShortStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/ShortStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/ShortStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/ShortStringConverter.java
@@ -30,10 +30,17 @@
 /**
  * <p>{@link StringConverter} implementation for {@link Short} values.</p>
  * @since JavaFX 2.1
  */
 public class ShortStringConverter extends StringConverter<Short> {
+
+    /**
+     * Creates a default {@code ShortStringConverter}.
+     */
+    public ShortStringConverter() {
+    }
+
     /** {@inheritDoc} */
     @Override public Short fromString(String text) {
         // If the specified value is null or zero-length, return null
         if (text == null) {
             return null;
