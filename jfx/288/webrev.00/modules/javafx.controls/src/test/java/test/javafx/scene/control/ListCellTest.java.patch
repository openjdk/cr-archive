diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -275,10 +275,97 @@
         ObservableList<String> model2 = FXCollections.observableArrayList("Water", "Juice", "Soda");
         list.setItems(model2);
         assertEquals("Water", cell.getItem());
     }
 
+//---------- tests around JDK-8251941: broken cleanup with null item
+
+    /**
+     * Transition not-empty -> empty by items modification
+     */
+    @Test
+    public void testNullItemRemoveAsLast() {
+        model.add(null);
+        cell.updateListView(list);
+        int last = model.size() - 1;
+        cell.updateIndex(last);
+        model.remove(last);
+        assertOffRangeState(last);
+    }
+
+    /**
+     * Sanity: transition not-empty -> not empty by items modification
+     */
+    @Test
+    public void testNullItemRemoveAsFirst() {
+        int first = 0;
+        model.add(first, null);
+        cell.updateListView(list);
+        cell.updateIndex(first);
+        model.remove(first);
+        assertInRangeState(first);
+    }
+
+    /**
+     * Transition not-empty -> empty by updateIndex
+     */
+    @Test
+    public void testNullItemUpdateIndexOffRange() {
+        model.add(0, null);
+        cell.updateListView(list);
+        cell.updateIndex(0);
+        // update to off range > max
+        cell.updateIndex(model.size());
+        assertOffRangeState(model.size());
+    }
+
+    /**
+     * Transition not-empty -> empty by updateIndex
+     */
+    @Test
+    public void testNullItemUpdateIndexNegative() {
+        model.add(0, null);
+        cell.updateListView(list);
+        cell.updateIndex(0);
+        // update to off range < 0
+        cell.updateIndex(-1);
+        assertOffRangeState(-1);
+    }
+
+    /**
+     * Sanity: in-range null item.
+     */
+    @Test
+    public void testNullItem() {
+        // null item in range, verify state
+        model.add(0, null);
+        cell.updateListView(list);
+        cell.updateIndex(0);
+        assertInRangeState(0);
+    }
+
+    /**
+     * Asserts state for the given off-range index.
+     * @param index
+     */
+    protected void assertOffRangeState(int index) {
+        assertEquals("off range index", index, cell.getIndex());
+        assertNull("off range cell item must be null", cell.getItem());
+        assertTrue("off range cell must be empty", cell.isEmpty());
+    }
+
+    /**
+     * Asserts state for the given in-range index.
+     * @param index
+     */
+    protected void assertInRangeState(int index) {
+        assertEquals("in range index", index, cell.getIndex());
+        assertEquals("in range cell item must be same as model item", model.get(index), cell.getItem());
+        assertFalse("in range cell must not be empty", cell.isEmpty());
+    }
+
+
     /*********************************************************************
      * Tests for the selection listener                                  *
      ********************************************************************/
 
     @Test public void selectionOnSelectionModelIsReflectedInCells() {
