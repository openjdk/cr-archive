diff a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag
--- a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag
+++ b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag
@@ -85,20 +85,20 @@
 
     float maxRange = lights[0].range;
     float dist = length(lightTangentSpacePositions[0].xyz);
     if (dist <= maxRange) {
         vec3 l = normalize(lightTangentSpacePositions[0].xyz);
-        float attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
         d += clamp(dot(n,l), 0.0, 1.0) * attenuatedColor;
         s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
 
     maxRange = lights[1].range;
     dist = length(lightTangentSpacePositions[1].xyz);
     if (dist <= maxRange) {
         vec3 l = normalize(lightTangentSpacePositions[1].xyz);
-        float attenuatedColor = (lights[1].color).rgb / (lights[1].attn.x + lights[1].attn.y * dist + lights[1].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[1].color).rgb / (lights[1].attn.x + lights[1].attn.y * dist + lights[1].attn.z * dist * dist);
         d += clamp(dot(n,l), 0.0, 1.0) * attenuatedColor;
         s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
     vec3 rez = (ambientColor + d) * diffuse.xyz + s * specular.rgb;
     rez += apply_selfIllum().xyz;
