diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/sg/prism/NGShape3D.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/sg/prism/NGShape3D.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/sg/prism/NGShape3D.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/sg/prism/NGShape3D.java
@@ -182,12 +182,11 @@
         while (pointLightIdx < 3) {
                 // Reset any previously set lights
                 meshView.setPointLight(pointLightIdx++,
                         0, 0, 0, // x y z
                         0, 0, 0, 0, // r g b w
-                        NGPointLight.getDefaultCa(), NGPointLight.getDefaultLa(), NGPointLight.getDefaultQa(),
-                        NGPointLight.getDefaultMaxRange());
+                        1, 0, 0, 0); // ca la qa maxRange
         }
 
         meshView.render(g);
     }
 
diff a/modules/javafx.graphics/src/main/native-prism-d3d/hlsl/psMath.h b/modules/javafx.graphics/src/main/native-prism-d3d/hlsl/psMath.h
--- a/modules/javafx.graphics/src/main/native-prism-d3d/hlsl/psMath.h
+++ b/modules/javafx.graphics/src/main/native-prism-d3d/hlsl/psMath.h
@@ -67,11 +67,11 @@
         float dist = length(L[i].xyz);
         if (dist <= gLightRange[i].x) {
             float ca = gLightAttenuation[i].x;
             float la = gLightAttenuation[i].y;
             float qa = gLightAttenuation[i].z;
-            float attenuatedColor = gLightColor[i].xyz / (ca + la * dist + qa * dist * dist);
+            float3 attenuatedColor = gLightColor[i].xyz / (ca + la * dist + qa * dist * dist);
 
             float3 l = normalize(L[i].xyz);
             d += saturate(dot(n, l)) * attenuatedColor;
             s += pow(saturate(dot(-refl, l)), power) * attenuatedColor;
         }
diff a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main1Light.frag b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main1Light.frag
--- a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main1Light.frag
+++ b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main1Light.frag
@@ -86,11 +86,11 @@
         vec3 refl = reflect(normalize(eyePos), n);
         vec3 l = normalize(lightTangentSpacePositions[0].xyz);
 
         float power = specular.a;
 
-        float attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
         d = clamp(dot(n, l), 0.0, 1.0) * attenuatedColor;
         s = pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
     vec3 rez = (ambientColor + d) * diffuse.xyz + s * specular.rgb;
     rez += apply_selfIllum().xyz;
diff a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag
--- a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag
+++ b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main2Lights.frag
@@ -85,20 +85,20 @@
 
     float maxRange = lights[0].range;
     float dist = length(lightTangentSpacePositions[0].xyz);
     if (dist <= maxRange) {
         vec3 l = normalize(lightTangentSpacePositions[0].xyz);
-        float attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
         d += clamp(dot(n,l), 0.0, 1.0) * attenuatedColor;
         s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
 
     maxRange = lights[1].range;
     dist = length(lightTangentSpacePositions[1].xyz);
     if (dist <= maxRange) {
         vec3 l = normalize(lightTangentSpacePositions[1].xyz);
-        float attenuatedColor = (lights[1].color).rgb / (lights[1].attn.x + lights[1].attn.y * dist + lights[1].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[1].color).rgb / (lights[1].attn.x + lights[1].attn.y * dist + lights[1].attn.z * dist * dist);
         d += clamp(dot(n,l), 0.0, 1.0) * attenuatedColor;
         s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
     vec3 rez = (ambientColor + d) * diffuse.xyz + s * specular.rgb;
     rez += apply_selfIllum().xyz;
diff a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag
--- a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag
+++ b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag
@@ -85,29 +85,29 @@
 
     float maxRange = lights[0].range;
     float dist = length(lightTangentSpacePositions[0].xyz);
     if (dist <= maxRange) {
         vec3 l = normalize(lightTangentSpacePositions[0].xyz);
-        float attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[0].color).rgb / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
         d += clamp(dot(n,l), 0.0, 1.0) * attenuatedColor;
         s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
 
     maxRange = lights[1].range;
     dist = length(lightTangentSpacePositions[1].xyz);
     if (dist <= maxRange) {
         vec3 l = normalize(lightTangentSpacePositions[1].xyz);
-        float attenuatedColor = (lights[1].color).rgb / (lights[1].attn.x + lights[1].attn.y * dist + lights[1].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[1].color).rgb / (lights[1].attn.x + lights[1].attn.y * dist + lights[1].attn.z * dist * dist);
         d += clamp(dot(n,l), 0.0, 1.0) * attenuatedColor;
         s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
 
     maxRange = lights[2].range;
     dist = length(lightTangentSpacePositions[2].xyz);
     if (dist <= maxRange) {
         vec3 l = normalize(lightTangentSpacePositions[2].xyz);
-        float attenuatedColor = (lights[2].color).rgb / (lights[2].attn.x + lights[2].attn.y * dist + lights[2].attn.z * dist * dist);
+        vec3 attenuatedColor = (lights[2].color).rgb / (lights[2].attn.x + lights[2].attn.y * dist + lights[2].attn.z * dist * dist);
         d += clamp(dot(n,l), 0.0, 1.0) * attenuatedColor;
         s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * attenuatedColor;
     }
 
     vec3 rez = (ambientColor + d) * diffuse.xyz + s * specular.rgb;
diff a/tests/performance/3DLighting/attenuation/AttenLightingSample.java b/tests/performance/3DLighting/attenuation/AttenLightingSample.java
--- a/tests/performance/3DLighting/attenuation/AttenLightingSample.java
+++ b/tests/performance/3DLighting/attenuation/AttenLightingSample.java
@@ -1,4 +1,30 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 package attenuation;
 
 import javafx.beans.property.DoubleProperty;
 import javafx.scene.PointLight;
 import javafx.scene.control.Label;
diff a/tests/performance/3DLighting/attenuation/CameraScene3D.java b/tests/performance/3DLighting/attenuation/CameraScene3D.java
--- a/tests/performance/3DLighting/attenuation/CameraScene3D.java
+++ b/tests/performance/3DLighting/attenuation/CameraScene3D.java
@@ -1,4 +1,30 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 package attenuation;
 
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.DoubleProperty;
 import javafx.beans.property.SimpleBooleanProperty;
diff a/tests/performance/3DLighting/attenuation/Environment.java b/tests/performance/3DLighting/attenuation/Environment.java
--- a/tests/performance/3DLighting/attenuation/Environment.java
+++ b/tests/performance/3DLighting/attenuation/Environment.java
@@ -1,4 +1,30 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 package attenuation;
 
 import java.util.ArrayList;
 import java.util.List;
 
diff a/tests/performance/3DLighting/attenuation/FPSCounter.java b/tests/performance/3DLighting/attenuation/FPSCounter.java
--- a/tests/performance/3DLighting/attenuation/FPSCounter.java
+++ b/tests/performance/3DLighting/attenuation/FPSCounter.java
@@ -1,4 +1,30 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 package attenuation;
 
 import javafx.animation.AnimationTimer;
 
 final class FPSCounter extends AnimationTimer {
diff a/tests/performance/3DLighting/attenuation/LightingSample.java b/tests/performance/3DLighting/attenuation/LightingSample.java
--- a/tests/performance/3DLighting/attenuation/LightingSample.java
+++ b/tests/performance/3DLighting/attenuation/LightingSample.java
@@ -1,4 +1,30 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 package attenuation;
 
 import javafx.animation.Animation;
 import javafx.animation.TranslateTransition;
 import javafx.application.Application;
