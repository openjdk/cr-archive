diff a/modules/javafx.graphics/src/main/native-prism-d3d/D3DMeshView.cc b/modules/javafx.graphics/src/main/native-prism-d3d/D3DMeshView.cc
--- a/modules/javafx.graphics/src/main/native-prism-d3d/D3DMeshView.cc
+++ b/modules/javafx.graphics/src/main/native-prism-d3d/D3DMeshView.cc
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019 Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -71,20 +71,25 @@
     ambientLightColor[1] = g;
     ambientLightColor[2] = b;
 }
 
 void D3DMeshView::setPointLight(int index, float x, float y, float z,
-    float r, float g, float b, float w) {
+        float r, float g, float b, float w,
+        float ca, float la, float qa, float maxRange) {
     // NOTE: We only support up to 3 point lights at the present
     if (index >= 0 && index <= 2) {
         lights[index].position[0] = x;
         lights[index].position[1] = y;
         lights[index].position[2] = z;
         lights[index].color[0] = r;
         lights[index].color[1] = g;
         lights[index].color[2] = b;
         lights[index].w = w;
+        lights[index].attenuation[0] = ca;
+        lights[index].attenuation[1] = la;
+        lights[index].attenuation[2] = qa;
+        lights[index].maxRange = maxRange;
         lightsDirty = TRUE;
     }
 }
 
 void D3DMeshView::computeNumLights() {
@@ -152,23 +157,45 @@
     if (!status) {
         cout << "D3DMeshView.render() - SetPixelShaderConstantF (PSR_SPECULARCOLOR) failed !!!" << endl;
         return;
     }
 
-    float lightsColor[12];
-    for (int i = 0, j = 0; i < 3; i++) {
+    float lightsColor[12];       // 3 lights x (3 color + 1 padding)
+    float lightsAttenuation[12]; // 3 lights x (3 attenuation factors + 1 padding)
+    float lightsRange[12];		 // 3 lights x (1 maxRange + 3 padding)
+    for (int i = 0, c = 0, a = 0, r = 0; i < 3; i++) {
         float w = lights[i].w;
-        lightsColor[j++] = lights[i].color[0] * w;
-        lightsColor[j++] = lights[i].color[1] * w;
-        lightsColor[j++] = lights[i].color[2] * w;
-        lightsColor[j++] = 1;
+        lightsColor[c++] = lights[i].color[0] * w;
+        lightsColor[c++] = lights[i].color[1] * w;
+        lightsColor[c++] = lights[i].color[2] * w;
+        lightsColor[c++] = 1;
+
+        lightsAttenuation[a++] = lights[i].attenuation[0];
+        lightsAttenuation[a++] = lights[i].attenuation[1];
+        lightsAttenuation[a++] = lights[i].attenuation[2];
+        lightsAttenuation[a++] = 0;
+
+        lightsRange[r++] = lights[i].maxRange;
+        lightsRange[r++] = 0;
+        lightsRange[r++] = 0;
+        lightsRange[r++] = 0;
     }
     status = SUCCEEDED(device->SetPixelShaderConstantF(PSR_LIGHTCOLOR, lightsColor, 3));
     if (!status) {
         cout << "D3DMeshView.render() - SetPixelShaderConstantF (PSR_LIGHTCOLOR) failed !!!" << endl;
         return;
     }
+    status = SUCCEEDED(device->SetPixelShaderConstantF(PSR_LIGHT_ATTENUATION, lightsAttenuation, 3));
+    if (!status) {
+        cout << "D3DMeshView.render() - SetPixelShaderConstantF (PSR_LIGHT_ATTENUATION) failed !!!" << endl;
+        return;
+    }
+    status = SUCCEEDED(device->SetPixelShaderConstantF(PSR_LIGHT_RANGE, lightsRange, 3));
+    if (!status) {
+        cout << "D3DMeshView.render() - SetPixelShaderConstantF (PSR_LIGHT_RANGE) failed !!!" << endl;
+        return;
+    }
 
     int bm = pShader->getBumpMode(material->isBumpMap());
     int sm = pShader->getSpecularMode(material->isSpecularMap(), material->isSpecularColor());
     int im = material->isSelfIllumMap() ? 1 : 0;
 
