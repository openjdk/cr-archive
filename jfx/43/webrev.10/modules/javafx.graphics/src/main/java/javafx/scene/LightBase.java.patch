diff a/modules/javafx.graphics/src/main/java/javafx/scene/LightBase.java b/modules/javafx.graphics/src/main/java/javafx/scene/LightBase.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/LightBase.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/LightBase.java
@@ -42,12 +42,14 @@
 import java.util.stream.Collectors;
 
 import javafx.application.ConditionalFeature;
 import javafx.application.Platform;
 import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.DoubleProperty;
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleDoubleProperty;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.collections.ListChangeListener.Change;
 import javafx.collections.ObservableList;
 import javafx.scene.paint.Color;
 import javafx.scene.shape.Shape3D;
@@ -275,10 +277,24 @@
         } else if (newScene != null) {
             newScene.addLight(this);
         }
     }
 
+    /**
+     * For use by implementing subclasses. Treat as protected.
+     *
+     * Creates and returns a SimpleDoubleProperty with an invalidation scheme.
+     */
+    DoubleProperty getLightDoubleProperty(String name, double initialValue) {
+        return new SimpleDoubleProperty(this, name, initialValue) {
+            @Override
+            protected void invalidated() {
+                NodeHelper.markDirty(LightBase.this, DirtyBits.NODE_LIGHT);
+            }
+        };
+    }
+
     private void markOwnerDirty() {
         // if the light is part of the scene/subScene, we will need to notify
         // the owner to mark the entire scene/subScene dirty.
         SubScene subScene = getSubScene();
         if (subScene != null) {
