diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
@@ -138,11 +138,11 @@
             new KeyMapping(new KeyBinding(DOWN).shortcut().shift(), e -> discontinuousSelectNextRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shortcut().shift(), e -> discontinuousSelectPageUp()),
             new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown())
         );
 
-        if (Boolean.FALSE.equals(control.getProperties().containsKey("excludeKeyMappingsForComboBoxEditor"))) {
+        if (!control.getProperties().containsKey("excludeKeyMappingsForComboBoxEditor")) {
             // This is not ComboBox's ListView
             addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());
             addDefaultMapping(listViewInputMap,
                     new KeyMapping(HOME, e -> selectFirstRow()),
                     new KeyMapping(END, e -> selectLastRow()),
@@ -353,24 +353,20 @@
             }
         }
     };
 
     private final InvalidationListener propertiesListener = inv -> {
-        Boolean isComboBoxEditable = (Boolean)getNode().getProperties().get("editableComboBoxEditor");
-        if (isComboBoxEditable != null) {
-            // This is ComboBox's ListView
-            if (isComboBoxEditable) {
-                // ComboBox is editable.
-                removeMapping(new KeyBinding(HOME));
-                removeMapping(new KeyBinding(END));
-            } else {
-                // ComboBox is not editable
-                addDefaultMapping(getInputMap(),
-                        new KeyMapping(HOME, e -> selectFirstRow()),
-                        new KeyMapping(END, e -> selectLastRow())
-                );
-            }
+        if (Boolean.FALSE.equals(getNode().getProperties().get("editableComboBoxEditor"))) {
+            // ListView's ComboBox is non editable
+            addDefaultMapping(getInputMap(),
+                    new KeyMapping(HOME, e -> selectFirstRow()),
+                    new KeyMapping(END, e -> selectLastRow())
+            );
+        } else if (Boolean.TRUE.equals(getNode().getProperties().get("editableComboBoxEditor"))) {
+            // ListView's ComboBox is editable
+            removeMapping(new KeyBinding(HOME));
+            removeMapping(new KeyBinding(END));
         }
     };
 
     private final WeakInvalidationListener weakPropertiesListener =
             new WeakInvalidationListener(propertiesListener);
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -1460,41 +1460,64 @@
         StageLoader sl = new StageLoader(cb);
 
         ListView listView = (ListView) ((ComboBoxListViewSkin)cb.getSkin()).getPopupContent();
         ListViewBehavior lvBehavior = (ListViewBehavior)ControlSkinFactory.getBehavior(listView.getSkin());
         InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();
+        ObservableList<?> inputMappings = lvInputMap.getMappings();
         // In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap
         InputMap<ListView<?>> verticalInputMap = lvInputMap.getChildInputMaps().get(2);
+        ObservableList<?> verticalInputMappings = verticalInputMap.getMappings();
 
+        cb.setEditable(true);
+        testKeyMappingsForEditableCB(inputMappings);
+        testCommonKeyMappings(inputMappings, verticalInputMappings);
+
+        cb.setEditable(false);
+        testKeyMappingsForNonEditableCB(inputMappings);
+        testCommonKeyMappings(inputMappings, verticalInputMappings);
+
+        sl.dispose();
+    }
+
+    private void testKeyMappingsForEditableCB(ObservableList<?> inputMappings) {
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.END), null)));
+    }
+
+    private void testKeyMappingsForNonEditableCB(ObservableList<?> inputMappings) {
+        assertTrue(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
+        assertTrue(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.END), null)));
+    }
+
+    private void testCommonKeyMappings(ObservableList<?> inputMappings,
+                                       ObservableList<?> verticalInputMappings) {
         // Verify FocusTraversalInputMap
         for(InputMap.Mapping<?> mapping : FocusTraversalInputMap.getFocusTraversalMappings()) {
-            assertFalse(lvInputMap.getMappings().contains(mapping));
+            assertFalse(inputMappings.contains(mapping));
         }
 
         // Verify default InputMap
-        assertFalse(lvInputMap.getMappings().contains(
-                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
-        assertFalse(lvInputMap.getMappings().contains(
-                new KeyMapping(new KeyBinding(KeyCode.END), null)));
-        assertFalse(lvInputMap.getMappings().contains(
+        assertFalse(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.HOME).shift(), null)));
-        assertFalse(lvInputMap.getMappings().contains(
+        assertFalse(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.END).shift(), null)));
-        assertFalse(lvInputMap.getMappings().contains(
+        assertFalse(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut(), null)));
-        assertFalse(lvInputMap.getMappings().contains(
+        assertFalse(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.END).shortcut(), null)));
-        assertFalse(lvInputMap.getMappings().contains(
+        assertFalse(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.A).shortcut(), null)));
 
         // Verify vertical child InputMap
-        assertFalse(verticalInputMap.getMappings().contains(
+        assertFalse(verticalInputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut().shift(), null)));
-        assertFalse(verticalInputMap.getMappings().contains(
+        assertFalse(verticalInputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.END).shortcut().shift(), null)));
-
-        sl.dispose();
     }
 
     @Test public void test_rt36280_nonEditable_enterHidesShowingPopup() {
         final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
         StageLoader sl = new StageLoader(cb);
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
@@ -2050,38 +2050,40 @@
                 .observableArrayList("Item1", "Item2"));
         StageLoader sl = new StageLoader(listView);
 
         ListViewBehavior lvBehavior = (ListViewBehavior) ControlSkinFactory.getBehavior(listView.getSkin());
         InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();
+        ObservableList<?> inputMappings = lvInputMap.getMappings();
         // In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap
         InputMap<ListView<?>> verticalInputMap = lvInputMap.getChildInputMaps().get(2);
+        ObservableList<?> verticalInputMappings = verticalInputMap.getMappings();
 
         // Verify FocusTraversalInputMap
         for(InputMap.Mapping<?> mapping : FocusTraversalInputMap.getFocusTraversalMappings()) {
-            assertTrue(lvInputMap.getMappings().contains(mapping));
+            assertTrue(inputMappings.contains(mapping));
         }
 
         // Verify default InputMap
-        assertTrue(lvInputMap.getMappings().contains(
+        assertTrue(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
-        assertTrue(lvInputMap.getMappings().contains(
+        assertTrue(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.END), null)));
-        assertTrue(lvInputMap.getMappings().contains(
+        assertTrue(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.HOME).shift(), null)));
-        assertTrue(lvInputMap.getMappings().contains(
+        assertTrue(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.END).shift(), null)));
-        assertTrue(lvInputMap.getMappings().contains(
+        assertTrue(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut(), null)));
-        assertTrue(lvInputMap.getMappings().contains(
+        assertTrue(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.END).shortcut(), null)));
-        assertTrue(lvInputMap.getMappings().contains(
+        assertTrue(inputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.A).shortcut(), null)));
 
         // Verify vertical child InputMap
-        assertTrue(verticalInputMap.getMappings().contains(
+        assertTrue(verticalInputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut().shift(), null)));
-        assertTrue(verticalInputMap.getMappings().contains(
+        assertTrue(verticalInputMappings.contains(
                 new KeyMapping(new KeyBinding(KeyCode.END).shortcut().shift(), null)));
 
         sl.dispose();
     }
 
