diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java
@@ -86,11 +86,11 @@
         // make a copy of the existing mappings, so we only check against those
         List<Mapping<?>> existingMappings = new ArrayList<>(inputMap.getMappings());
 
         for (Mapping<?> mapping : newMapping) {
             // check if a mapping already exists, and if so, do not add this mapping
-            // TODO this is insufficient as we need to check entire InputMap hierarchy
+            // TODO: JDK-8250807: this is insufficient as we need to check entire InputMap hierarchy
 //            for (Mapping<?> existingMapping : existingMappings) {
 //                if (existingMapping != null && existingMapping.equals(mapping)) {
 //                    return;
 //                }
 //            }
@@ -114,10 +114,11 @@
 //                new InputMap<>(node);
         return new InputMap<>(node);
     }
 
     protected void removeMapping(Object key) {
+        // TODO: JDK-8250807: Traverse the child maps of getInputMap() and remove the mapping from them.
         InputMap<?> inputMap = getInputMap();
         inputMap.lookupMapping(key).ifPresent(mapping -> {
             inputMap.getMappings().remove(mapping);
             installedDefaultMappings.remove(mapping);
         });
diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxListViewBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxListViewBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxListViewBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxListViewBehavior.java
@@ -24,57 +24,11 @@
  */
 
 package com.sun.javafx.scene.control.behavior;
 
 import javafx.scene.control.ComboBox;
-import javafx.scene.control.ComboBoxBase;
-import javafx.scene.control.SelectionModel;
-import com.sun.javafx.scene.control.inputmap.InputMap;
-
-import static javafx.scene.input.KeyCode.DOWN;
-import static javafx.scene.input.KeyCode.UP;
 
 public class ComboBoxListViewBehavior<T> extends ComboBoxBaseBehavior<T> {
-
-    /***************************************************************************
-     *                                                                         *
-     * Constructors                                                            *
-     *                                                                         *
-     **************************************************************************/
-
-    /**
-     *
-     */
     public ComboBoxListViewBehavior(final ComboBox<T> comboBox) {
         super(comboBox);
-
-        // Add these bindings as a child input map, so they take precedence
-        InputMap<ComboBoxBase<T>> comboBoxListViewInputMap = new InputMap<>(comboBox);
-        comboBoxListViewInputMap.getMappings().addAll(
-            new InputMap.KeyMapping(UP, e -> selectPrevious()),
-            new InputMap.KeyMapping(DOWN, e -> selectNext())
-        );
-        addDefaultChildMap(getInputMap(), comboBoxListViewInputMap);
-    }
-
-    /***************************************************************************
-     *                                                                         *
-     * Key event handling                                                      *
-     *                                                                         *
-     **************************************************************************/
-
-    private ComboBox<T> getComboBox() {
-        return (ComboBox<T>) getNode();
-    }
-
-    private void selectPrevious() {
-        SelectionModel<T> sm = getComboBox().getSelectionModel();
-        if (sm == null) return;
-        sm.selectPrevious();
-    }
-
-    private void selectNext() {
-        SelectionModel<T> sm = getComboBox().getSelectionModel();
-        if (sm == null) return;
-        sm.selectNext();
     }
 }
diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
@@ -193,12 +193,35 @@
 
         // Only add this if we're on an embedded platform that supports 5-button navigation
         if (Utils.isTwoLevelFocus()) {
             tlFocus = new TwoLevelFocusListBehavior(control); // needs to be last.
         }
+        Boolean isRemoveKeyMappings = (Boolean) control.getProperties().get(
+                "removeKeyMappingsForComboBoxEditor");
+        if (isRemoveKeyMappings != null && isRemoveKeyMappings) {
+            removeKeyMappingsForComboBoxEditor();
+        }
     }
 
+    private void removeKeyMappingsForComboBoxEditor() {
+        removeMapping(new KeyBinding(LEFT));
+        removeMapping(new KeyBinding(KP_LEFT));
+        removeMapping(new KeyBinding(RIGHT));
+        removeMapping(new KeyBinding(KP_RIGHT));
+        removeMapping(new KeyBinding(HOME));
+        removeMapping(new KeyBinding(HOME).shift());
+        removeMapping(new KeyBinding(HOME).shortcut());
+        removeMapping(new KeyBinding(END));
+        removeMapping(new KeyBinding(END).shift());
+        removeMapping(new KeyBinding(END).shortcut());
+        removeMapping(new KeyBinding(A).shortcut());
+        /*
+        Should be uncommented after the removeMapping() issue JBS-8250807 is fixed.
+        removeMapping(new KeyBinding(HOME).shortcut().shift());
+        removeMapping(new KeyBinding(END).shortcut().shift());
+        */
+    }
 
 
     /***************************************************************************
      *                                                                         *
      * Implementation of BehaviorBase API                                      *
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
@@ -502,10 +502,11 @@
     private ListView<T> createListView() {
         final ListView<T> _listView = new ListView<T>() {
 
             {
                 getProperties().put("selectFirstRowByDefault", false);
+                getProperties().put("removeKeyMappingsForComboBoxEditor", true);
             }
 
             @Override protected double computeMinHeight(double width) {
                 return 30;
             }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -1332,10 +1332,128 @@
         assertTrue(cb.isShowing());
 
         sl.dispose();
     }
 
+    @Test public void test_EditorKeyInputsWhenPopupIsShowing() {
+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
+        cb.setEditable(true);
+        StageLoader sl = new StageLoader(cb);
+        KeyEventFirer keyboard = new KeyEventFirer(cb);
+
+        new StageLoader(cb);
+
+        // Show the popup
+        assertFalse(cb.isShowing());
+        cb.requestFocus();
+        cb.getEditor().setText("ABC DEF");
+        assertEquals("ABC DEF", cb.getEditor().getText());
+        keyboard.doDownArrowPress(KeyModifier.ALT);
+        // Sanity
+        assertTrue(cb.isShowing());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // LEFT, RIGHT keys with CTRL, SHIFT modifiers
+        // Test RIGHT key
+        keyboard.doRightArrowPress();
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test KP_RIGHT key
+        keyboard.doKeyPress(KeyCode.KP_RIGHT);
+        assertEquals(2, cb.getEditor().getCaretPosition());
+
+        // Test LEFT key
+        keyboard.doLeftArrowPress();
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test KP_LEFT key
+        keyboard.doKeyPress(KeyCode.KP_LEFT);
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);
+        assertEquals("A", cb.getEditor().getSelectedText());
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(4, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("ABC ", cb.getEditor().getSelectedText());
+        assertEquals(4, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // HOME, END keys with CTRL, SHIFT modifiers
+        // Test END key
+        keyboard.doKeyPress(KeyCode.END);
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test HOME key
+        keyboard.doKeyPress(KeyCode.HOME);
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.SHIFT);
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        /* @Ignore(JBS-8250807)
+        // Test CTRL + SHIFT + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+         */
+
+        // Test CTRL + A key
+        keyboard.doLeftArrowPress();
+        assertEquals("", cb.getEditor().getSelectedText());
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+
+        // Sanity
+        assertTrue(cb.isShowing());
+
+        sl.dispose();
+    }
+
     @Test public void test_rt36280_nonEditable_enterHidesShowingPopup() {
         final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
         StageLoader sl = new StageLoader(cb);
         KeyEventFirer cbKeyboard = new KeyEventFirer(cb);
 
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
@@ -169,10 +169,44 @@
         MultipleSelectionModel<String> sm = ListViewShim.<String>getListViewBitSetSelectionModel(listView);
         listView.setSelectionModel(sm);
         assertSame(sm, sm);
     }
 
+    @Test public void test_SwitchingSelectionModel() {
+        ListView<String> listView = new ListView<>();
+        listView.getItems().addAll("a", "b", "c", "d");
+
+        MultipleSelectionModel<String> sm;
+        StageLoader sl = new StageLoader(listView);
+        KeyEventFirer keyboard = new KeyEventFirer(listView);
+
+        MultipleSelectionModel<String> smMultiple = ListViewShim.<String>getListViewBitSetSelectionModel(listView);
+        smMultiple.setSelectionMode(SelectionMode.MULTIPLE);
+        MultipleSelectionModel<String> smSingle = ListViewShim.<String>getListViewBitSetSelectionModel(listView);
+        smSingle.setSelectionMode(SelectionMode.SINGLE);
+
+        listView.setSelectionModel(smMultiple);
+        sm = listView.getSelectionModel();
+
+        assertEquals(0, sm.getSelectedItems().size());
+        sm.clearAndSelect(0);
+        assertEquals(1, sm.getSelectedItems().size());
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(4, sm.getSelectedItems().size());
+
+        listView.setSelectionModel(smSingle);
+        sm = listView.getSelectionModel();
+
+        assertEquals(0, sm.getSelectedItems().size());
+        sm.clearAndSelect(0);
+        assertEquals(1, sm.getSelectedItems().size());
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(1, sm.getSelectedItems().size());
+
+        sl.dispose();
+    }
+
     @Test public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {
         final String randomString = new String("I AM A CRAZY RANDOM STRING");
         sm.select(randomString);
         assertEquals(-1, sm.getSelectedIndex());
         assertSame(randomString, sm.getSelectedItem());
@@ -1463,10 +1497,41 @@
         assertEquals("b", sm.getSelectedItems().get(1));
 
         sl.dispose();
     }
 
+    @Test public void test_switchingSelectionMode() {
+        ListView<String> listView = new ListView<>();
+        listView.getItems().addAll("a", "b", "c", "d");
+
+        MultipleSelectionModel<String> sm = listView.getSelectionModel();
+        StageLoader sl = new StageLoader(listView);
+        KeyEventFirer keyboard = new KeyEventFirer(listView);
+
+        assertEquals(0, sm.getSelectedItems().size());
+        sm.clearAndSelect(0);
+        assertEquals(1, sm.getSelectedItems().size());
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(1, sm.getSelectedItems().size());
+
+        sm.setSelectionMode(SelectionMode.MULTIPLE);
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(4, sm.getSelectedItems().size());
+
+        sm.setSelectionMode(SelectionMode.SINGLE);
+        assertEquals(1, sm.getSelectedItems().size());
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(1, sm.getSelectedItems().size());
+
+        sm.setSelectionMode(SelectionMode.MULTIPLE);
+        assertEquals(1, sm.getSelectedItems().size());
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(4, sm.getSelectedItems().size());
+
+        sl.dispose();
+    }
+
     @Test public void test_rt_16068_firstElement_selectAndRemoveSameRow() {
         // select and then remove the 'a' item, selection and focus should both
         // stay at the first row, now 'b'
         test_rt_16068(0, 0, 0);
     }
