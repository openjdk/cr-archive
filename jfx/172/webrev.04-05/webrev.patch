diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
@@ -74,18 +74,12 @@
     public ListViewBehavior(ListView<T> control) {
         super(control);
 
         // create a map for listView-specific mappings
         listViewInputMap = createInputMap();
-
         // add focus traversal mappings
-        addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());
         addDefaultMapping(listViewInputMap,
-            new KeyMapping(HOME, e -> selectFirstRow()),
-            new KeyMapping(END, e -> selectLastRow()),
-            new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),
-            new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shift(), e -> selectAllPageUp()),
             new KeyMapping(new KeyBinding(PAGE_DOWN).shift(), e -> selectAllPageDown()),
 
             new KeyMapping(new KeyBinding(SPACE).shift(), e -> selectAllToFocus(false)),
             new KeyMapping(new KeyBinding(SPACE).shortcut().shift(), e -> selectAllToFocus(true)),
@@ -96,13 +90,10 @@
             new KeyMapping(ENTER, e -> activate()),
             new KeyMapping(SPACE, e -> activate()),
             new KeyMapping(F2, e -> activate()),
             new KeyMapping(ESCAPE, e -> cancelEdit()),
 
-            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()),
-            new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
-            new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shortcut(), e -> focusPageUp()),
             new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut(), e -> focusPageDown()),
 
             new KeyMapping(new KeyBinding(BACK_SLASH).shortcut(), e -> clearSelection()),
 
@@ -142,15 +133,31 @@
             new KeyMapping(new KeyBinding(DOWN).shortcut(), e -> focusNextRow()),
 
             new KeyMapping(new KeyBinding(UP).shortcut().shift(), e -> discontinuousSelectPreviousRow()),
             new KeyMapping(new KeyBinding(DOWN).shortcut().shift(), e -> discontinuousSelectNextRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shortcut().shift(), e -> discontinuousSelectPageUp()),
-            new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown()),
-            new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
-            new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow())
+            new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown())
         );
 
+        if (!Boolean.TRUE.equals(control.getProperties().containsKey("excludeKeyMappingsForComboBoxEditor"))) {
+            addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());
+            addDefaultMapping(listViewInputMap,
+                    new KeyMapping(HOME, e -> selectFirstRow()),
+                    new KeyMapping(END, e -> selectLastRow()),
+                    new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),
+                    new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow()),
+                    new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
+                    new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
+                    new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll())
+            );
+
+            addDefaultMapping(verticalListInputMap,
+                    new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
+                    new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow())
+            );
+        }
+
         addDefaultChildMap(listViewInputMap, verticalListInputMap);
 
         // --- horizontal listview
         InputMap<ListView<T>> horizontalListInputMap = new InputMap<>(control);
         horizontalListInputMap.setInterceptor(event -> control.getOrientation() != Orientation.HORIZONTAL);
@@ -193,32 +200,10 @@
 
         // Only add this if we're on an embedded platform that supports 5-button navigation
         if (Utils.isTwoLevelFocus()) {
             tlFocus = new TwoLevelFocusListBehavior(control); // needs to be last.
         }
-        if (Boolean.TRUE.equals(control.getProperties().get("removeKeyMappingsForComboBoxEditor"))) {
-            removeKeyMappingsForComboBoxEditor();
-        }
-    }
-
-    private void removeKeyMappingsForComboBoxEditor() {
-        removeMapping(new KeyBinding(LEFT));
-        removeMapping(new KeyBinding(KP_LEFT));
-        removeMapping(new KeyBinding(RIGHT));
-        removeMapping(new KeyBinding(KP_RIGHT));
-        removeMapping(new KeyBinding(HOME));
-        removeMapping(new KeyBinding(HOME).shift());
-        removeMapping(new KeyBinding(HOME).shortcut());
-        removeMapping(new KeyBinding(END));
-        removeMapping(new KeyBinding(END).shift());
-        removeMapping(new KeyBinding(END).shortcut());
-        removeMapping(new KeyBinding(A).shortcut());
-        /*
-        Should be uncommented after the removeMapping() issue JBS-8250807 is fixed.
-        removeMapping(new KeyBinding(HOME).shortcut().shift());
-        removeMapping(new KeyBinding(END).shortcut().shift());
-        */
     }
 
 
     /***************************************************************************
      *                                                                         *
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
@@ -502,11 +502,11 @@
     private ListView<T> createListView() {
         final ListView<T> _listView = new ListView<T>() {
 
             {
                 getProperties().put("selectFirstRowByDefault", false);
-                getProperties().put("removeKeyMappingsForComboBoxEditor", true);
+                getProperties().put("excludeKeyMappingsForComboBoxEditor", true);
             }
 
             @Override protected double computeMinHeight(double width) {
                 return 30;
             }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -23,13 +23,20 @@
  * questions.
  */
 
 package test.javafx.scene.control;
 
+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;
+import com.sun.javafx.scene.control.behavior.ListViewBehavior;
+import com.sun.javafx.scene.control.inputmap.InputMap;
+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;
+import com.sun.javafx.scene.control.inputmap.KeyBinding;
+import com.sun.javafx.tk.Toolkit;
+
+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;
 import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;
 import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;
-import com.sun.javafx.tk.Toolkit;
 import javafx.css.PseudoClass;
 
 import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
 import test.com.sun.javafx.scene.control.infrastructure.StageLoader;
 import javafx.scene.control.skin.ComboBoxListViewSkin;
@@ -1338,12 +1345,10 @@
         final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
         cb.setEditable(true);
         StageLoader sl = new StageLoader(cb);
         KeyEventFirer keyboard = new KeyEventFirer(cb);
 
-        new StageLoader(cb);
-
         // Show the popup
         assertFalse(cb.isShowing());
         cb.requestFocus();
         cb.getEditor().setText("ABC DEF");
         assertEquals("ABC DEF", cb.getEditor().getText());
@@ -1426,21 +1431,19 @@
         // Test CTRL + HOME key
         keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL);
         assertEquals("", cb.getEditor().getSelectedText());
         assertEquals(0, cb.getEditor().getCaretPosition());
 
-        /* @Ignore(JBS-8250807)
         // Test CTRL + SHIFT + END key
         keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL, KeyModifier.SHIFT);
         assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
         assertEquals(7, cb.getEditor().getCaretPosition());
 
         // Test CTRL + SHIFT + HOME key
         keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL, KeyModifier.SHIFT);
         assertEquals("", cb.getEditor().getSelectedText());
         assertEquals(0, cb.getEditor().getCaretPosition());
-         */
 
         // Test CTRL + A key
         keyboard.doLeftArrowPress();
         assertEquals("", cb.getEditor().getSelectedText());
         keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
@@ -1450,10 +1453,50 @@
         assertTrue(cb.isShowing());
 
         sl.dispose();
     }
 
+    @Test public void testExcludeKeyMappingsForComboBoxEditor() {
+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
+        StageLoader sl = new StageLoader(cb);
+
+        ListView listView = (ListView) ((ComboBoxListViewSkin)cb.getSkin()).getPopupContent();
+        ListViewBehavior lvBehavior = (ListViewBehavior)ControlSkinFactory.getBehavior(listView.getSkin());
+        InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();
+        // In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap
+        InputMap<ListView<?>> verticalInputMap = lvInputMap.getChildInputMaps().get(2);
+
+        // Verify FocusTraversalInputMap
+        for(InputMap.Mapping<?> mapping : FocusTraversalInputMap.getFocusTraversalMappings()) {
+            assertFalse(lvInputMap.getMappings().contains(mapping));
+        }
+
+        // Verify default InputMap
+        assertFalse(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
+        assertFalse(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END), null)));
+        assertFalse(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shift(), null)));
+        assertFalse(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shift(), null)));
+        assertFalse(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut(), null)));
+        assertFalse(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shortcut(), null)));
+        assertFalse(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.A).shortcut(), null)));
+
+        // Verify vertical child InputMap
+        assertFalse(verticalInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut().shift(), null)));
+        assertFalse(verticalInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shortcut().shift(), null)));
+
+        sl.dispose();
+    }
+
     @Test public void test_rt36280_nonEditable_enterHidesShowingPopup() {
         final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
         StageLoader sl = new StageLoader(cb);
         KeyEventFirer cbKeyboard = new KeyEventFirer(cb);
 
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
@@ -24,11 +24,16 @@
  */
 
 package test.javafx.scene.control;
 
 import com.sun.javafx.scene.control.VirtualScrollBar;
+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;
 import com.sun.javafx.scene.control.behavior.ListCellBehavior;
+import com.sun.javafx.scene.control.behavior.ListViewBehavior;
+import com.sun.javafx.scene.control.inputmap.InputMap;
+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;
+import com.sun.javafx.scene.control.inputmap.KeyBinding;
 import com.sun.javafx.tk.Toolkit;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -73,10 +78,12 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import org.junit.Before;
 import org.junit.Test;
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;
+
+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;
 import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
 import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;
 import test.com.sun.javafx.scene.control.infrastructure.StageLoader;
 import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;
 import test.com.sun.javafx.scene.control.test.Person;
@@ -2040,10 +2047,51 @@
         assertEquals("Two items should be selected.", 2, sm.getSelectedIndices().size());
         assertEquals("List item at index 1 should be selected", 1, (int) sm.getSelectedIndices().get(0));
         assertEquals("List item at index 2 should be selected", 2, (int) sm.getSelectedIndices().get(1));
     }
 
+    @Test public void testExcludeKeyMappingsForComboBoxEditor() {
+        ListView<String> listView = new ListView<>(FXCollections
+                .observableArrayList("Item1", "Item2"));
+        listView.setCellFactory(TextFieldListCell.forListView());
+        StageLoader sl = new StageLoader(listView);
+
+        ListViewBehavior lvBehavior = (ListViewBehavior) ControlSkinFactory.getBehavior(listView.getSkin());
+        InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();
+        // In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap
+        InputMap<ListView<?>> verticalInputMap = lvInputMap.getChildInputMaps().get(2);
+
+        // Verify FocusTraversalInputMap
+        for(InputMap.Mapping<?> mapping : FocusTraversalInputMap.getFocusTraversalMappings()) {
+            assertTrue(lvInputMap.getMappings().contains(mapping));
+        }
+
+        // Verify default InputMap
+        assertTrue(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
+        assertTrue(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END), null)));
+        assertTrue(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shift(), null)));
+        assertTrue(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shift(), null)));
+        assertTrue(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut(), null)));
+        assertTrue(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shortcut(), null)));
+        assertTrue(lvInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.A).shortcut(), null)));
+
+        // Verify vertical child InputMap
+        assertTrue(verticalInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut().shift(), null)));
+        assertTrue(verticalInputMap.getMappings().contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shortcut().shift(), null)));
+
+        sl.dispose();
+    }
+
     @Test
     public void testListViewLeak() {
         ObservableList<String> items = FXCollections.observableArrayList();
         WeakReference<ListView<String>> listViewRef = new WeakReference<>(new ListView<>(items));
         attemptGC(listViewRef, 10);
