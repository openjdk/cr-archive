diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
@@ -24,10 +24,12 @@
  */
 package com.sun.javafx.scene.control.behavior;
 
 import com.sun.javafx.PlatformUtil;
 import com.sun.javafx.scene.control.skin.Utils;
+import javafx.beans.InvalidationListener;
+import javafx.beans.WeakInvalidationListener;
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WeakChangeListener;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
@@ -136,11 +138,12 @@
             new KeyMapping(new KeyBinding(DOWN).shortcut().shift(), e -> discontinuousSelectNextRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shortcut().shift(), e -> discontinuousSelectPageUp()),
             new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown())
         );
 
-        if (!Boolean.TRUE.equals(control.getProperties().containsKey("excludeKeyMappingsForComboBoxEditor"))) {
+        if (Boolean.FALSE.equals(control.getProperties().containsKey("excludeKeyMappingsForComboBoxEditor"))) {
+            // This is not ComboBox's ListView
             addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());
             addDefaultMapping(listViewInputMap,
                     new KeyMapping(HOME, e -> selectFirstRow()),
                     new KeyMapping(END, e -> selectLastRow()),
                     new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),
@@ -152,11 +155,21 @@
 
             addDefaultMapping(verticalListInputMap,
                     new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
                     new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow())
             );
+        } else {
+            // This is ComboBox's ListView
+            if (Boolean.FALSE.equals(control.getProperties().get("editableComboBoxEditor"))) {
+                // ComboBox is not editable
+                addDefaultMapping(listViewInputMap,
+                        new KeyMapping(HOME, e -> selectFirstRow()),
+                        new KeyMapping(END, e -> selectLastRow())
+                );
+            }
         }
+        control.getProperties().addListener(weakPropertiesListener);
 
         addDefaultChildMap(listViewInputMap, verticalListInputMap);
 
         // --- horizontal listview
         InputMap<ListView<T>> horizontalListInputMap = new InputMap<>(control);
@@ -217,10 +230,11 @@
 
     @Override public void dispose() {
         ListView<T> control = getNode();
 
         ListCellBehavior.removeAnchor(control);
+        control.getProperties().removeListener(weakPropertiesListener);
         control.selectionModelProperty().removeListener(weakSelectionModelListener);
         if (control.getSelectionModel() != null) {
             control.getSelectionModel().getSelectedIndices().removeListener(weakSelectedIndicesListener);
         }
         control.itemsProperty().removeListener(weakItemsListener);
@@ -338,10 +352,30 @@
                 newValue.getSelectedIndices().addListener(weakSelectedIndicesListener);
             }
         }
     };
 
+    private final InvalidationListener propertiesListener = inv -> {
+        Boolean isComboBoxEditable = (Boolean)getNode().getProperties().get("editableComboBoxEditor");
+        if (isComboBoxEditable != null) {
+            // This is ComboBox's ListView
+            if (isComboBoxEditable) {
+                // ComboBox is editable.
+                removeMapping(new KeyBinding(HOME));
+                removeMapping(new KeyBinding(END));
+            } else {
+                // ComboBox is not editable
+                addDefaultMapping(getInputMap(),
+                        new KeyMapping(HOME, e -> selectFirstRow()),
+                        new KeyMapping(END, e -> selectLastRow())
+                );
+            }
+        }
+    };
+
+    private final WeakInvalidationListener weakPropertiesListener =
+            new WeakInvalidationListener(propertiesListener);
     private final WeakChangeListener<ObservableList<T>> weakItemsListener =
             new WeakChangeListener<ObservableList<T>>(itemsListener);
     private final WeakListChangeListener<Integer> weakSelectedIndicesListener =
             new WeakListChangeListener<Integer>(selectedIndicesListener);
     private final WeakListChangeListener<T> weakItemsListListener =
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
@@ -183,11 +183,14 @@
         });
         registerChangeListener(control.valueProperty(), e -> {
             updateValue();
             control.fireEvent(new ActionEvent());
         });
-        registerChangeListener(control.editableProperty(), e -> updateEditable());
+        registerChangeListener(control.editableProperty(), e -> {
+            updateEditable();
+            listView.getProperties().put("editableComboBoxEditor", getSkinnable().isEditable());
+        });
 
         // Refer to JDK-8095306
         if (comboBox.isShowing()) {
             show();
         }
@@ -503,10 +506,11 @@
         final ListView<T> _listView = new ListView<T>() {
 
             {
                 getProperties().put("selectFirstRowByDefault", false);
                 getProperties().put("excludeKeyMappingsForComboBoxEditor", true);
+                getProperties().put("editableComboBoxEditor", getSkinnable().isEditable());
             }
 
             @Override protected double computeMinHeight(double width) {
                 return 30;
             }
