diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListViewTest.java
@@ -176,11 +176,11 @@
         MultipleSelectionModel<String> sm = ListViewShim.<String>getListViewBitSetSelectionModel(listView);
         listView.setSelectionModel(sm);
         assertSame(sm, sm);
     }
 
-    @Test public void test_SwitchingSelectionModel() {
+    @Test public void testCtrlAWhenSwitchingSelectionModel() {
         ListView<String> listView = new ListView<>();
         listView.getItems().addAll("a", "b", "c", "d");
 
         MultipleSelectionModel<String> sm;
         StageLoader sl = new StageLoader(listView);
@@ -1504,11 +1504,11 @@
         assertEquals("b", sm.getSelectedItems().get(1));
 
         sl.dispose();
     }
 
-    @Test public void test_switchingSelectionMode() {
+    @Test public void testCtrlAWhenSwitchingSelectionMode() {
         ListView<String> listView = new ListView<>();
         listView.getItems().addAll("a", "b", "c", "d");
 
         MultipleSelectionModel<String> sm = listView.getSelectionModel();
         StageLoader sl = new StageLoader(listView);
@@ -1519,23 +1519,19 @@
         assertEquals(1, sm.getSelectedItems().size());
         keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
         assertEquals(1, sm.getSelectedItems().size());
 
         sm.setSelectionMode(SelectionMode.MULTIPLE);
+        assertEquals(1, sm.getSelectedItems().size());
         keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
         assertEquals(4, sm.getSelectedItems().size());
 
         sm.setSelectionMode(SelectionMode.SINGLE);
         assertEquals(1, sm.getSelectedItems().size());
         keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
         assertEquals(1, sm.getSelectedItems().size());
 
-        sm.setSelectionMode(SelectionMode.MULTIPLE);
-        assertEquals(1, sm.getSelectedItems().size());
-        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
-        assertEquals(4, sm.getSelectedItems().size());
-
         sl.dispose();
     }
 
     @Test public void test_rt_16068_firstElement_selectAndRemoveSameRow() {
         // select and then remove the 'a' item, selection and focus should both
@@ -2050,11 +2046,10 @@
     }
 
     @Test public void testExcludeKeyMappingsForComboBoxEditor() {
         ListView<String> listView = new ListView<>(FXCollections
                 .observableArrayList("Item1", "Item2"));
-        listView.setCellFactory(TextFieldListCell.forListView());
         StageLoader sl = new StageLoader(listView);
 
         ListViewBehavior lvBehavior = (ListViewBehavior) ControlSkinFactory.getBehavior(listView.getSkin());
         InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();
         // In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap
