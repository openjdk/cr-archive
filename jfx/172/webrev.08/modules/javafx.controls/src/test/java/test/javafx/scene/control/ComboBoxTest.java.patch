diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -23,13 +23,20 @@
  * questions.
  */
 
 package test.javafx.scene.control;
 
+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;
+import com.sun.javafx.scene.control.behavior.ListViewBehavior;
+import com.sun.javafx.scene.control.inputmap.InputMap;
+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;
+import com.sun.javafx.scene.control.inputmap.KeyBinding;
+import com.sun.javafx.tk.Toolkit;
+
+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;
 import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;
 import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;
-import com.sun.javafx.tk.Toolkit;
 import javafx.css.PseudoClass;
 
 import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
 import test.com.sun.javafx.scene.control.infrastructure.StageLoader;
 import javafx.scene.control.skin.ComboBoxListViewSkin;
@@ -1332,10 +1339,187 @@
         assertTrue(cb.isShowing());
 
         sl.dispose();
     }
 
+    @Test public void testEditorKeyInputsWhenPopupIsShowing() {
+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
+        cb.setEditable(true);
+        StageLoader sl = new StageLoader(cb);
+        KeyEventFirer keyboard = new KeyEventFirer(cb);
+
+        // Show the popup
+        assertFalse(cb.isShowing());
+        cb.requestFocus();
+        cb.getEditor().setText("ABC DEF");
+        assertEquals("ABC DEF", cb.getEditor().getText());
+        keyboard.doDownArrowPress(KeyModifier.ALT);
+        // Sanity
+        assertTrue(cb.isShowing());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // LEFT, RIGHT keys with CTRL, SHIFT modifiers
+        // Test RIGHT key
+        keyboard.doRightArrowPress();
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test KP_RIGHT key
+        keyboard.doKeyPress(KeyCode.KP_RIGHT);
+        assertEquals(2, cb.getEditor().getCaretPosition());
+
+        // Test LEFT key
+        keyboard.doLeftArrowPress();
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test KP_LEFT key
+        keyboard.doKeyPress(KeyCode.KP_LEFT);
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);
+        assertEquals("A", cb.getEditor().getSelectedText());
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(4, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("ABC ", cb.getEditor().getSelectedText());
+        assertEquals(4, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // HOME, END keys with CTRL, SHIFT modifiers
+        // Test END key
+        keyboard.doKeyPress(KeyCode.END);
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test HOME key
+        keyboard.doKeyPress(KeyCode.HOME);
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.SHIFT);
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + A key
+        keyboard.doLeftArrowPress();
+        assertEquals("", cb.getEditor().getSelectedText());
+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+
+        // Sanity
+        assertTrue(cb.isShowing());
+
+        sl.dispose();
+    }
+
+    @Test public void testExcludeKeyMappingsForComboBoxEditor() {
+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
+        StageLoader sl = new StageLoader(cb);
+
+        ListView listView = (ListView) ((ComboBoxListViewSkin)cb.getSkin()).getPopupContent();
+        ListViewBehavior lvBehavior = (ListViewBehavior)ControlSkinFactory.getBehavior(listView.getSkin());
+        InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();
+        ObservableList<?> inputMappings = lvInputMap.getMappings();
+        // In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap
+        InputMap<ListView<?>> verticalInputMap = lvInputMap.getChildInputMaps().get(2);
+        ObservableList<?> verticalInputMappings = verticalInputMap.getMappings();
+
+        cb.setEditable(true);
+        testKeyMappingsForEditableCB(inputMappings);
+        testCommonKeyMappings(inputMappings, verticalInputMappings);
+
+        cb.setEditable(false);
+        testKeyMappingsForNonEditableCB(inputMappings);
+        testCommonKeyMappings(inputMappings, verticalInputMappings);
+
+        sl.dispose();
+    }
+
+    private void testKeyMappingsForEditableCB(ObservableList<?> inputMappings) {
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.END), null)));
+    }
+
+    private void testKeyMappingsForNonEditableCB(ObservableList<?> inputMappings) {
+        assertTrue(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));
+        assertTrue(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.END), null)));
+    }
+
+    private void testCommonKeyMappings(ObservableList<?> inputMappings,
+                                       ObservableList<?> verticalInputMappings) {
+        // Verify FocusTraversalInputMap
+        for(InputMap.Mapping<?> mapping : FocusTraversalInputMap.getFocusTraversalMappings()) {
+            assertFalse(inputMappings.contains(mapping));
+        }
+
+        // Verify default InputMap
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shift(), null)));
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shift(), null)));
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut(), null)));
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shortcut(), null)));
+        assertFalse(inputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.A).shortcut(), null)));
+
+        // Verify vertical child InputMap
+        assertFalse(verticalInputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut().shift(), null)));
+        assertFalse(verticalInputMappings.contains(
+                new KeyMapping(new KeyBinding(KeyCode.END).shortcut().shift(), null)));
+    }
+
     @Test public void test_rt36280_nonEditable_enterHidesShowingPopup() {
         final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
         StageLoader sl = new StageLoader(cb);
         KeyEventFirer cbKeyboard = new KeyEventFirer(cb);
 
