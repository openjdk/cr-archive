diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
@@ -24,10 +24,12 @@
  */
 package com.sun.javafx.scene.control.behavior;
 
 import com.sun.javafx.PlatformUtil;
 import com.sun.javafx.scene.control.skin.Utils;
+import javafx.beans.InvalidationListener;
+import javafx.beans.WeakInvalidationListener;
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WeakChangeListener;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
@@ -74,18 +76,12 @@
     public ListViewBehavior(ListView<T> control) {
         super(control);
 
         // create a map for listView-specific mappings
         listViewInputMap = createInputMap();
-
         // add focus traversal mappings
-        addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());
         addDefaultMapping(listViewInputMap,
-            new KeyMapping(HOME, e -> selectFirstRow()),
-            new KeyMapping(END, e -> selectLastRow()),
-            new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),
-            new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shift(), e -> selectAllPageUp()),
             new KeyMapping(new KeyBinding(PAGE_DOWN).shift(), e -> selectAllPageDown()),
 
             new KeyMapping(new KeyBinding(SPACE).shift(), e -> selectAllToFocus(false)),
             new KeyMapping(new KeyBinding(SPACE).shortcut().shift(), e -> selectAllToFocus(true)),
@@ -96,13 +92,10 @@
             new KeyMapping(ENTER, e -> activate()),
             new KeyMapping(SPACE, e -> activate()),
             new KeyMapping(F2, e -> activate()),
             new KeyMapping(ESCAPE, e -> cancelEdit()),
 
-            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()),
-            new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
-            new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shortcut(), e -> focusPageUp()),
             new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut(), e -> focusPageDown()),
 
             new KeyMapping(new KeyBinding(BACK_SLASH).shortcut(), e -> clearSelection()),
 
@@ -142,15 +135,42 @@
             new KeyMapping(new KeyBinding(DOWN).shortcut(), e -> focusNextRow()),
 
             new KeyMapping(new KeyBinding(UP).shortcut().shift(), e -> discontinuousSelectPreviousRow()),
             new KeyMapping(new KeyBinding(DOWN).shortcut().shift(), e -> discontinuousSelectNextRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shortcut().shift(), e -> discontinuousSelectPageUp()),
-            new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown()),
-            new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
-            new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow())
+            new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown())
         );
 
+        if (!control.getProperties().containsKey("excludeKeyMappingsForComboBoxEditor")) {
+            // This is not ComboBox's ListView
+            addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());
+            addDefaultMapping(listViewInputMap,
+                    new KeyMapping(HOME, e -> selectFirstRow()),
+                    new KeyMapping(END, e -> selectLastRow()),
+                    new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),
+                    new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow()),
+                    new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
+                    new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
+                    new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll())
+            );
+
+            addDefaultMapping(verticalListInputMap,
+                    new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
+                    new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow())
+            );
+        } else {
+            // This is ComboBox's ListView
+            if (Boolean.FALSE.equals(control.getProperties().get("editableComboBoxEditor"))) {
+                // ComboBox is not editable
+                addDefaultMapping(listViewInputMap,
+                        new KeyMapping(HOME, e -> selectFirstRow()),
+                        new KeyMapping(END, e -> selectLastRow())
+                );
+            }
+        }
+        control.getProperties().addListener(weakPropertiesListener);
+
         addDefaultChildMap(listViewInputMap, verticalListInputMap);
 
         // --- horizontal listview
         InputMap<ListView<T>> horizontalListInputMap = new InputMap<>(control);
         horizontalListInputMap.setInterceptor(event -> control.getOrientation() != Orientation.HORIZONTAL);
@@ -196,11 +216,10 @@
             tlFocus = new TwoLevelFocusListBehavior(control); // needs to be last.
         }
     }
 
 
-
     /***************************************************************************
      *                                                                         *
      * Implementation of BehaviorBase API                                      *
      *                                                                         *
      **************************************************************************/
@@ -211,10 +230,11 @@
 
     @Override public void dispose() {
         ListView<T> control = getNode();
 
         ListCellBehavior.removeAnchor(control);
+        control.getProperties().removeListener(weakPropertiesListener);
         control.selectionModelProperty().removeListener(weakSelectionModelListener);
         if (control.getSelectionModel() != null) {
             control.getSelectionModel().getSelectedIndices().removeListener(weakSelectedIndicesListener);
         }
         control.itemsProperty().removeListener(weakItemsListener);
@@ -332,10 +352,26 @@
                 newValue.getSelectedIndices().addListener(weakSelectedIndicesListener);
             }
         }
     };
 
+    private final InvalidationListener propertiesListener = inv -> {
+        if (Boolean.FALSE.equals(getNode().getProperties().get("editableComboBoxEditor"))) {
+            // ListView's ComboBox is non editable
+            addDefaultMapping(getInputMap(),
+                    new KeyMapping(HOME, e -> selectFirstRow()),
+                    new KeyMapping(END, e -> selectLastRow())
+            );
+        } else if (Boolean.TRUE.equals(getNode().getProperties().get("editableComboBoxEditor"))) {
+            // ListView's ComboBox is editable
+            removeMapping(new KeyBinding(HOME));
+            removeMapping(new KeyBinding(END));
+        }
+    };
+
+    private final WeakInvalidationListener weakPropertiesListener =
+            new WeakInvalidationListener(propertiesListener);
     private final WeakChangeListener<ObservableList<T>> weakItemsListener =
             new WeakChangeListener<ObservableList<T>>(itemsListener);
     private final WeakListChangeListener<Integer> weakSelectedIndicesListener =
             new WeakListChangeListener<Integer>(selectedIndicesListener);
     private final WeakListChangeListener<T> weakItemsListListener =
