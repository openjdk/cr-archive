diff a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
--- a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
+++ b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -771,36 +771,31 @@
             return;
         }
         if (texture != null) {
             new Composite() {
                 @Override void doPaint(Graphics g) {
-                    // The handling of pattern transform is modeled after the WebKit
-                    // ImageCG.cpp's Image::drawPattern()
-                    float adjustedX = phase.getX()
-                            + srcRect.getX() * (float) patternTransform.getMatrix()[0];
-                    float adjustedY = phase.getY()
-                            + srcRect.getY() * (float) patternTransform.getMatrix()[3];
-                    float scaledTileWidth =
-                            srcRect.getWidth() * (float) patternTransform.getMatrix()[0];
-                    float scaledTileHeight =
-                            srcRect.getHeight() * (float) patternTransform.getMatrix()[3];
-
                     Image img = ((PrismImage)texture).getImage();
 
                     // Create subImage only if srcRect doesn't fit the texture bounds. See RT-20193.
                     if (!srcRect.contains(new WCRectangle(0, 0, texture.getWidth(), texture.getHeight()))) {
 
                         img = img.createSubImage(srcRect.getIntX(),
                                                  srcRect.getIntY(),
                                                  (int)Math.ceil(srcRect.getWidth()),
                                                  (int)Math.ceil(srcRect.getHeight()));
                     }
+
+                    double m[] = patternTransform.getMatrix();
+                    Affine3D at = new Affine3D();
+                    at.translate(phase.getX(), phase.getY());
+                    at.concatenate(m[0], -m[1], m[4], -m[2], m[3], m[5]);
+
                     g.setPaint(new ImagePattern(
                                img,
-                               adjustedX, adjustedY,
-                               scaledTileWidth, scaledTileHeight,
-                               false, false));
+                               srcRect.getX(), srcRect.getY(),
+                               srcRect.getWidth(), srcRect.getHeight(),
+                               at, false, false));
 
                     g.fillRect(destRect.getX(), destRect.getY(),
                                destRect.getWidth(), destRect.getHeight());
                 }
             }.paint();
