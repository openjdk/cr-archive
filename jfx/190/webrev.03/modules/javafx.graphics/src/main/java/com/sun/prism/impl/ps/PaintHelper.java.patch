diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -748,10 +748,15 @@
 
         // calculate plane equation constants
         Affine3D at = scratchXform3D;
         g.getPaintShaderTransform(at);
 
+        BaseTransform paintXform = paint.getPatternTransformNoClone();
+        if (paintXform != null) {
+            at.concatenate(paintXform);
+        }
+
         at.translate(x1, y1);
         at.scale(x2 - x1, y2 - y1);
         // Adjustment for case when WrapMode.REPEAT is simulated
         if (cw < texw) {
             at.translate(0.5/cw, 0.0);
@@ -847,19 +852,21 @@
         float texh = paintTex.getPhysicalHeight();
         paintTex.unlock();
 
         // calculate plane equation constants
         AffineBase ret;
-        if (renderTx.isIdentity()) {
+        BaseTransform paintXform = paint.getPatternTransformNoClone();
+        if (paintXform.isIdentity() && renderTx.isIdentity()) {
             Affine2D at = scratchXform2D;
 
             at.setToTranslation(px, py);
             at.scale(pw, ph);
             ret = at;
         } else {
             Affine3D at = scratchXform3D;
             at.setTransform(renderTx);
+            at.concatenate(paintXform);
 
             at.translate(px, py);
             at.scale(pw, ph);
             ret = at;
         }
