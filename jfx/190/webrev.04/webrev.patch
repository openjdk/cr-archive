diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/ps/PaintHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -748,10 +748,15 @@
 
         // calculate plane equation constants
         Affine3D at = scratchXform3D;
         g.getPaintShaderTransform(at);
 
+        BaseTransform paintXform = paint.getPatternTransformNoClone();
+        if (paintXform != null) {
+            at.concatenate(paintXform);
+        }
+
         at.translate(x1, y1);
         at.scale(x2 - x1, y2 - y1);
         // Adjustment for case when WrapMode.REPEAT is simulated
         if (cw < texw) {
             at.translate(0.5/cw, 0.0);
@@ -847,19 +852,21 @@
         float texh = paintTex.getPhysicalHeight();
         paintTex.unlock();
 
         // calculate plane equation constants
         AffineBase ret;
-        if (renderTx.isIdentity()) {
+        BaseTransform paintXform = paint.getPatternTransformNoClone();
+        if (paintXform.isIdentity() && renderTx.isIdentity()) {
             Affine2D at = scratchXform2D;
 
             at.setToTranslation(px, py);
             at.scale(pw, ph);
             ret = at;
         } else {
             Affine3D at = scratchXform3D;
             at.setTransform(renderTx);
+            at.concatenate(paintXform);
 
             at.translate(px, py);
             at.scale(pw, ph);
             ret = at;
         }
diff a/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/J2DPrismGraphics.java b/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/J2DPrismGraphics.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/J2DPrismGraphics.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/J2DPrismGraphics.java
@@ -724,10 +724,29 @@
                 g2d.setPaint(toJ2DPaint(paint, nodeBounds));
             } else {
                 g2d.setPaint(toJ2DPaint(paint, shape.getBounds2D()));
             }
         }
+        if (this.paint.getType() == Paint.Type.IMAGE_PATTERN) {
+            ImagePattern imgpat = (ImagePattern) this.paint;
+            java.awt.geom.AffineTransform at = toJ2DTransform(imgpat.getPatternTransformNoClone());
+
+            if (at.getType() != java.awt.geom.AffineTransform.TYPE_IDENTITY) {
+                g2d.setClip(shape);
+                g2d.transform(at);
+                tmpAT.setTransform(at);
+                try {
+                    tmpAT.invert();
+                } catch (NoninvertibleTransformException e) {
+                }
+
+                g2d.fill(tmpAT.createTransformedShape(shape).getBounds2D());
+                setTransform(transform);
+                setClipRect(clipRect);
+                return;
+            }
+        }
         g2d.fill(shape);
     }
 
     public void fill(Shape shape) {
         fill(tmpShape(shape));
diff a/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java b/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,22 +23,25 @@
  * questions.
  */
 
 package com.sun.prism.paint;
 
+import com.sun.javafx.geom.transform.BaseTransform;
 import com.sun.prism.Image;
 
 public final class ImagePattern extends Paint {
 
     private final Image image;
     private final float x;
     private final float y;
     private final float width;
     private final float height;
+    private final BaseTransform patternTransform;
 
     public ImagePattern(Image image,
                         float x, float y, float width, float height,
+                        BaseTransform patternTransform,
                         boolean proportional, boolean isMutable)
     {
         super(Type.IMAGE_PATTERN, proportional, isMutable);
         if (image == null) {
             throw new IllegalArgumentException("Image must be non-null");
@@ -46,10 +49,22 @@
         this.image = image;
         this.x = x;
         this.y = y;
         this.width = width;
         this.height = height;
+        if (patternTransform != null) {
+            this.patternTransform = patternTransform.copy();
+        } else {
+            this.patternTransform = BaseTransform.IDENTITY_TRANSFORM;
+        }
+    }
+
+    public ImagePattern(Image image,
+                        float x, float y, float width, float height,
+                        boolean proportional, boolean isMutable)
+    {
+        this(image, x, y, width, height, null, proportional, isMutable);
     }
 
     public Image getImage() {
         return image;
     }
@@ -68,9 +83,13 @@
 
     public float getHeight() {
         return height;
     }
 
+    public BaseTransform getPatternTransformNoClone() {
+        return patternTransform;
+    }
+
     public boolean isOpaque() {
         return image.isOpaque();
     }
 }
diff a/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java b/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java
@@ -284,10 +284,11 @@
             System.out.println("imagePattern: x: " + ip.getX() + ", y: " + ip.getY() +
                     ", w: " + ip.getWidth() + ", h: " + ip.getHeight() + ", proportional: " + ip.isProportional());
         }
 
         paintTx.setTransform(tx);
+        paintTx.deriveWithConcatenation(ip.getPatternTransformNoClone());
         if (ip.isProportional()) {
             paintTx.deriveWithConcatenation(width / image.getWidth() * ip.getWidth(), 0,
                     0, height / image.getHeight() * ip.getHeight(),
                     x + width * ip.getX(), y + height * ip.getY());
         } else {
diff a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
--- a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
+++ b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -771,36 +771,31 @@
             return;
         }
         if (texture != null) {
             new Composite() {
                 @Override void doPaint(Graphics g) {
-                    // The handling of pattern transform is modeled after the WebKit
-                    // ImageCG.cpp's Image::drawPattern()
-                    float adjustedX = phase.getX()
-                            + srcRect.getX() * (float) patternTransform.getMatrix()[0];
-                    float adjustedY = phase.getY()
-                            + srcRect.getY() * (float) patternTransform.getMatrix()[3];
-                    float scaledTileWidth =
-                            srcRect.getWidth() * (float) patternTransform.getMatrix()[0];
-                    float scaledTileHeight =
-                            srcRect.getHeight() * (float) patternTransform.getMatrix()[3];
-
                     Image img = ((PrismImage)texture).getImage();
 
                     // Create subImage only if srcRect doesn't fit the texture bounds. See RT-20193.
                     if (!srcRect.contains(new WCRectangle(0, 0, texture.getWidth(), texture.getHeight()))) {
 
                         img = img.createSubImage(srcRect.getIntX(),
                                                  srcRect.getIntY(),
                                                  (int)Math.ceil(srcRect.getWidth()),
                                                  (int)Math.ceil(srcRect.getHeight()));
                     }
+
+                    double m[] = patternTransform.getMatrix();
+                    Affine3D at = new Affine3D();
+                    at.translate(phase.getX(), phase.getY());
+                    at.concatenate(m[0], -m[1], m[4], -m[2], m[3], m[5]);
+
                     g.setPaint(new ImagePattern(
                                img,
-                               adjustedX, adjustedY,
-                               scaledTileWidth, scaledTileHeight,
-                               false, false));
+                               srcRect.getX(), srcRect.getY(),
+                               srcRect.getWidth(), srcRect.getHeight(),
+                               at, false, false));
 
                     g.fillRect(destRect.getX(), destRect.getY(),
                                destRect.getWidth(), destRect.getHeight());
                 }
             }.paint();
diff a/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java b/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java
--- a/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java
+++ b/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java
@@ -123,10 +123,42 @@
             assertEquals("Arc endAngle", redColor,
                     (int) getEngine().executeScript("document.getElementById('canvas').getContext('2d').getImageData(300,75,1,1).data[0]"));
         });
     }
 
+    // JDK-8234471
+    @Test public void testCanvasPattern() throws Exception {
+        final String htmlCanvasContent = "\n"
+            + "<canvas id='canvaspattern' width='100' height='100'></canvas>\n"
+            + "<svg id='svgpattern'></svg>\n"
+            + "<script>\n"
+            + "var patternCanvas = document.createElement('canvas');\n"
+            + "var patternCtx = patternCanvas.getContext('2d');\n"
+            + "patternCanvas.width = patternCanvas.height = 30;\n"
+            + "patternCtx.fillStyle = 'red';\n"
+            + "patternCtx.fillRect(0, 0, 20, 20);\n"
+            + "\n"
+            + "var ctx = document.getElementById('canvaspattern').getContext('2d');\n"
+            + "var pattern = ctx.createPattern(patternCanvas, 'repeat');\n"
+            + "var matrix = document.getElementById('svgpattern').createSVGMatrix();\n"
+            + "pattern.setTransform(matrix.translate(10, 10));\n"
+            + "ctx.fillStyle = pattern;\n"
+            + "ctx.fillRect(0, 0, 100, 100);\n"
+            + "</script>\n";
+
+        loadContent(htmlCanvasContent);
+        submit(() -> {
+            int redColor = 255;
+            assertEquals("Pattern top-left corner", 0, (int) getEngine().executeScript(
+                "document.getElementById('canvaspattern').getContext('2d').getImageData(1, 1, 1, 1).data[0]"));
+            assertEquals("First rect top-left", redColor, (int) getEngine().executeScript(
+                "document.getElementById('canvaspattern').getContext('2d').getImageData(11, 11, 1, 1).data[0]"));
+            assertEquals("First rect center", redColor, (int) getEngine().executeScript(
+                "document.getElementById('canvaspattern').getContext('2d').getImageData(21, 21, 1, 1).data[0]"));
+        });
+    }
+
     private BufferedImage htmlCanvasToBufferedImage(final String mime) throws Exception {
         ByteArrayOutputStream errStream = new ByteArrayOutputStream();
         System.setErr(new PrintStream(errStream));
 
         final String html = String.format(""
