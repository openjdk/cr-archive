diff a/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java b/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/paint/ImagePattern.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,22 +23,25 @@
  * questions.
  */
 
 package com.sun.prism.paint;
 
+import com.sun.javafx.geom.transform.BaseTransform;
 import com.sun.prism.Image;
 
 public final class ImagePattern extends Paint {
 
     private final Image image;
     private final float x;
     private final float y;
     private final float width;
     private final float height;
+    private final BaseTransform patternTransform;
 
     public ImagePattern(Image image,
                         float x, float y, float width, float height,
+                        BaseTransform patternTransform,
                         boolean proportional, boolean isMutable)
     {
         super(Type.IMAGE_PATTERN, proportional, isMutable);
         if (image == null) {
             throw new IllegalArgumentException("Image must be non-null");
@@ -46,10 +49,22 @@
         this.image = image;
         this.x = x;
         this.y = y;
         this.width = width;
         this.height = height;
+        if (patternTransform != null) {
+            this.patternTransform = patternTransform.copy();
+        } else {
+            this.patternTransform = BaseTransform.IDENTITY_TRANSFORM;
+        }
+    }
+
+    public ImagePattern(Image image,
+                        float x, float y, float width, float height,
+                        boolean proportional, boolean isMutable)
+    {
+        this(image, x, y, width, height, null, proportional, isMutable);
     }
 
     public Image getImage() {
         return image;
     }
@@ -68,9 +83,13 @@
 
     public float getHeight() {
         return height;
     }
 
+    public BaseTransform getPatternTransformNoClone() {
+        return patternTransform;
+    }
+
     public boolean isOpaque() {
         return image.isOpaque();
     }
 }
