diff a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
--- a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
@@ -37,18 +37,15 @@
  * The value of the {@code ObservableValue} can be requested with
  * {@link #getValue()}.
  * <p>
  * An implementation of {@code ObservableValue} may support lazy evaluation,
  * which means that the value is not immediately recomputed after changes, but
- * lazily the next time the value is requested. All bindings and properties in
- * this library support lazy evaluation.
+ * lazily the next time the value is requested (see note 1 in {@code implSpec}).
  * <p>
  * An {@code ObservableValue} generates two types of events: change events and
- * invalidation events. A change event indicates that the value has changed.
- * Current implementing classes in JavaFX check for a change using reference
- * equality (and not object equality, {@code Object#equals(Object)}) of the value. An
- * invalidation event is generated if the current value is not valid anymore.
+ * invalidation events. A change event indicates that the value has changed
+ * (see note 2 in {@code implSpec}). An invalidation event is generated if the current value is not valid anymore.
  * This distinction becomes important if the {@code ObservableValue} supports
  * lazy evaluation, because for a lazily evaluated value one does not know if an
  * invalid value really has changed until it is recomputed. For this reason,
  * generating change events requires eager evaluation while invalidation events
  * can be generated for eager and lazy implementations.
@@ -68,10 +65,16 @@
  * evaluation.
  *
  * @param <T>
  *            The type of the wrapped value.
  *
+ * @implSpec <ol>
+ * <li> All bindings and properties in this library support lazy evaluation.
+ * <li> Current implementing classes in JavaFX check for a change using reference
+ * equality (and not object equality, {@code Object#equals(Object)}) of the value.
+ * </ol>
+ *
  * @see ObservableBooleanValue
  * @see ObservableDoubleValue
  * @see ObservableFloatValue
  * @see ObservableIntegerValue
  * @see ObservableLongValue
