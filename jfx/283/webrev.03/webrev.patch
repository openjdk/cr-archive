diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TableFocusModel.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TableFocusModel.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TableFocusModel.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TableFocusModel.java
@@ -40,10 +40,16 @@
      *                                                                     *
      * Public API                                                          *
      *                                                                     *
      **********************************************************************/
 
+    /**
+     * Constructor for subclasses to call.
+     */
+    public TableFocusModel() {
+    }
+
     /**
      * Causes the item at the given index to receive the focus.
      *
      * @param row The row index of the item to give focus to.
      * @param column The column of the item to give focus to. Can be null.
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TableSelectionModel.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TableSelectionModel.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TableSelectionModel.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TableSelectionModel.java
@@ -35,10 +35,16 @@
  * @param <T> The type of the underlying data model for the UI control.
  * @since JavaFX 8.0
  */
 public abstract class TableSelectionModel<T> extends MultipleSelectionModelBase<T> {
 
+    /**
+     * Constructor for subclasses to call.
+     */
+    public TableSelectionModel() {
+    }
+
     /**
      * Convenience function which tests whether the given row and column index
      * is currently selected in this table instance. If the table control is in its
      * 'cell selection' mode (where individual cells can be selected, rather than
      * entire rows), and if the column argument is null, this method should return
diff a/modules/javafx.graphics/src/main/java/javafx/application/Preloader.java b/modules/javafx.graphics/src/main/java/javafx/application/Preloader.java
--- a/modules/javafx.graphics/src/main/java/javafx/application/Preloader.java
+++ b/modules/javafx.graphics/src/main/java/javafx/application/Preloader.java
@@ -112,10 +112,16 @@
     static {
         String prop = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty("line.separator"));
         lineSeparator = prop != null ? prop : "\n";
     }
 
+    /**
+     * Constructor for subclasses to call.
+     */
+    public Preloader() {
+    }
+
     /**
      * Indicates download progress.
      * This method is called by the FX runtime to indicate progress while
      * application resources are being loaded. It will not be called to deliver
      * a ProgressNotification sent to {@link #notifyPreloader notifyPreloader}.
diff a/modules/javafx.graphics/src/main/java/javafx/concurrent/ScheduledService.java b/modules/javafx.graphics/src/main/java/javafx/concurrent/ScheduledService.java
--- a/modules/javafx.graphics/src/main/java/javafx/concurrent/ScheduledService.java
+++ b/modules/javafx.graphics/src/main/java/javafx/concurrent/ScheduledService.java
@@ -142,10 +142,17 @@
  *
  * @param <V> The computed value of the ScheduledService
  * @since JavaFX 8.0
  */
 public abstract class ScheduledService<V> extends Service<V> {
+
+    /**
+     * Constructor for subclasses to call.
+     */
+    public ScheduledService() {
+    }
+
     /**
      * A Callback implementation for the <code>backoffStrategy</code> property which
      * will exponentially backoff the period between re-executions in the case of
      * a failure. This computation takes the original period and the number of
      * consecutive failures and computes the backoff amount from that information.
diff a/modules/javafx.graphics/src/main/java/javafx/css/PseudoClass.java b/modules/javafx.graphics/src/main/java/javafx/css/PseudoClass.java
--- a/modules/javafx.graphics/src/main/java/javafx/css/PseudoClass.java
+++ b/modules/javafx.graphics/src/main/java/javafx/css/PseudoClass.java
@@ -72,10 +72,16 @@
  * </code></pre>
  * @since JavaFX 8.0
  */
 public abstract class PseudoClass {
 
+    /**
+     * Constructor for subclasses to call.
+     */
+    public PseudoClass() {
+    }
+
     /**
      * There is only one PseudoClass instance for a given pseudoClass.
      * @param pseudoClass the pseudo-class
      * @return The PseudoClass for the given pseudoClass. Will not return null.
      * @throws IllegalArgumentException if pseudoClass parameter is null or an empty String
diff a/modules/javafx.graphics/src/main/java/javafx/css/StyleConverter.java b/modules/javafx.graphics/src/main/java/javafx/css/StyleConverter.java
--- a/modules/javafx.graphics/src/main/java/javafx/css/StyleConverter.java
+++ b/modules/javafx.graphics/src/main/java/javafx/css/StyleConverter.java
@@ -84,10 +84,16 @@
  * @see StyleableProperty
  * @since JavaFX 8.0
  */
 public class StyleConverter<F, T> {
 
+    /**
+     * Creates a {@code StyleConverter}.
+     */
+    public StyleConverter() {
+    }
+
     /**
      * Convert from the parsed CSS value to the target property type.
      *
      * @param value        The {@link ParsedValue} to convert
      * @param font         The {@link Font} to use when converting a
@@ -530,10 +536,16 @@
      */
     public static class StringStore {
         private final Map<String,Integer> stringMap = new HashMap<String,Integer>();
         public final List<String> strings = new ArrayList<String>();
 
+        /**
+         * Creates a default {@code StringStore}.
+         */
+        public StringStore() {
+        }
+
         public int addString(String s) {
             Integer index = stringMap.get(s);
             if (index == null) {
                 index = strings.size();
                 strings.add(s);
diff a/modules/javafx.graphics/src/main/java/javafx/scene/input/ClipboardContent.java b/modules/javafx.graphics/src/main/java/javafx/scene/input/ClipboardContent.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/input/ClipboardContent.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/input/ClipboardContent.java
@@ -36,10 +36,17 @@
  * Data container for {@link Clipboard} data. It can hold multiple data in
  * several data formats.
  * @since JavaFX 2.0
  */
 public class ClipboardContent extends HashMap<DataFormat, Object> {
+
+    /**
+     * Creates a {@code ClipboardContent}.
+     */
+    public ClipboardContent() {
+    }
+
     /**
      * Gets whether a plain text String ({@code DataFormat.PLAIN_TEXT})
      * has been put to this {@code ClipboardContent}.
      * @return true if {@code containsKey(DataFormat.PLAIN_TEXT)}
      * returns true, false otherwise
diff a/modules/javafx.graphics/src/main/java/javafx/scene/shape/PathElement.java b/modules/javafx.graphics/src/main/java/javafx/scene/shape/PathElement.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/shape/PathElement.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/shape/PathElement.java
@@ -69,10 +69,16 @@
      * Defines the sequence of {@code Path} objects this path element
      * is attached to.
      */
     WeakReferenceQueue nodes = new WeakReferenceQueue();
 
+    /**
+     * Constructor for subclasses to call.
+     */
+    public PathElement() {
+    }
+
     void addNode(final Node n) {
         nodes.add(n);
     }
 
     void removeNode(final Node n) {
diff a/modules/javafx.graphics/src/main/java/javafx/scene/transform/Transform.java b/modules/javafx.graphics/src/main/java/javafx/scene/transform/Transform.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/transform/Transform.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/transform/Transform.java
@@ -125,10 +125,16 @@
                 return Transform.createImmutableTransform(transform, left, right);
             }
         });
     }
 
+    /**
+     * Constructor for subclasses to call.
+     */
+    public Transform() {
+    }
+
     /* *************************************************************************
      *                                                                         *
      *                            Factories                                    *
      *                                                                         *
      **************************************************************************/
diff a/modules/javafx.graphics/src/main/java/javafx/stage/DirectoryChooser.java b/modules/javafx.graphics/src/main/java/javafx/stage/DirectoryChooser.java
--- a/modules/javafx.graphics/src/main/java/javafx/stage/DirectoryChooser.java
+++ b/modules/javafx.graphics/src/main/java/javafx/stage/DirectoryChooser.java
@@ -47,10 +47,16 @@
     /**
      * The title of the displayed dialog.
      */
     private StringProperty title;
 
+    /**
+     * Creates a {@code DirectoryChooser}.
+     */
+    public DirectoryChooser() {
+    }
+
     public final void setTitle(final String value) {
         titleProperty().set(value);
     }
 
     public final String getTitle() {
diff a/modules/javafx.graphics/src/main/java/javafx/stage/FileChooser.java b/modules/javafx.graphics/src/main/java/javafx/stage/FileChooser.java
--- a/modules/javafx.graphics/src/main/java/javafx/stage/FileChooser.java
+++ b/modules/javafx.graphics/src/main/java/javafx/stage/FileChooser.java
@@ -202,10 +202,16 @@
     /**
      * The title of the displayed file dialog.
      */
     private StringProperty title;
 
+    /**
+     * Creates a {@code FileChooser}.
+     */
+    public FileChooser() {
+    }
+
     public final void setTitle(final String value) {
         titleProperty().set(value);
     }
 
     public final String getTitle() {
diff a/modules/javafx.graphics/src/main/java/javafx/stage/Popup.java b/modules/javafx.graphics/src/main/java/javafx/stage/Popup.java
--- a/modules/javafx.graphics/src/main/java/javafx/stage/Popup.java
+++ b/modules/javafx.graphics/src/main/java/javafx/stage/Popup.java
@@ -36,10 +36,16 @@
  *
  * @since JavaFX 2.0
  */
 public class Popup extends PopupWindow {
 
+    /**
+     * Creates a {@code Popup}.
+     */
+    public Popup() {
+    }
+
     /**
      * The ObservableList of {@code Node}s to be rendered on this
      * {@code Popup}. The content forms the complete visual representation of
      * the Popup. Popups have no intrinsic visuals.
      */
