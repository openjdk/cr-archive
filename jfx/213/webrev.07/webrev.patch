diff a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
--- a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
+++ b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
@@ -440,10 +440,15 @@
     public void setClip(WCRectangle c) {
         setClip(new Rectangle((int)c.getX(), (int)c.getY(),
                               (int)c.getWidth(), (int)c.getHeight()));
     }
 
+    public void setClip(int cx, int cy, int cw, int ch, WCImage maskImage) {
+        setClip(new Rectangle(cx, cy, cw, ch));
+        state.setClipMaskImage(maskImage);
+    }
+
     public WCRectangle getClip() {
         Rectangle r = state.getClipNoClone();
         return r == null ? null : new WCRectangle(r.x, r.y, r.width, r.height);
     }
 
@@ -521,10 +526,44 @@
                 // projection.
                 if (shadow != null || !state.getPerspectiveTransformNoClone().isIdentity()) {
                     final NGRectangle node = new NGRectangle();
                     node.updateRectangle(x, y, w, h, 0, 0);
                     render(g, shadow, paint, null, node);
+                } else if (state.getClipMaskImageNoClone() != null) {
+                    Rectangle clipRectangle = getClipRectNoClone();
+                    RTTexture paintRtTexture = g.getResourceFactory().createRTTexture(
+                            clipRectangle.width, clipRectangle.height, Texture.WrapMode.CLAMP_NOT_NEEDED);
+                    Graphics g1 = paintRtTexture.createGraphics();
+                    g1.setPaint(paint);
+                    g1.fillRect(0, 0, clipRectangle.width, clipRectangle.height);
+
+                    RTImage maskImage = (RTImage) (state.getClipMaskImageNoClone());
+                    Image nativeMaskImage = Image.fromByteBgraPreData(maskImage.getPixelBuffer(), maskImage.getWidth(),
+                            maskImage.getHeight(), 0, maskImage.getPixelScale());
+                    Texture maskTexture = g.getResourceFactory().createTexture(PixelFormat.BYTE_BGRA_PRE,
+                            Texture.Usage.STATIC, Texture.WrapMode.CLAMP_NOT_NEEDED,
+                            nativeMaskImage.getWidth(), nativeMaskImage.getHeight());
+                    maskTexture.update(nativeMaskImage, 0, 0, nativeMaskImage.getWidth(),
+                            nativeMaskImage.getHeight());
+                    RTTexture maskRtTexture = g.getResourceFactory().createRTTexture(clipRectangle.width,
+                            clipRectangle.height, Texture.WrapMode.CLAMP_NOT_NEEDED);
+                    Graphics g2 = maskRtTexture.createGraphics();
+                    g2.drawTexture(maskTexture, 0, 0, clipRectangle.width, clipRectangle.height,
+                            0, 0, nativeMaskImage.getWidth(), nativeMaskImage.getHeight());
+                    maskTexture.dispose();
+                    FilterContext filterContext = getFilterContext(g);
+                    PrDrawable imagePrDrawable = PrDrawable.create(filterContext, paintRtTexture);
+                    PrDrawable maskPrDrawable = PrDrawable.create(filterContext, maskRtTexture);
+                    Blend blend = new Blend(Blend.Mode.SRC_IN,
+                            new PassThrough(maskPrDrawable, nativeMaskImage.getWidth(), nativeMaskImage.getHeight()),
+                            new PassThrough(imagePrDrawable, clipRectangle.width, clipRectangle.height));
+                    Affine3D tx = new Affine3D(g.getTransformNoClone());
+                    g.setTransform(BaseTransform.IDENTITY_TRANSFORM);
+                    PrEffectHelper.render(blend, g, clipRectangle.x, clipRectangle.y, null);
+                    g.setTransform(tx);
+                    paintRtTexture.dispose();
+                    maskRtTexture.dispose();
                 } else {
                     g.setPaint(paint);
                     g.fillRect(x, y, w, h);
                 }
             }
@@ -1185,10 +1224,11 @@
         private DropShadow shadow;
         private Affine3D xform;
         private GeneralTransform3D perspectiveTransform;
         private Layer layer;
         private int compositeOperation;
+        private WCImage clipMaskImage;
 
         private ContextState() {
             clip = null;
             paint = Color.BLACK;
             stroke.setPaint(Color.BLACK);
@@ -1210,10 +1250,11 @@
             setShadow(state.getShadowNoClone());
             setLayer(state.getLayerNoClone());
             setAlpha(state.getAlpha());
             setTextMode(state.isTextFill(), state.isTextStroke(), state.isTextClip());
             setCompositeOperation(state.getCompositeOperation());
+            setClipMaskImage(state.getClipMaskImageNoClone());
         }
 
         @Override
         protected ContextState clone() {
             return new ContextState(this);
@@ -1244,10 +1285,18 @@
 
         private void setPaint(Paint paint) {
             this.paint = paint;
         }
 
+        private void setClipMaskImage(WCImage image) {
+            this.clipMaskImage = image;
+        }
+
+        private WCImage getClipMaskImageNoClone() {
+            return clipMaskImage;
+        }
+
         private Rectangle getClipNoClone() {
             return clip;
         }
 
         private Layer getLayerNoClone() {
diff a/modules/javafx.web/src/main/java/com/sun/webkit/graphics/GraphicsDecoder.java b/modules/javafx.web/src/main/java/com/sun/webkit/graphics/GraphicsDecoder.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/graphics/GraphicsDecoder.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/graphics/GraphicsDecoder.java
@@ -83,10 +83,11 @@
     @Native public final static int SET_LINE_CAP           = 52;
     @Native public final static int SET_LINE_JOIN          = 53;
     @Native public final static int SET_MITER_LIMIT        = 54;
     @Native public final static int SET_TEXT_MODE          = 55;
     @Native public final static int SET_PERSPECTIVE_TRANSFORM = 56;
+    @Native public final static int SETCLIP_IIII_MASK      = 57;
 
     private final static PlatformLogger log =
             PlatformLogger.getLogger(GraphicsDecoder.class.getName());
 
     static void decode(WCGraphicsManager gm, WCGraphicsContext gc, BufferData bdata) {
@@ -231,10 +232,18 @@
                         buf.getInt(),
                         buf.getInt(),
                         buf.getInt(),
                         buf.getInt());
                     break;
+                case SETCLIP_IIII_MASK:
+                    gc.setClip(
+                        buf.getInt(),
+                        buf.getInt(),
+                        buf.getInt(),
+                        buf.getInt(),
+                        (WCImage) gm.getRef(buf.getInt()));
+                    break;
                 case DRAWRECT:
                     gc.drawRect(
                         buf.getInt(),
                         buf.getInt(),
                         buf.getInt(),
diff a/modules/javafx.web/src/main/java/com/sun/webkit/graphics/WCGraphicsContext.java b/modules/javafx.web/src/main/java/com/sun/webkit/graphics/WCGraphicsContext.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/graphics/WCGraphicsContext.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/graphics/WCGraphicsContext.java
@@ -96,10 +96,11 @@
     public abstract void restoreState();
 
     public abstract void setClip(WCPath path, boolean isOut);
     public abstract void setClip(int cx, int cy, int cw, int ch);
     public abstract void setClip(WCRectangle clip);
+    public abstract void setClip(int cx, int cy, int cw, int ch, WCImage maskImage);
     public abstract WCRectangle getClip();
 
     public abstract void drawRect(int x, int y, int w, int h);
     public abstract void setComposite(int composite);
     public abstract void strokeArc(int x, int y, int w, int h, int startAngle,
diff a/modules/javafx.web/src/main/java/com/sun/webkit/perf/WCGraphicsPerfLogger.java b/modules/javafx.web/src/main/java/com/sun/webkit/perf/WCGraphicsPerfLogger.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/perf/WCGraphicsPerfLogger.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/perf/WCGraphicsPerfLogger.java
@@ -302,10 +302,17 @@
         logger.resumeCount("SETCLIP_IIII");
         gc.setClip(cx, cy, cw, ch);
         logger.suspendCount("SETCLIP_IIII");
     }
 
+    @Override
+    public void setClip(int cx, int cy, int cw, int ch, WCImage maskImage) {
+        logger.resumeCount("SETCLIP_IIII_MASK");
+        gc.setClip(cx, cy, cw, ch, maskImage);
+        logger.suspendCount("SETCLIP_IIII_MASK");
+    }
+
     @Override
     public WCRectangle getClip() {
         logger.resumeCount("SETCLIP_IIII");
         WCRectangle r = gc.getClip();
         logger.suspendCount("SETCLIP_IIII");
diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/GraphicsContextJava.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/GraphicsContextJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/GraphicsContextJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/GraphicsContextJava.cpp
@@ -50,10 +50,11 @@
 #include "Pattern.h"
 #include "PlatformContextJava.h"
 #include "RenderingQueue.h"
 #include "Font.h"
 #include "TransformationMatrix.h"
+#include "ImageBuffer.h"
 
 #include "com_sun_webkit_graphics_GraphicsDecoder.h"
 #include "com_sun_webkit_graphics_WCPath.h"
 
 
@@ -229,10 +230,11 @@
             FloatPoint(),
             FloatSize(),
             CompositeOperator::Copy);
     } else {
         if (m_state.fillGradient) {
+            setCTM(m_state.transform);
             setGradient(
                 *m_state.fillGradient,
                 platformContext(),
                 com_sun_webkit_graphics_GraphicsDecoder_SET_FILL_GRADIENT);
         }
@@ -253,13 +255,21 @@
     platformContext()->rq().freeSpace(20)
     << (jint)com_sun_webkit_graphics_GraphicsDecoder_SETCLIP_IIII
     << (jint)rect.x() << (jint)rect.y() << (jint)rect.width() << (jint)rect.height();
 }
 
-void GraphicsContext::clipToImageBuffer(ImageBuffer&, const FloatRect&)
+void GraphicsContext::clipToImageBuffer(ImageBuffer& imageBuffer, const FloatRect& rect)
 {
-    notImplemented();
+    if (paintingDisabled())
+        return;
+
+    RefPtr<Image> copiedImage = imageBuffer.copyImage(BackingStoreCopy::CopyBackingStore, PreserveResolution::Yes);
+    NativeImagePtr nativeImageObject = copiedImage->nativeImageForCurrentFrame(this);
+    m_state.clipBounds.intersect(m_state.transform.mapRect(rect));
+    platformContext()->rq().freeSpace(24)
+    << (jint)com_sun_webkit_graphics_GraphicsDecoder_SETCLIP_IIII_MASK
+    << (jint)rect.x() << (jint)rect.y() << (jint)rect.width() << (jint)rect.height() << nativeImageObject;
 }
 
 IntRect GraphicsContext::clipBounds() const
 {
     // Transformation has inverse effect on clip bounds.
diff a/modules/javafx.web/src/test/java/test/javafx/scene/web/SVGTest.java b/modules/javafx.web/src/test/java/test/javafx/scene/web/SVGTest.java
--- a/modules/javafx.web/src/test/java/test/javafx/scene/web/SVGTest.java
+++ b/modules/javafx.web/src/test/java/test/javafx/scene/web/SVGTest.java
@@ -135,6 +135,49 @@
             // After 100x100, pixel should be WHITE.
             final Color pixelAt100x100 = new Color(img.getRGB(100, 100), true);
             assertTrue("Color should be white:" + pixelAt100x100, isColorsSimilar(Color.WHITE, pixelAt100x100, 1));
         });
     }
+
+    @Test public void testSVGRenderingWithMask() {
+        loadContent(
+                    "<html>\n" +
+                    "  <body style='margin: 0px 0px;'>\n" +
+                    "    <svg width='200' height='200'>\n" +
+                    "      <defs>\n" +
+                    "        <linearGradient id='Gradient'>\n" +
+                    "          <stop offset='0' stop-color='white' stop-opacity='0' />\n" +
+                    "          <stop offset='1' stop-color='white' stop-opacity='1' />\n" +
+                    "        </linearGradient>\n" +
+                    "        <mask id='Mask'>\n" +
+                    "          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' />\n" +
+                    "        </mask>\n" +
+                    "      </defs>\n" +
+                    "      <rect x='0' y='0' width='200' height='200' fill='green' />\n" +
+                    "      <rect x='0' y='0' width='200' height='200' fill='red' mask='url(#Mask)' />\n" +
+                    "    </svg>\n" +
+                    "  </body>\n" +
+                    "</html>"
+        );
+        submit(() -> {
+            final WebPage webPage = WebEngineShim.getPage(getEngine());
+            assertNotNull(webPage);
+            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);
+            assertNotNull(img);
+
+            final Color pixelAt0x0 = new Color(img.getRGB(0, 0), true);
+            assertTrue("Color should be green:" + pixelAt0x0, isColorsSimilar(new Color(0, 128, 0), pixelAt0x0, 5));
+            final Color pixelAt0x199 = new Color(img.getRGB(0, 199), true);
+            assertTrue("Color should be green:" + pixelAt0x199, isColorsSimilar(new Color(0, 128, 0), pixelAt0x199, 5));
+
+            final Color pixelAt100x0 = new Color(img.getRGB(100, 0), true);
+            assertTrue("Color should be almost Cinnamon:" + pixelAt100x0, isColorsSimilar(new Color(128, 64, 0), pixelAt100x0, 20));
+            final Color pixelAt100x199 = new Color(img.getRGB(100, 199), true);
+            assertTrue("Color should be almost Cinnamon:" + pixelAt100x199, isColorsSimilar(new Color(128, 64, 0), pixelAt100x199, 20));
+
+            final Color pixelAt199x0 = new Color(img.getRGB(199, 0), true);
+            assertTrue("Color should be red:" + pixelAt199x0, isColorsSimilar(Color.RED, pixelAt199x0, 5));
+            final Color pixelAt199x199 = new Color(img.getRGB(199, 199), true);
+            assertTrue("Color should be red:" + pixelAt199x199, isColorsSimilar(Color.RED, pixelAt199x199, 5));
+        });
+    }
 }
