diff a/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow+Java.m b/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow+Java.m
--- a/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow+Java.m
+++ b/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow+Java.m
@@ -92,14 +92,18 @@
 - (void)_sendJavaWindowResizeEvent:(int)type forFrame:(NSRect)frame
 {
     if (self->suppressWindowResizeEvent == NO)
     {
         GET_MAIN_JENV;
-        (*env)->CallVoidMethod(env, jWindow, jWindowNotifyResize,
-            [self->nsWindow isZoomed]
-                ? com_sun_glass_events_WindowEvent_MAXIMIZE
-                : type,
+
+        if ([self->nsWindow isMiniaturized]) {
+            type = com_sun_glass_events_WindowEvent_MINIMIZE;
+        } else if ([self->nsWindow isZoomed]) {
+            type = com_sun_glass_events_WindowEvent_MAXIMIZE;
+        }
+
+        (*env)->CallVoidMethod(env, jWindow, jWindowNotifyResize, type,
              (int)frame.size.width, (int)frame.size.height);
         [self _sendJavaWindowMoveToAnotherScreenEventIfNeeded];
     }
 }
 
diff a/tests/system/src/test/java/test/robot/javafx/stage/IconifyTest.java b/tests/system/src/test/java/test/robot/javafx/stage/IconifyTest.java
--- a/tests/system/src/test/java/test/robot/javafx/stage/IconifyTest.java
+++ b/tests/system/src/test/java/test/robot/javafx/stage/IconifyTest.java
@@ -35,10 +35,11 @@
 import javafx.stage.StageStyle;
 import org.junit.Test;
 import test.robot.testharness.VisualTestBase;
 
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
 import static test.util.Util.TIMEOUT;
 
 /**
  * Test ability to programmatically iconify UNDECORATED and TRANSPARENT stages
  */
@@ -53,11 +54,11 @@
     private static final double TOLERANCE = 0.07;
 
     private Stage bottomStage;
     private Stage topStage;
 
-    public void canIconifyStage(StageStyle stageStyle) throws Exception {
+    public void canIconifyStage(StageStyle stageStyle, boolean resizable) throws Exception {
         final CountDownLatch shownLatch = new CountDownLatch(2);
 
         runAndWait(() -> {
             // Bottom stage, should be visible after top stage is iconified
             bottomStage = getStage(true);
@@ -70,10 +71,11 @@
             bottomStage.show();
 
             // Top stage, will be inconified
             topStage = getStage(true);
             topStage.initStyle(stageStyle);
+            topStage.setResizable(resizable);
             Scene topScene = new Scene(new Pane(), WIDTH, HEIGHT);
             topScene.setFill(TOP_COLOR);
             topStage.setScene(topScene);
             topStage.setX(0);
             topStage.setY(0);
@@ -88,31 +90,54 @@
             topStage.toFront();
         });
 
         sleep(500);
         runAndWait(() -> {
+            assertFalse(topStage.isIconified());
             Color color = getColor(100, 100);
             assertColorEquals(TOP_COLOR, color, TOLERANCE);
         });
 
         runAndWait(() -> {
             topStage.setIconified(true);
         });
 
         sleep(500);
         runAndWait(() -> {
+            assertTrue(topStage.isIconified());
             Color color = getColor(100, 100);
             assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);
         });
+
+        runAndWait(() -> {
+            topStage.setIconified(false);
+        });
+
+        sleep(500);
+        runAndWait(() -> {
+            assertFalse(topStage.isIconified());
+            Color color = getColor(100, 100);
+            assertColorEquals(TOP_COLOR, color, TOLERANCE);
+        });
+    }
+
+    @Test(timeout = 15000)
+    public void canIconifyDecoratedStage() throws Exception {
+        canIconifyStage(StageStyle.DECORATED, true);
     }
 
     @Test(timeout = 15000)
     public void canIconifyUndecoratedStage() throws Exception {
-        canIconifyStage(StageStyle.UNDECORATED);
+        canIconifyStage(StageStyle.UNDECORATED, true);
     }
 
     @Test(timeout = 15000)
     public void canIconifyTransparentStage() throws Exception {
-        canIconifyStage(StageStyle.TRANSPARENT);
+        canIconifyStage(StageStyle.TRANSPARENT, true);
+    }
+
+    @Test(timeout = 15000)
+    public void canIconifyNonResizableStage() throws Exception {
+        canIconifyStage(StageStyle.DECORATED, false);
     }
 
 }
