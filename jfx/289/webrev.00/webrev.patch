diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js
@@ -46,10 +46,17 @@
     @putByIdDirectPrivate(this, "storedError", @undefined);
     @putByIdDirectPrivate(this, "disturbed", false);
     // Initialized with null value to enable distinction with undefined case.
     @putByIdDirectPrivate(this, "readableStreamController", null);
 
+    // FIXME: We should introduce https://streams.spec.whatwg.org/#create-readable-stream.
+    // For now, we emulate this with underlyingSource with private properties.
+    if (@getByIdDirectPrivate(underlyingSource, "pull") !== @undefined) {
+        @setupReadableStreamDefaultController(this, underlyingSource, @undefined, 1, @getByIdDirectPrivate(underlyingSource, "start"), @getByIdDirectPrivate(underlyingSource, "pull"), @getByIdDirectPrivate(underlyingSource, "cancel"));
+        return this;
+    }
+
     const type = underlyingSource.type;
     const typeString = @toString(type);
 
     if (typeString === "bytes") {
         if (!@readableByteStreamAPIEnabled())
@@ -63,11 +70,12 @@
         let readableByteStreamControllerConstructor = @ReadableByteStreamController;
         @putByIdDirectPrivate(this, "readableStreamController", new @ReadableByteStreamController(this, underlyingSource, strategy.highWaterMark, @isReadableStream));
     } else if (type === @undefined) {
         if (strategy.highWaterMark === @undefined)
             strategy.highWaterMark = 1;
-        @putByIdDirectPrivate(this, "readableStreamController", new @ReadableStreamDefaultController(this, underlyingSource, strategy.size, strategy.highWaterMark, @isReadableStream));
+
+        @setupReadableStreamDefaultController(this, underlyingSource, strategy.size, strategy.highWaterMark, underlyingSource.start, underlyingSource.pull, underlyingSource.cancel);
     } else
         @throwRangeError("Invalid type for underlying source");
 
     return this;
 }
diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
@@ -61,25 +61,37 @@
     @putByIdDirectPrivate(this, "closeRequested", false);
     @putByIdDirectPrivate(this, "pullAgain", false);
     @putByIdDirectPrivate(this, "pulling", false);
     @putByIdDirectPrivate(this, "strategy", @validateAndNormalizeQueuingStrategy(size, highWaterMark));
 
-    const controller = this;
-    @promiseInvokeOrNoopNoCatch(underlyingSource, "start", [this]).@then(() => {
+    return this;
+}
+
+// https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller, starting from step 6.
+// The other part is implemented in privateInitializeReadableStreamDefaultController.
+function setupReadableStreamDefaultController(stream, underlyingSource, size, highWaterMark, startMethod, pullMethod, cancelMethod)
+{
+    "use strict";
+    const controller = new @ReadableStreamDefaultController(stream, underlyingSource, size, highWaterMark, @isReadableStream);
+    const startAlgorithm = () => @promiseInvokeOrNoopMethodNoCatch(underlyingSource, startMethod, [controller]);
+    const pullAlgorithm = () => @promiseInvokeOrNoopMethod(underlyingSource, pullMethod, [controller]);
+    const cancelAlgorithm = (reason) => @promiseInvokeOrNoopMethod(underlyingSource, cancelMethod, [reason]);
+
+    @putByIdDirectPrivate(controller, "pullAlgorithm", pullAlgorithm);
+    @putByIdDirectPrivate(controller, "cancelAlgorithm", cancelAlgorithm);
+    @putByIdDirectPrivate(controller, "pull", @readableStreamDefaultControllerPull);
+    @putByIdDirectPrivate(controller, "cancel", @readableStreamDefaultControllerCancel);
+    @putByIdDirectPrivate(stream, "readableStreamController", controller);
+
+    startAlgorithm().@then(() => {
         @putByIdDirectPrivate(controller, "started", true);
         @assert(!@getByIdDirectPrivate(controller, "pulling"));
         @assert(!@getByIdDirectPrivate(controller, "pullAgain"));
         @readableStreamDefaultControllerCallPullIfNeeded(controller);
     }, (error) => {
         @readableStreamDefaultControllerError(controller, error);
     });
-
-    @putByIdDirectPrivate(this, "cancel", @readableStreamDefaultControllerCancel);
-
-    @putByIdDirectPrivate(this, "pull", @readableStreamDefaultControllerPull);
-
-    return this;
 }
 
 function readableStreamDefaultControllerError(controller, error)
 {
     "use strict";
@@ -135,22 +147,24 @@
         canceled2: false,
         reason1: @undefined,
         reason2: @undefined,
     };
 
-    teeState.cancelPromiseCapability = @newPromiseCapability(@InternalPromise);
+    teeState.cancelPromiseCapability = @newPromiseCapability(@Promise);
 
     const pullFunction = @readableStreamTeePullFunction(teeState, reader, shouldClone);
 
-    const branch1 = new @ReadableStream({
-        "pull": pullFunction,
-        "cancel": @readableStreamTeeBranch1CancelFunction(teeState, stream)
-    });
-    const branch2 = new @ReadableStream({
-        "pull": pullFunction,
-        "cancel": @readableStreamTeeBranch2CancelFunction(teeState, stream)
-    });
+    const branch1Source = { };
+    @putByIdDirectPrivate(branch1Source, "pull", pullFunction);
+    @putByIdDirectPrivate(branch1Source, "cancel", @readableStreamTeeBranch1CancelFunction(teeState, stream));
+
+    const branch2Source = { };
+    @putByIdDirectPrivate(branch2Source, "pull", pullFunction);
+    @putByIdDirectPrivate(branch2Source, "cancel", @readableStreamTeeBranch2CancelFunction(teeState, stream));
+
+    const branch1 = new @ReadableStream(branch1Source);
+    const branch2 = new @ReadableStream(branch2Source);
 
     @getByIdDirectPrivate(reader, "closedPromiseCapability").@promise.@then(@undefined, function(e) {
         if (teeState.closedOrErrored)
             return;
         @readableStreamDefaultControllerError(branch1.@readableStreamController, e);
@@ -320,11 +334,11 @@
     }
 
     @assert(!@getByIdDirectPrivate(controller, "pullAgain"));
     @putByIdDirectPrivate(controller, "pulling", true);
 
-    @promiseInvokeOrNoop(@getByIdDirectPrivate(controller, "underlyingSource"), "pull", [controller]).@then(function() {
+    @getByIdDirectPrivate(controller, "pullAlgorithm").@call(@undefined).@then(function() {
         @putByIdDirectPrivate(controller, "pulling", false);
         if (@getByIdDirectPrivate(controller, "pullAgain")) {
             @putByIdDirectPrivate(controller, "pullAgain", false);
             @readableStreamDefaultControllerCallPullIfNeeded(controller);
         }
@@ -383,11 +397,11 @@
 function readableStreamDefaultControllerCancel(controller, reason)
 {
     "use strict";
 
     @putByIdDirectPrivate(controller, "queue", @newQueue());
-    return @promiseInvokeOrNoop(@getByIdDirectPrivate(controller, "underlyingSource"), "cancel", [reason]);
+    return @getByIdDirectPrivate(controller, "cancelAlgorithm").@call(@undefined, reason);
 }
 
 function readableStreamDefaultControllerPull(controller)
 {
     "use strict";
diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/StreamInternals.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/StreamInternals.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/StreamInternals.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/StreamInternals.js
@@ -34,31 +34,48 @@
     if (promise.@then === @undefined)
         promise.@then = @Promise.prototype.@then;
     return promise;
 }
 
-function promiseInvokeOrNoopNoCatch(object, key, args)
+function promiseInvokeOrNoopMethodNoCatch(object, method, args)
 {
     "use strict";
 
-    const method = object[key];
     if (method === @undefined)
         return @Promise.@resolve();
     return @shieldingPromiseResolve(method.@apply(object, args));
 }
 
+function promiseInvokeOrNoopNoCatch(object, key, args)
+{
+    "use strict";
+
+    return @promiseInvokeOrNoopMethodNoCatch(object, object[key], args);
+}
+
+function promiseInvokeOrNoopMethod(object, method, args)
+{
+    "use strict";
+
+    try {
+        return @promiseInvokeOrNoopMethodNoCatch(object, method, args);
+    }
+    catch(error) {
+        return @Promise.@reject(error);
+    }
+}
+
 function promiseInvokeOrNoop(object, key, args)
 {
     "use strict";
 
     try {
         return @promiseInvokeOrNoopNoCatch(object, key, args);
     }
     catch(error) {
         return @Promise.@reject(error);
     }
-
 }
 
 function promiseInvokeOrFallbackOrNoop(object, key1, args1, key2, args2)
 {
     "use strict";
diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp b/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
@@ -140,28 +140,28 @@
     Vector<RefPtr<WebAnimation>> cssTransitions;
     Vector<RefPtr<WebAnimation>> cssAnimations;
     Vector<RefPtr<WebAnimation>> webAnimations;
 
     // First, let's get all qualifying animations in their right group.
-    for (const auto& animation : m_allAnimations) {
+    for (const auto& animation : m_animations) {
         if (!animation || !animation->isRelevant() || animation->timeline() != this || !is<KeyframeEffect>(animation->effect()))
             continue;
 
         auto* target = downcast<KeyframeEffect>(animation->effect())->target();
         if (!target || !target->isDescendantOf(*m_document))
             continue;
 
         if (is<CSSTransition>(animation.get()) && downcast<CSSTransition>(animation.get())->owningElement())
-            cssTransitions.append(animation.get());
+            cssTransitions.append(animation);
         else if (is<CSSAnimation>(animation.get()) && downcast<CSSAnimation>(animation.get())->owningElement())
-            cssAnimations.append(animation.get());
+            cssAnimations.append(animation);
         else
-            webAnimations.append(animation.get());
+            webAnimations.append(animation);
     }
 
     // Now sort CSS Transitions by their composite order.
-    std::sort(cssTransitions.begin(), cssTransitions.end(), [](auto& lhs, auto& rhs) {
+    std::stable_sort(cssTransitions.begin(), cssTransitions.end(), [](auto& lhs, auto& rhs) {
         // https://drafts.csswg.org/css-transitions-2/#animation-composite-order
         auto* lhsTransition = downcast<CSSTransition>(lhs.get());
         auto* rhsTransition = downcast<CSSTransition>(rhs.get());
 
         auto* lhsOwningElement = lhsTransition->owningElement();
@@ -179,11 +179,11 @@
         // (i.e. without attempting case conversion and such that ‘-moz-column-width’ sorts before ‘column-width’).
         return lhsTransition->transitionProperty().utf8() < rhsTransition->transitionProperty().utf8();
     });
 
     // Now sort CSS Animations by their composite order.
-    std::sort(cssAnimations.begin(), cssAnimations.end(), [](auto& lhs, auto& rhs) {
+    std::stable_sort(cssAnimations.begin(), cssAnimations.end(), [](auto& lhs, auto& rhs) {
         // https://drafts.csswg.org/css-animations-2/#animation-composite-order
         auto* lhsOwningElement = downcast<CSSAnimation>(lhs.get())->owningElement();
         auto* rhsOwningElement = downcast<CSSAnimation>(rhs.get())->owningElement();
 
         // If the owning element of A and B differs, sort A and B by tree order of their corresponding owning elements.
@@ -192,11 +192,11 @@
 
         // Otherwise, sort A and B based on their position in the computed value of the animation-name property of the (common) owning element.
         return compareAnimationsByCompositeOrder(*lhs, *rhs, lhsOwningElement->ensureKeyframeEffectStack().cssAnimationList());
     });
 
-    std::sort(webAnimations.begin(), webAnimations.end(), [](auto& lhs, auto& rhs) {
+    std::stable_sort(webAnimations.begin(), webAnimations.end(), [](auto& lhs, auto& rhs) {
         return lhs->globalPosition() < rhs->globalPosition();
     });
 
     // Finally, we can concatenate the sorted CSS Transitions, CSS Animations and Web Animations in their relative composite order.
     Vector<RefPtr<WebAnimation>> animations;
diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/KeyframeEffectStack.cpp b/modules/javafx.web/src/main/native/Source/WebCore/animation/KeyframeEffectStack.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/KeyframeEffectStack.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/KeyframeEffectStack.cpp
@@ -78,11 +78,11 @@
 void KeyframeEffectStack::ensureEffectsAreSorted()
 {
     if (m_isSorted || m_effects.size() < 2)
         return;
 
-    std::sort(m_effects.begin(), m_effects.end(), [&](auto& lhs, auto& rhs) {
+    std::stable_sort(m_effects.begin(), m_effects.end(), [&](auto& lhs, auto& rhs) {
         auto* lhsAnimation = lhs->animation();
         auto* rhsAnimation = rhs->animation();
 
         ASSERT(lhsAnimation);
         ASSERT(rhsAnimation);
diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimationUtilities.cpp b/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimationUtilities.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimationUtilities.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimationUtilities.cpp
@@ -35,10 +35,15 @@
 
 namespace WebCore {
 
 bool compareAnimationsByCompositeOrder(WebAnimation& lhsAnimation, WebAnimation& rhsAnimation, const AnimationList* cssAnimationList)
 {
+    // We should not ever be calling this function with two WebAnimation objects that are the same. If that were the case,
+    // then comparing objects of this kind would yield inconsistent results when comparing A == B and B == A. As such,
+    // this function should be called with std::stable_sort().
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(&lhsAnimation != &rhsAnimation);
+
     bool lhsHasOwningElement = is<DeclarativeAnimation>(lhsAnimation) && downcast<DeclarativeAnimation>(lhsAnimation).owningElement();
     bool rhsHasOwningElement = is<DeclarativeAnimation>(rhsAnimation) && downcast<DeclarativeAnimation>(rhsAnimation).owningElement();
 
     // CSS Transitions sort first.
     bool lhsIsCSSTransition = lhsHasOwningElement && is<CSSTransition>(lhsAnimation);
diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WebCoreBuiltinNames.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WebCoreBuiltinNames.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WebCoreBuiltinNames.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WebCoreBuiltinNames.h
@@ -243,10 +243,11 @@
     macro(blur) \
     macro(body) \
     macro(byobRequest) \
     macro(caches) \
     macro(cancel) \
+    macro(cancelAlgorithm) \
     macro(cancelIdleCallback) \
     macro(cloneArrayBuffer) \
     macro(close) \
     macro(closeRequested) \
     macro(closed) \
@@ -305,10 +306,11 @@
     macro(pendingPullIntos) \
     macro(postMessage) \
     macro(privateGetStats) \
     macro(pull) \
     macro(pullAgain) \
+    macro(pullAlgorithm) \
     macro(pulling) \
     macro(queue) \
     macro(queuedAddIceCandidate) \
     macro(queuedCreateAnswer) \
     macro(queuedCreateOffer) \
@@ -327,10 +329,11 @@
     macro(self) \
     macro(setBody) \
     macro(setBodyFromInputRequest) \
     macro(setStatus) \
     macro(showModalDialog) \
+    macro(start) \
     macro(startConsumingStream) \
     macro(started) \
     macro(startedPromise) \
     macro(state) \
     macro(storedError) \
diff a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp
@@ -749,10 +749,14 @@
 {
     RefPtr<CSSValue> value = getPropertyCSSValueInternal(shorthand.properties()[0]);
     // FIXME: Remove this isGlobalKeyword check after we do this consistently for all shorthands in getPropertyValue.
     if (value->isGlobalKeyword())
         return value->cssText();
+
+    if (!is<CSSPrimitiveValue>(*value))
+        return String();
+
     CSSValueID valueId = downcast<CSSPrimitiveValue>(*value).valueID();
     switch (valueId) {
     case CSSValuePage:
         return "always"_s;
     case CSSValueAuto:
diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.cpp
@@ -4658,10 +4658,23 @@
 
     if (is<Text>(node))
         m_markers->removeMarkers(node);
 }
 
+void Document::parentlessNodeMovedToNewDocument(Node& node)
+{
+    Vector<Range*, 5> rangesAffected;
+
+    for (auto* range : m_ranges) {
+        if (range->parentlessNodeMovedToNewDocumentAffectsRange(node))
+            rangesAffected.append(range);
+    }
+
+    for (auto* range : rangesAffected)
+        range->updateRangeForParentlessNodeMovedToNewDocument(node);
+}
+
 static Node* fallbackFocusNavigationStartingNodeAfterRemoval(Node& node)
 {
     return node.previousSibling() ? node.previousSibling() : node.parentNode();
 }
 
diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.h
@@ -813,10 +813,11 @@
     void updateRangesAfterChildrenChanged(ContainerNode&);
     // nodeChildrenWillBeRemoved is used when removing all node children at once.
     void nodeChildrenWillBeRemoved(ContainerNode&);
     // nodeWillBeRemoved is only safe when removing one node at a time.
     void nodeWillBeRemoved(Node&);
+    void parentlessNodeMovedToNewDocument(Node&);
 
     enum class AcceptChildOperation { Replace, InsertOrAdd };
     bool canAcceptChild(const Node& newChild, const Node* refChild, AcceptChildOperation) const;
 
     void textInserted(Node&, unsigned offset, unsigned length);
diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Node.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/Node.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Node.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Node.cpp
@@ -2048,10 +2048,13 @@
         ASSERT(!transientMutationObserverRegistry());
     }
 
     oldDocument.moveNodeIteratorsToNewDocument(*this, newDocument);
 
+    if (!parentNode())
+        oldDocument.parentlessNodeMovedToNewDocument(*this);
+
     if (AXObjectCache::accessibilityEnabled()) {
         if (auto* cache = oldDocument.existingAXObjectCache())
             cache->remove(*this);
     }
 
diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.cpp
@@ -1657,10 +1657,22 @@
     ASSERT(node.parentNode());
     boundaryNodeWillBeRemoved(m_start, node);
     boundaryNodeWillBeRemoved(m_end, node);
 }
 
+bool Range::parentlessNodeMovedToNewDocumentAffectsRange(Node& node)
+{
+    return node.containsIncludingShadowDOM(m_start.container());
+}
+
+void Range::updateRangeForParentlessNodeMovedToNewDocument(Node& node)
+{
+    m_ownerDocument->detachRange(*this);
+    m_ownerDocument = node.document();
+    m_ownerDocument->attachRange(*this);
+}
+
 static inline void boundaryTextInserted(RangeBoundaryPoint& boundary, Node& text, unsigned offset, unsigned length)
 {
     if (boundary.container() != &text)
         return;
     unsigned boundaryOffset = boundary.offset();
diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Range.h
@@ -136,10 +136,12 @@
 #endif
 
     void nodeChildrenChanged(ContainerNode&);
     void nodeChildrenWillBeRemoved(ContainerNode&);
     void nodeWillBeRemoved(Node&);
+    bool parentlessNodeMovedToNewDocumentAffectsRange(Node&);
+    void updateRangeForParentlessNodeMovedToNewDocument(Node&);
 
     void textInserted(Node&, unsigned offset, unsigned length);
     void textRemoved(Node&, unsigned offset, unsigned length);
     void textNodesMerged(NodeWithIndex& oldNode, unsigned offset);
     void textNodeSplit(Text& oldNode);
diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp
@@ -122,17 +122,10 @@
     if (createPlugins == CreatePlugins::No)
         return;
 
     setNeedsWidgetUpdate(false);
 
-    RenderEmbeddedObject* renderer = renderEmbeddedObject();
-
-    LayoutUnit contentWidth = renderer->style().width().isFixed() ? LayoutUnit(renderer->style().width().value()) :
-        renderer->width() - renderer->horizontalBorderAndPaddingExtent();
-    LayoutUnit contentHeight = renderer->style().height().isFixed() ? LayoutUnit(renderer->style().height().value()) :
-        renderer->height() - renderer->verticalBorderAndPaddingExtent();
-
     Vector<String> paramNames;
     Vector<String> paramValues;
 
     paramNames.append("code");
     paramValues.append(attributeWithoutSynchronization(codeAttr).string());
@@ -173,11 +166,24 @@
     }
 
     RefPtr<Frame> frame = document().frame();
     ASSERT(frame);
 
-    renderer->setWidget(frame->loader().subframeLoader().createJavaAppletWidget(roundedIntSize(LayoutSize(contentWidth, contentHeight)), *this, paramNames, paramValues));
+    auto contentSize = LayoutSize { };
+    {
+        auto* renderer = renderEmbeddedObject();
+        auto& style = renderer->style();
+
+        contentSize = LayoutSize { style.width().isFixed() ? LayoutUnit(style.width().value()) : renderer->width() - renderer->horizontalBorderAndPaddingExtent(),
+            style.height().isFixed() ? LayoutUnit(style.height().value()) : renderer->height() - renderer->verticalBorderAndPaddingExtent() };
+    }
+
+    auto widget = frame->loader().subframeLoader().createJavaAppletWidget(roundedIntSize(contentSize), *this, paramNames, paramValues);
+    // createJavaAppletWidget needs to check if the plugin(replacement) is obscured. Since the overlapping test requires up-to-date geometry, it initiates a top level style recalc/layout.
+    // Let's see if this element still has a renderer after the style recalc.
+    if (auto* renderer = renderEmbeddedObject())
+        renderer->setWidget(WTFMove(widget));
 #endif // !PLATFORM(IOS_FAMILY)
 }
 
 bool HTMLAppletElement::canEmbedJava() const
 {
diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoader.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2006-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2006-2020 Apple Inc. All rights reserved.
  * Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies)
  * Copyright (C) 2008, 2009 Torch Mobile Inc. All rights reserved. (http://www.torchmobile.com/)
  * Copyright (C) 2008 Alp Toker <alp@atoker.com>
  * Copyright (C) Research In Motion Limited 2009. All rights reserved.
  * Copyright (C) 2011 Kris Jordan <krisjordan@gmail.com>
@@ -459,13 +459,15 @@
         // FIXME: This message should be moved off the console once a solution to https://bugs.webkit.org/show_bug.cgi?id=103274 exists.
         m_frame.document()->addConsoleMessage(MessageSource::Security, MessageLevel::Error, "Blocked form submission to '" + submission->action().stringCenterEllipsizedToLength() + "' because the form's frame is sandboxed and the 'allow-forms' permission is not set.");
         return;
     }
 
-    if (WTF::protocolIsJavaScript(submission->action())) {
-        if (!m_frame.document()->contentSecurityPolicy()->allowFormAction(URL(submission->action())))
-            return;
+    URL formAction = submission->action();
+    if (!m_frame.document()->contentSecurityPolicy()->allowFormAction(formAction))
+        return;
+
+    if (WTF::protocolIsJavaScript(formAction)) {
         m_isExecutingJavaScriptFormAction = true;
         Ref<Frame> protect(m_frame);
         m_frame.script().executeIfJavaScriptURL(submission->action(), nullptr, DoNotReplaceDocumentIfJavaScriptURL);
         m_isExecutingJavaScriptFormAction = false;
         return;
diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.cpp
@@ -301,11 +301,11 @@
     auto& initiatingDocument = ownerElement.document();
 
     URL upgradedRequestURL = requestURL;
     initiatingDocument.contentSecurityPolicy()->upgradeInsecureRequestIfNeeded(upgradedRequestURL, ContentSecurityPolicy::InsecureRequestType::Load);
 
-    auto* frame = ownerElement.contentFrame();
+    RefPtr<Frame> frame = makeRefPtr(ownerElement.contentFrame());
     if (frame)
         frame->navigationScheduler().scheduleLocationChange(initiatingDocument, initiatingDocument.securityOrigin(), upgradedRequestURL, m_frame.loader().outgoingReferrer(), lockHistory, lockBackForwardList);
     else
         frame = loadSubframe(ownerElement, upgradedRequestURL, frameName, m_frame.loader().outgoingReferrer());
 
@@ -314,11 +314,11 @@
 
     ASSERT(ownerElement.contentFrame() == frame || !ownerElement.contentFrame());
     return ownerElement.contentFrame();
 }
 
-Frame* SubframeLoader::loadSubframe(HTMLFrameOwnerElement& ownerElement, const URL& url, const String& name, const String& referrer)
+RefPtr<Frame> SubframeLoader::loadSubframe(HTMLFrameOwnerElement& ownerElement, const URL& url, const String& name, const String& referrer)
 {
     Ref<Frame> protect(m_frame);
     auto document = makeRef(ownerElement.document());
 
     if (!document->securityOrigin().canDisplay(url)) {
@@ -374,11 +374,14 @@
     // it's being added to the child list. It would be a good idea to
     // create the child first, then invoke the loader separately.
     if (frame->loader().state() == FrameStateComplete && !frame->loader().policyDocumentLoader())
         frame->loader().checkCompleted();
 
-    return frame.get();
+    if (!frame->tree().parent())
+        return nullptr;
+
+    return frame;
 }
 
 bool SubframeLoader::allowPlugins()
 {
     return m_frame.settings().arePluginsEnabled();
diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h
@@ -68,11 +68,11 @@
     bool resourceWillUsePlugin(const String& url, const String& mimeType);
 
 private:
     bool requestPlugin(HTMLPlugInImageElement&, const URL&, const String& serviceType, const Vector<String>& paramNames, const Vector<String>& paramValues, bool useFallback);
     Frame* loadOrRedirectSubframe(HTMLFrameOwnerElement&, const URL&, const AtomString& frameName, LockHistory, LockBackForwardList);
-    Frame* loadSubframe(HTMLFrameOwnerElement&, const URL&, const String& name, const String& referrer);
+    RefPtr<Frame> loadSubframe(HTMLFrameOwnerElement&, const URL&, const String& name, const String& referrer);
     bool loadPlugin(HTMLPlugInImageElement&, const URL&, const String& mimeType, const Vector<String>& paramNames, const Vector<String>& paramValues, bool useFallback);
 
     bool shouldUsePlugin(const URL&, const String& mimeType, bool hasFallback, bool& useFallback);
     bool pluginIsLoadable(const URL&, const String& mimeType);
 
diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp
@@ -27,10 +27,11 @@
 #include "FrameView.h"
 #include "RenderSVGResourceClipper.h"
 #include "RenderSVGResourceFilter.h"
 #include "RenderSVGResourceMasker.h"
 #include "RenderSVGResourceSolidColor.h"
+#include "RenderSVGRoot.h"
 #include "RenderView.h"
 #include "SVGResources.h"
 #include "SVGResourcesCache.h"
 #include "SVGURIReference.h"
 
@@ -188,12 +189,18 @@
 
 void RenderSVGResource::markForLayoutAndParentResourceInvalidation(RenderObject& object, bool needsLayout)
 {
     ASSERT(object.node());
 
-    if (needsLayout && !object.renderTreeBeingDestroyed())
-        object.setNeedsLayout();
+    if (needsLayout && !object.renderTreeBeingDestroyed()) {
+        // If we are inside the layout of an RenderSVGRoot, do not cross the SVG boundary to
+        // invalidate the ancestor renderer because it may have finished its layout already.
+        if (is<RenderSVGRoot>(object) && downcast<RenderSVGRoot>(object).isInLayout())
+            object.setNeedsLayout(MarkOnlyThis);
+        else
+            object.setNeedsLayout(MarkContainingBlockChain);
+    }
 
     if (is<RenderElement>(object))
         removeFromCacheAndInvalidateDependencies(downcast<RenderElement>(object), needsLayout);
 
     // Invalidate resources in ancestor chain, if needed.
diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.cpp
@@ -43,19 +43,19 @@
 #include "SVGResourcesCache.h"
 #include "SVGSVGElement.h"
 #include "SVGViewSpec.h"
 #include "TransformState.h"
 #include <wtf/IsoMallocInlines.h>
+#include <wtf/SetForScope.h>
 #include <wtf/StackStats.h>
 
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(RenderSVGRoot);
 
 RenderSVGRoot::RenderSVGRoot(SVGSVGElement& element, RenderStyle&& style)
     : RenderReplaced(element, WTFMove(style))
-    , m_objectBoundingBoxValid(false)
     , m_isLayoutSizeChanged(false)
     , m_needsBoundariesOrTransformUpdate(true)
     , m_hasBoxDecorations(false)
 {
 }
@@ -138,10 +138,11 @@
     return RenderReplaced::computeReplacedLogicalHeight(estimatedUsedWidth);
 }
 
 void RenderSVGRoot::layout()
 {
+    SetForScope<bool> change(m_inLayout, true);
     StackStats::LayoutCheckPoint layoutCheckPoint;
     ASSERT(needsLayout());
 
     m_resourcesNeedingToInvalidateClients.clear();
 
diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGRoot.h
@@ -44,10 +44,11 @@
     bool isEmbeddedThroughFrameContainingSVGDocument() const;
 
     void computeIntrinsicRatioInformation(FloatSize& intrinsicSize, double& intrinsicRatio) const override;
 
     bool isLayoutSizeChanged() const { return m_isLayoutSizeChanged; }
+    bool isInLayout() const { return m_inLayout; }
     void setNeedsBoundariesUpdate() override { m_needsBoundariesOrTransformUpdate = true; }
     bool needsBoundariesUpdate() override { return m_needsBoundariesOrTransformUpdate; }
     void setNeedsTransformUpdate() override { m_needsBoundariesOrTransformUpdate = true; }
 
     IntSize containerSize() const { return m_containerSize; }
@@ -104,11 +105,12 @@
     void updateCachedBoundaries();
     void buildLocalToBorderBoxTransform();
 
     IntSize m_containerSize;
     FloatRect m_objectBoundingBox;
-    bool m_objectBoundingBoxValid;
+    bool m_objectBoundingBoxValid { false };
+    bool m_inLayout { false };
     FloatRect m_strokeBoundingBox;
     FloatRect m_repaintBoundingBox;
     FloatRect m_repaintBoundingBoxExcludingShadow;
     mutable AffineTransform m_localToParentTransform;
     AffineTransform m_localToBorderBoxTransform;
diff a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp
@@ -71,10 +71,14 @@
 TreeResolver::Scope::Scope(Document& document)
     : resolver(document.styleScope().resolver())
     , sharingResolver(document, resolver.ruleSets(), selectorFilter)
 {
     document.setIsResolvingTreeStyle(true);
+
+    // Ensure all shadow tree resolvers exist so their construction doesn't depend on traversal.
+    for (auto* shadowRoot : document.inDocumentShadowRoots())
+        shadowRoot->styleScope().resolver();
 }
 
 TreeResolver::Scope::Scope(ShadowRoot& shadowRoot, Scope& enclosingScope)
     : resolver(shadowRoot.styleScope().resolver())
     , sharingResolver(shadowRoot.documentScope(), resolver.ruleSets(), selectorFilter)
