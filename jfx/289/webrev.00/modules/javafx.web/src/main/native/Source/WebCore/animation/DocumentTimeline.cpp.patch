diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp b/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
@@ -140,28 +140,28 @@
     Vector<RefPtr<WebAnimation>> cssTransitions;
     Vector<RefPtr<WebAnimation>> cssAnimations;
     Vector<RefPtr<WebAnimation>> webAnimations;
 
     // First, let's get all qualifying animations in their right group.
-    for (const auto& animation : m_allAnimations) {
+    for (const auto& animation : m_animations) {
         if (!animation || !animation->isRelevant() || animation->timeline() != this || !is<KeyframeEffect>(animation->effect()))
             continue;
 
         auto* target = downcast<KeyframeEffect>(animation->effect())->target();
         if (!target || !target->isDescendantOf(*m_document))
             continue;
 
         if (is<CSSTransition>(animation.get()) && downcast<CSSTransition>(animation.get())->owningElement())
-            cssTransitions.append(animation.get());
+            cssTransitions.append(animation);
         else if (is<CSSAnimation>(animation.get()) && downcast<CSSAnimation>(animation.get())->owningElement())
-            cssAnimations.append(animation.get());
+            cssAnimations.append(animation);
         else
-            webAnimations.append(animation.get());
+            webAnimations.append(animation);
     }
 
     // Now sort CSS Transitions by their composite order.
-    std::sort(cssTransitions.begin(), cssTransitions.end(), [](auto& lhs, auto& rhs) {
+    std::stable_sort(cssTransitions.begin(), cssTransitions.end(), [](auto& lhs, auto& rhs) {
         // https://drafts.csswg.org/css-transitions-2/#animation-composite-order
         auto* lhsTransition = downcast<CSSTransition>(lhs.get());
         auto* rhsTransition = downcast<CSSTransition>(rhs.get());
 
         auto* lhsOwningElement = lhsTransition->owningElement();
@@ -179,11 +179,11 @@
         // (i.e. without attempting case conversion and such that ‘-moz-column-width’ sorts before ‘column-width’).
         return lhsTransition->transitionProperty().utf8() < rhsTransition->transitionProperty().utf8();
     });
 
     // Now sort CSS Animations by their composite order.
-    std::sort(cssAnimations.begin(), cssAnimations.end(), [](auto& lhs, auto& rhs) {
+    std::stable_sort(cssAnimations.begin(), cssAnimations.end(), [](auto& lhs, auto& rhs) {
         // https://drafts.csswg.org/css-animations-2/#animation-composite-order
         auto* lhsOwningElement = downcast<CSSAnimation>(lhs.get())->owningElement();
         auto* rhsOwningElement = downcast<CSSAnimation>(rhs.get())->owningElement();
 
         // If the owning element of A and B differs, sort A and B by tree order of their corresponding owning elements.
@@ -192,11 +192,11 @@
 
         // Otherwise, sort A and B based on their position in the computed value of the animation-name property of the (common) owning element.
         return compareAnimationsByCompositeOrder(*lhs, *rhs, lhsOwningElement->ensureKeyframeEffectStack().cssAnimationList());
     });
 
-    std::sort(webAnimations.begin(), webAnimations.end(), [](auto& lhs, auto& rhs) {
+    std::stable_sort(webAnimations.begin(), webAnimations.end(), [](auto& lhs, auto& rhs) {
         return lhs->globalPosition() < rhs->globalPosition();
     });
 
     // Finally, we can concatenate the sorted CSS Transitions, CSS Animations and Web Animations in their relative composite order.
     Vector<RefPtr<WebAnimation>> animations;
