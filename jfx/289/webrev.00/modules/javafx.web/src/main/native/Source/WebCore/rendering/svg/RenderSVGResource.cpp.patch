diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResource.cpp
@@ -27,10 +27,11 @@
 #include "FrameView.h"
 #include "RenderSVGResourceClipper.h"
 #include "RenderSVGResourceFilter.h"
 #include "RenderSVGResourceMasker.h"
 #include "RenderSVGResourceSolidColor.h"
+#include "RenderSVGRoot.h"
 #include "RenderView.h"
 #include "SVGResources.h"
 #include "SVGResourcesCache.h"
 #include "SVGURIReference.h"
 
@@ -188,12 +189,18 @@
 
 void RenderSVGResource::markForLayoutAndParentResourceInvalidation(RenderObject& object, bool needsLayout)
 {
     ASSERT(object.node());
 
-    if (needsLayout && !object.renderTreeBeingDestroyed())
-        object.setNeedsLayout();
+    if (needsLayout && !object.renderTreeBeingDestroyed()) {
+        // If we are inside the layout of an RenderSVGRoot, do not cross the SVG boundary to
+        // invalidate the ancestor renderer because it may have finished its layout already.
+        if (is<RenderSVGRoot>(object) && downcast<RenderSVGRoot>(object).isInLayout())
+            object.setNeedsLayout(MarkOnlyThis);
+        else
+            object.setNeedsLayout(MarkContainingBlockChain);
+    }
 
     if (is<RenderElement>(object))
         removeFromCacheAndInvalidateDependencies(downcast<RenderElement>(object), needsLayout);
 
     // Invalidate resources in ancestor chain, if needed.
