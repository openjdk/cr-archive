diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAppletElement.cpp
@@ -122,17 +122,10 @@
     if (createPlugins == CreatePlugins::No)
         return;
 
     setNeedsWidgetUpdate(false);
 
-    RenderEmbeddedObject* renderer = renderEmbeddedObject();
-
-    LayoutUnit contentWidth = renderer->style().width().isFixed() ? LayoutUnit(renderer->style().width().value()) :
-        renderer->width() - renderer->horizontalBorderAndPaddingExtent();
-    LayoutUnit contentHeight = renderer->style().height().isFixed() ? LayoutUnit(renderer->style().height().value()) :
-        renderer->height() - renderer->verticalBorderAndPaddingExtent();
-
     Vector<String> paramNames;
     Vector<String> paramValues;
 
     paramNames.append("code");
     paramValues.append(attributeWithoutSynchronization(codeAttr).string());
@@ -173,11 +166,24 @@
     }
 
     RefPtr<Frame> frame = document().frame();
     ASSERT(frame);
 
-    renderer->setWidget(frame->loader().subframeLoader().createJavaAppletWidget(roundedIntSize(LayoutSize(contentWidth, contentHeight)), *this, paramNames, paramValues));
+    auto contentSize = LayoutSize { };
+    {
+        auto* renderer = renderEmbeddedObject();
+        auto& style = renderer->style();
+
+        contentSize = LayoutSize { style.width().isFixed() ? LayoutUnit(style.width().value()) : renderer->width() - renderer->horizontalBorderAndPaddingExtent(),
+            style.height().isFixed() ? LayoutUnit(style.height().value()) : renderer->height() - renderer->verticalBorderAndPaddingExtent() };
+    }
+
+    auto widget = frame->loader().subframeLoader().createJavaAppletWidget(roundedIntSize(contentSize), *this, paramNames, paramValues);
+    // createJavaAppletWidget needs to check if the plugin(replacement) is obscured. Since the overlapping test requires up-to-date geometry, it initiates a top level style recalc/layout.
+    // Let's see if this element still has a renderer after the style recalc.
+    if (auto* renderer = renderEmbeddedObject())
+        renderer->setWidget(WTFMove(widget));
 #endif // !PLATFORM(IOS_FAMILY)
 }
 
 bool HTMLAppletElement::canEmbedJava() const
 {
