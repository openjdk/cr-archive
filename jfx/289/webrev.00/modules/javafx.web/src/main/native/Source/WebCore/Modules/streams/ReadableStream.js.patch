diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStream.js
@@ -46,10 +46,17 @@
     @putByIdDirectPrivate(this, "storedError", @undefined);
     @putByIdDirectPrivate(this, "disturbed", false);
     // Initialized with null value to enable distinction with undefined case.
     @putByIdDirectPrivate(this, "readableStreamController", null);
 
+    // FIXME: We should introduce https://streams.spec.whatwg.org/#create-readable-stream.
+    // For now, we emulate this with underlyingSource with private properties.
+    if (@getByIdDirectPrivate(underlyingSource, "pull") !== @undefined) {
+        @setupReadableStreamDefaultController(this, underlyingSource, @undefined, 1, @getByIdDirectPrivate(underlyingSource, "start"), @getByIdDirectPrivate(underlyingSource, "pull"), @getByIdDirectPrivate(underlyingSource, "cancel"));
+        return this;
+    }
+
     const type = underlyingSource.type;
     const typeString = @toString(type);
 
     if (typeString === "bytes") {
         if (!@readableByteStreamAPIEnabled())
@@ -63,11 +70,12 @@
         let readableByteStreamControllerConstructor = @ReadableByteStreamController;
         @putByIdDirectPrivate(this, "readableStreamController", new @ReadableByteStreamController(this, underlyingSource, strategy.highWaterMark, @isReadableStream));
     } else if (type === @undefined) {
         if (strategy.highWaterMark === @undefined)
             strategy.highWaterMark = 1;
-        @putByIdDirectPrivate(this, "readableStreamController", new @ReadableStreamDefaultController(this, underlyingSource, strategy.size, strategy.highWaterMark, @isReadableStream));
+
+        @setupReadableStreamDefaultController(this, underlyingSource, strategy.size, strategy.highWaterMark, underlyingSource.start, underlyingSource.pull, underlyingSource.cancel);
     } else
         @throwRangeError("Invalid type for underlying source");
 
     return this;
 }
