diff a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
--- a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
@@ -109,17 +109,17 @@
      * <em>not</em> reported to observers of any {@code ObservableList} that
      * wraps it.
      * <p>
      * This list also reports mutations of the elements in it by using an {@code extractor}.
      * Observable objects returned by the extractor (applied to each list element) are listened for changes
-     * and transformed into {@link ListChangeListener.Change#wasUpdated() "update"} changes of a {@code ListChangeListener}.
+     * and transformed into {@linkplain ListChangeListener.Change#wasUpdated() "update"} changes of a {@code ListChangeListener}.
      *
      * @param <E> The type of List to be wrapped
      * @param list a concrete List that backs this ObservableList
      * @param extractor element to Observable[] converter
-     * @since JavaFX 2.1
      * @return a newly created ObservableList
+     * @since JavaFX 2.1
      */
     public static <E> ObservableList<E> observableList(List<E> list, Callback<E, Observable[]> extractor) {
         if (list == null || extractor == null) {
             throw new NullPointerException();
         }
@@ -316,23 +316,23 @@
     public static <E> ObservableList<E> observableArrayList() {
         return observableList(new ArrayList());
     }
 
     /**
-     * Creates a new empty observable list backed by an array list that listens to changes in observables of its items.
+     * Creates a new empty {@code ObservableList} backed by an array list that listens to changes in observables of its items.
      * The {@code extractor} parameter specifies observables (usually properties) of the objects in the created list. When there is
      * a change in one of those observables, the user is notified of it through an
      * {@link ListChangeListener.Change#wasUpdated() update} change of an attached {@code ListChangeListener}. These changes
      * are unrelated to the changes made to the observable list itself using methods such as {@code add} and {@code remove}.
      * <p>
      * For example, a list of {@code Shape}s can listen to changes in the shapes' {@code fill} property.
      *
      * @param <E> The type of List to be wrapped
      * @param extractor element to Observable[] converter. Observable objects are listened for changes on the element.
+     * @return a newly created ObservableList
      * @see #observableList(java.util.List, javafx.util.Callback)
      * @since JavaFX 2.1
-     * @return a newly created ObservableList
      */
     public static <E> ObservableList<E> observableArrayList(Callback<E, Observable[]> extractor) {
         return observableList(new ArrayList(), extractor);
     }
 
@@ -372,11 +372,11 @@
         return observableMap(new HashMap<K, V>());
     }
 
     /**
      * Concatenates more observable lists into one. The resulting list
-     * would be backed by an arraylist.
+     * would be backed by an array list.
      * @param <E> The type of List to be wrapped
      * @param lists lists to concatenate
      * @return new observable array list concatenated from the arguments
      */
     public static <E> ObservableList<E> concat(ObservableList<E>... lists) {
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
@@ -133,11 +133,11 @@
      **************************************************************************/
     /**
      * The text to display in the label. The text may be null.
      *
      * @return the text to display in the label
-     * @defaultValue {@code ""} (empty string}
+     * @defaultValue empty string
      */
     public final StringProperty textProperty() {
         if (text == null) {
             text = new SimpleStringProperty(this, "text", "");
         }
@@ -263,12 +263,12 @@
      * <p>Note that not all fonts support all Unicode characters.
      *
      * @return the ellipsis property on the string to display for the ellipsis
      * when text is truncated
      * @see <a href="http://en.wikipedia.org/wiki/Ellipsis#Computer_representations">Wikipedia:ellipsis</a>
-     * @since JavaFX 2.2
      * @defaultValue {@code "..."}
+     * @since JavaFX 2.2
      */
     public final StringProperty ellipsisStringProperty() {
         if (ellipsisString == null) {
             ellipsisString = new StyleableStringProperty(DEFAULT_ELLIPSIS_STRING) {
                 @Override public Object getBean() {
@@ -607,12 +607,12 @@
 
     /**
      * Specifies the space in pixel between lines.
      *
      * @return the line spacing property between lines in this labeled
-     * @since JavaFX 8.0
      * @defaultValue 0
+     * @since JavaFX 8.0
      */
     public final DoubleProperty lineSpacingProperty() {
         if (lineSpacing == null) {
             lineSpacing = new StyleableDoubleProperty(0) {
 
@@ -799,11 +799,11 @@
      * parsed to see if it contains the mnemonic parsing character '_'.
      * When a mnemonic is detected the key combination will
      * be determined based on the succeeding character, and the mnemonic
      * added.
      *
-     * @defaultValue {@code false}; {@code true} for some Controls.
+     * @defaultValue {@code false}; {@code true} for some {@code Control}s.
      */
     private BooleanProperty mnemonicParsing;
     public final void setMnemonicParsing(boolean value) {
         mnemonicParsingProperty().set(value);
     }
diff a/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java b/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
--- a/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
+++ b/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
@@ -44,25 +44,25 @@
  * {@code KeyFrame.values}, are interpolated
  * to/from the targeted key values at the specified time of the {@code KeyFrame}
  * to {@code Timeline}'s initial position, depends on {@code Timeline}'s
  * direction.
  * <p>
- * {@code Timeline} processes individual {@code KeyFrame} at or after specified
- * time interval elapsed, it does not guarantee the timing when {@code KeyFrame}
+ * {@code Timeline} processes individual a {@code KeyFrame} at or after the specified
+ * time interval elapsed, it does not guarantee the exact time when a {@code KeyFrame}
  * is processed.
  * <p>
  * If a {@code KeyFrame} is not provided for the {@code time==0s} instant, one
  * will be synthesized using the target values that are current at the time
- * {@link #play()} or {@link #playFromStart()} is called.
- * <p>
- * The {@link #cycleDurationProperty()} will be set to the largest time value
- * of Timeline's keyFrames.
+ * {@link #play()} or {@link #playFromStart()} are called.
  * <p>
  * It is not possible to change the {@code keyFrames} of a running {@code Timeline}.
  * If the value of {@code keyFrames} is changed for a running {@code Timeline}, it
  * has to be stopped and started again to pick up the new value.
  * <p>
+ * The {@link #cycleDurationProperty()} will be set to the largest time value
+ * of Timeline's keyFrames.
+ * <p>
  * A simple Timeline can be created like this:
  * <pre> {@code final Timeline timeline = new Timeline();
  * timeline.setCycleCount(2);
  * timeline.setAutoReverse(true);
  * timeline.getKeyFrames().add(new KeyFrame(Duration.millis(5000),
@@ -114,11 +114,11 @@
             }
         }
     };
 
     /**
-     * Creates a {@code Timeline} with the provided key frames and a {@link Animation#getTargetFramerate() target framerate}.
+     * Creates a {@code Timeline} with the provided key frames and a {@linkplain Animation#getTargetFramerate() target framerate}.
      * The key frames do not need to be ordered.
      *
      * @param targetFramerate
      *            the custom target frame rate for this {@code Timeline}
      * @param keyFrames
@@ -141,11 +141,11 @@
         clipCore = new TimelineClipCore(this);
         getKeyFrames().setAll(keyFrames);
     }
 
     /**
-     * Creates a {@code Timeline} with no key frames and a {@link Animation#getTargetFramerate() target framerate}.
+     * Creates a {@code Timeline} with no key frames and a {@linkplain Animation#getTargetFramerate() target framerate}.
      *
      * @param targetFramerate
      *            the custom target frame rate for this {@code Timeline}
      */
     public Timeline(double targetFramerate) {
