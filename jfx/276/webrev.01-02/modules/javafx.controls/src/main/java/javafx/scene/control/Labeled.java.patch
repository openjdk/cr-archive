diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
@@ -133,11 +133,11 @@
      **************************************************************************/
     /**
      * The text to display in the label. The text may be null.
      *
      * @return the text to display in the label
-     * @defaultValue {@code ""} (empty string}
+     * @defaultValue empty string
      */
     public final StringProperty textProperty() {
         if (text == null) {
             text = new SimpleStringProperty(this, "text", "");
         }
@@ -263,12 +263,12 @@
      * <p>Note that not all fonts support all Unicode characters.
      *
      * @return the ellipsis property on the string to display for the ellipsis
      * when text is truncated
      * @see <a href="http://en.wikipedia.org/wiki/Ellipsis#Computer_representations">Wikipedia:ellipsis</a>
-     * @since JavaFX 2.2
      * @defaultValue {@code "..."}
+     * @since JavaFX 2.2
      */
     public final StringProperty ellipsisStringProperty() {
         if (ellipsisString == null) {
             ellipsisString = new StyleableStringProperty(DEFAULT_ELLIPSIS_STRING) {
                 @Override public Object getBean() {
@@ -607,12 +607,12 @@
 
     /**
      * Specifies the space in pixel between lines.
      *
      * @return the line spacing property between lines in this labeled
-     * @since JavaFX 8.0
      * @defaultValue 0
+     * @since JavaFX 8.0
      */
     public final DoubleProperty lineSpacingProperty() {
         if (lineSpacing == null) {
             lineSpacing = new StyleableDoubleProperty(0) {
 
@@ -799,11 +799,11 @@
      * parsed to see if it contains the mnemonic parsing character '_'.
      * When a mnemonic is detected the key combination will
      * be determined based on the succeeding character, and the mnemonic
      * added.
      *
-     * @defaultValue {@code false}; {@code true} for some Controls.
+     * @defaultValue {@code false}; {@code true} for some {@code Control}s.
      */
     private BooleanProperty mnemonicParsing;
     public final void setMnemonicParsing(boolean value) {
         mnemonicParsingProperty().set(value);
     }
