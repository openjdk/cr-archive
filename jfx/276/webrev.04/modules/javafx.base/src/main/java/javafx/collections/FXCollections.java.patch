diff a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
--- a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
@@ -100,26 +100,28 @@
         return list instanceof RandomAccess ? new ObservableListWrapper<E>(list) :
                 new ObservableSequentialListWrapper<E>(list);
     }
 
     /**
-     * Constructs an ObservableList that is backed by the specified list.
-     * Mutation operations on the ObservableList instance will be reported
-     * to observers that have registered on that instance.<br>
-     * Note that mutation operations made directly to the underlying list are
-     * <em>not</em> reported to observers of any ObservableList that
+     * Constructs an {@code ObservableList} that is backed by the specified list and listens to changes in observables of its items.
+     * Mutation operations made directly to the underlying list are
+     * <em>not</em> reported to observers of any {@code ObservableList} that
      * wraps it.
-     * <br>
-     * This list also reports mutations of the elements in it by using <code>extractor</code>.
-     * Observable objects returned by extractor (applied to each list element) are listened for changes
-     * and transformed into "update" change of ListChangeListener.
+     * <p>
+     * The {@code extractor} returns observables (usually properties) of the objects in the created list. These observables are
+     * listened for changes, and the user is notified of these through an
+     * {@linkplain ListChangeListener.Change#wasUpdated() update} change of an attached {@code ListChangeListener}. These changes
+     * are unrelated to the changes made to the observable list itself using methods such as {@code add} and {@code remove}.
+     * <p>
+     * For example, a list of {@code Shape}s can listen to changes in the shapes' {@code fill} property.
      *
-     * @param <E> The type of List to be wrapped
-     * @param list a concrete List that backs this ObservableList
-     * @param extractor element to Observable[] convertor
+     * @param <E> The type of {@code List} to be wrapped
+     * @param list a concrete {@code List} that backs this {@code ObservableList}
+     * @param extractor element to {@code Observable[]} converter
+     * @return a newly created {@code ObservableList}
+     * @see #observableArrayList(javafx.util.Callback)
      * @since JavaFX 2.1
-     * @return a newly created ObservableList
      */
     public static <E> ObservableList<E> observableList(List<E> list, Callback<E, Observable[]> extractor) {
         if (list == null || extractor == null) {
             throw new NullPointerException();
         }
@@ -305,29 +307,35 @@
     public static ObservableFloatArray observableFloatArray(ObservableFloatArray array) {
         return new ObservableFloatArrayImpl(array);
     }
 
     /**
-     * Creates a new empty observable list that is backed by an arraylist.
+     * Creates a new empty observable list that is backed by an array list.
      * @see #observableList(java.util.List)
      * @param <E> The type of List to be wrapped
      * @return a newly created ObservableList
      */
     @SuppressWarnings("unchecked")
     public static <E> ObservableList<E> observableArrayList() {
         return observableList(new ArrayList());
     }
 
     /**
-     * Creates a new empty observable list backed by an arraylist.
+     * Creates a new empty {@code ObservableList} that is backed by an array list and listens to changes in observables of its items.
+     * <p>
+     * The {@code extractor} returns observables (usually properties) of the objects in the created list. These observables are
+     * listened for changes and the user is notified of these through an
+     * {@linkplain ListChangeListener.Change#wasUpdated() update} change of an attached {@code ListChangeListener}. These changes
+     * are unrelated to the changes made to the observable list itself using methods such as {@code add} and {@code remove}.
+     * <p>
+     * For example, a list of {@code Shape}s can listen to changes in the shapes' {@code fill} property.
      *
-     * This list reports element updates.
-     * @param <E> The type of List to be wrapped
-     * @param extractor element to Observable[] convertor. Observable objects are listened for changes on the element.
+     * @param <E> The type of {@code List} to be wrapped
+     * @param extractor element to {@code Observable[]} converter
+     * @return a newly created {@code ObservableList}
      * @see #observableList(java.util.List, javafx.util.Callback)
      * @since JavaFX 2.1
-     * @return a newly created ObservableList
      */
     public static <E> ObservableList<E> observableArrayList(Callback<E, Observable[]> extractor) {
         return observableList(new ArrayList(), extractor);
     }
 
@@ -367,11 +375,11 @@
         return observableMap(new HashMap<K, V>());
     }
 
     /**
      * Concatenates more observable lists into one. The resulting list
-     * would be backed by an arraylist.
+     * would be backed by an array list.
      * @param <E> The type of List to be wrapped
      * @param lists lists to concatenate
      * @return new observable array list concatenated from the arguments
      */
     public static <E> ObservableList<E> concat(ObservableList<E>... lists) {
