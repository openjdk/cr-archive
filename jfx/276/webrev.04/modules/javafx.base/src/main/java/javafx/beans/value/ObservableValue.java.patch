diff a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
--- a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
@@ -41,11 +41,13 @@
  * which means that the value is not immediately recomputed after changes, but
  * lazily the next time the value is requested. All bindings and properties in
  * this library support lazy evaluation.
  * <p>
  * An {@code ObservableValue} generates two types of events: change events and
- * invalidation events. A change event indicates that the value has changed. An
+ * invalidation events. A change event indicates that the value has changed.
+ * Current implementing classes in JavaFX check for a change using reference
+ * equality (and not object equality, {@code Object#equals(Object)}) of the value. An
  * invalidation event is generated if the current value is not valid anymore.
  * This distinction becomes important if the {@code ObservableValue} supports
  * lazy evaluation, because for a lazily evaluated value one does not know if an
  * invalid value really has changed until it is recomputed. For this reason,
  * generating change events requires eager evaluation while invalidation events
