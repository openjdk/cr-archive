diff a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
--- a/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/value/ObservableValue.java
@@ -41,11 +41,13 @@
  * which means that the value is not immediately recomputed after changes, but
  * lazily the next time the value is requested. All bindings and properties in
  * this library support lazy evaluation.
  * <p>
  * An {@code ObservableValue} generates two types of events: change events and
- * invalidation events. A change event indicates that the value has changed. An
+ * invalidation events. A change event indicates that the value has changed.
+ * Current implementing classes in JavaFX check for a change using reference
+ * equality (and not object equality, {@code Object#equals(Object)}) of the value. An
  * invalidation event is generated if the current value is not valid anymore.
  * This distinction becomes important if the {@code ObservableValue} supports
  * lazy evaluation, because for a lazily evaluated value one does not know if an
  * invalid value really has changed until it is recomputed. For this reason,
  * generating change events requires eager evaluation while invalidation events
diff a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
--- a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
@@ -100,26 +100,26 @@
         return list instanceof RandomAccess ? new ObservableListWrapper<E>(list) :
                 new ObservableSequentialListWrapper<E>(list);
     }
 
     /**
-     * Constructs an ObservableList that is backed by the specified list.
-     * Mutation operations on the ObservableList instance will be reported
+     * Constructs an {@code ObservableList} that is backed by the specified list.
+     * Mutation operations on the {@code ObservableList} instance will be reported
      * to observers that have registered on that instance.<br>
      * Note that mutation operations made directly to the underlying list are
-     * <em>not</em> reported to observers of any ObservableList that
+     * <em>not</em> reported to observers of any {@code ObservableList} that
      * wraps it.
-     * <br>
-     * This list also reports mutations of the elements in it by using <code>extractor</code>.
-     * Observable objects returned by extractor (applied to each list element) are listened for changes
-     * and transformed into "update" change of ListChangeListener.
+     * <p>
+     * This list also reports mutations of the elements in it by using an {@code extractor}.
+     * Observable objects returned by the extractor (applied to each list element) are listened for changes
+     * and transformed into {@linkplain ListChangeListener.Change#wasUpdated() "update"} changes of a {@code ListChangeListener}.
      *
      * @param <E> The type of List to be wrapped
      * @param list a concrete List that backs this ObservableList
-     * @param extractor element to Observable[] convertor
-     * @since JavaFX 2.1
+     * @param extractor element to Observable[] converter
      * @return a newly created ObservableList
+     * @since JavaFX 2.1
      */
     public static <E> ObservableList<E> observableList(List<E> list, Callback<E, Observable[]> extractor) {
         if (list == null || extractor == null) {
             throw new NullPointerException();
         }
@@ -305,29 +305,34 @@
     public static ObservableFloatArray observableFloatArray(ObservableFloatArray array) {
         return new ObservableFloatArrayImpl(array);
     }
 
     /**
-     * Creates a new empty observable list that is backed by an arraylist.
+     * Creates a new empty observable list that is backed by an array list.
      * @see #observableList(java.util.List)
      * @param <E> The type of List to be wrapped
      * @return a newly created ObservableList
      */
     @SuppressWarnings("unchecked")
     public static <E> ObservableList<E> observableArrayList() {
         return observableList(new ArrayList());
     }
 
     /**
-     * Creates a new empty observable list backed by an arraylist.
+     * Creates a new empty {@code ObservableList} backed by an array list that listens to changes in observables of its items.
+     * The {@code extractor} parameter specifies observables (usually properties) of the objects in the created list. When there is
+     * a change in one of those observables, the user is notified of it through an
+     * {@link ListChangeListener.Change#wasUpdated() update} change of an attached {@code ListChangeListener}. These changes
+     * are unrelated to the changes made to the observable list itself using methods such as {@code add} and {@code remove}.
+     * <p>
+     * For example, a list of {@code Shape}s can listen to changes in the shapes' {@code fill} property.
      *
-     * This list reports element updates.
      * @param <E> The type of List to be wrapped
-     * @param extractor element to Observable[] convertor. Observable objects are listened for changes on the element.
+     * @param extractor element to Observable[] converter. Observable objects are listened for changes on the element.
+     * @return a newly created ObservableList
      * @see #observableList(java.util.List, javafx.util.Callback)
      * @since JavaFX 2.1
-     * @return a newly created ObservableList
      */
     public static <E> ObservableList<E> observableArrayList(Callback<E, Observable[]> extractor) {
         return observableList(new ArrayList(), extractor);
     }
 
@@ -367,11 +372,11 @@
         return observableMap(new HashMap<K, V>());
     }
 
     /**
      * Concatenates more observable lists into one. The resulting list
-     * would be backed by an arraylist.
+     * would be backed by an array list.
      * @param <E> The type of List to be wrapped
      * @param lists lists to concatenate
      * @return new observable array list concatenated from the arguments
      */
     public static <E> ObservableList<E> concat(ObservableList<E>... lists) {
diff a/modules/javafx.base/src/main/java/javafx/collections/ObservableList.java b/modules/javafx.base/src/main/java/javafx/collections/ObservableList.java
--- a/modules/javafx.base/src/main/java/javafx/collections/ObservableList.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/ObservableList.java
@@ -34,11 +34,13 @@
 import javafx.beans.Observable;
 import javafx.collections.transformation.FilteredList;
 import javafx.collections.transformation.SortedList;
 
 /**
- * A list that allows listeners to track changes when they occur.
+ * A list that allows listeners to track changes when they occur. Implementations can be created using methods in {@link FXCollections}
+ * such as {@link FXCollections#observableArrayList() observableArrayList}, or with a
+ * {@link javafx.beans.property.SimpleListProperty SimpleListProperty}.
  *
  * @see ListChangeListener
  * @see ListChangeListener.Change
  * @param <E> the list element type
  * @since JavaFX 2.0
diff a/modules/javafx.base/src/main/java/javafx/collections/ObservableMap.java b/modules/javafx.base/src/main/java/javafx/collections/ObservableMap.java
--- a/modules/javafx.base/src/main/java/javafx/collections/ObservableMap.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/ObservableMap.java
@@ -28,14 +28,18 @@
 import java.util.Map;
 
 import javafx.beans.Observable;
 
 /**
- * A map that allows observers to track changes when they occur.
+ * A map that allows observers to track changes when they occur. Implementations can be created using methods in {@link FXCollections}
+ * such as {@link FXCollections#observableHashMap() observableHashMap}, or with a
+ * {@link javafx.beans.property.SimpleMapProperty SimpleMapProperty}.
  *
  * @see MapChangeListener
  * @see MapChangeListener.Change
+ * @param <K> the map key element type
+ * @param <V> the map value element type
  * @since JavaFX 2.0
  */
 public interface ObservableMap<K, V> extends Map<K, V>, Observable {
     /**
      * Add a listener to this observable map.
diff a/modules/javafx.base/src/main/java/javafx/collections/ObservableSet.java b/modules/javafx.base/src/main/java/javafx/collections/ObservableSet.java
--- a/modules/javafx.base/src/main/java/javafx/collections/ObservableSet.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/ObservableSet.java
@@ -23,20 +23,22 @@
  * questions.
  */
 
 package javafx.collections;
 
-
 import java.util.Set;
 
 import javafx.beans.Observable;
 
 /**
- * A set that allows observers to track changes when they occur.
+ * A set that allows observers to track changes when they occur. Implementations can be created using methods in {@link FXCollections}
+ * such as {@link FXCollections#observableSet(Object...) observableSet}, or with a
+ * {@link javafx.beans.property.SimpleSetProperty SimpleSetProperty}.
  *
  * @see SetChangeListener
  * @see SetChangeListener.Change
+ * @param <E> the set element type
  * @since JavaFX 2.1
  */
 public interface ObservableSet<E> extends Set<E>, Observable {
     /**
      * Add a listener to this observable set.
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package javafx.scene.control;
 
-
 import com.sun.javafx.css.StyleManager;
 import com.sun.javafx.scene.NodeHelper;
 import javafx.css.converter.BooleanConverter;
 import javafx.css.converter.EnumConverter;
 import javafx.css.converter.InsetsConverter;
@@ -66,11 +65,10 @@
 import javafx.css.StyleableDoubleProperty;
 import javafx.css.StyleableObjectProperty;
 import javafx.css.StyleableProperty;
 import javafx.css.StyleableStringProperty;
 
-
 /**
  * A Labeled {@link Control} is one which has as part of its user interface
  * a textual content associated with it. For example, a {@link Button} displays
  * {@code text}, as does a {@link Label}, a {@link Tooltip}, and many
  * other controls.
@@ -133,11 +131,13 @@
      * Properties                                                              *
      *                                                                         *
      **************************************************************************/
     /**
      * The text to display in the label. The text may be null.
+     *
      * @return the text to display in the label
+     * @defaultValue empty string
      */
     public final StringProperty textProperty() {
         if (text == null) {
             text = new SimpleStringProperty(this, "text", "");
         }
@@ -148,11 +148,13 @@
     public final String getText() { return text == null ? "" : text.getValue(); }
 
     /**
      * Specifies how the text and graphic within the Labeled should be
      * aligned when there is empty space within the Labeled.
+     *
      * @return the alignment within this labeled
+     * @defaultValue {@code Pos.CENTER_LEFT}
      */
     public final ObjectProperty<Pos> alignmentProperty() {
         if (alignment == null) {
             alignment = new StyleableObjectProperty<Pos>(Pos.CENTER_LEFT) {
 
@@ -180,11 +182,13 @@
 
     /**
      * Specifies the behavior for lines of text <em>when text is multiline</em>.
      * Unlike {@link #contentDisplayProperty} which affects the graphic and text, this setting
      * only affects multiple lines of text relative to the text bounds.
+     *
      * @return the alignment of lines of text within this labeled
+     * @defaultValue {@code TextAlignment.LEFT}
      */
     public final ObjectProperty<TextAlignment> textAlignmentProperty() {
         if (textAlignment == null) {
             textAlignment = new StyleableObjectProperty<TextAlignment>(TextAlignment.LEFT) {
 
@@ -211,11 +215,13 @@
     public final TextAlignment getTextAlignment() { return textAlignment == null ? TextAlignment.LEFT : textAlignment.getValue(); }
 
     /**
      * Specifies the behavior to use if the text of the {@code Labeled}
      * exceeds the available space for rendering the text.
+     *
      * @return the overrun behavior if the text exceeds the available space
+     * @defaultValue {@code OverrunStyle.ELLIPSIS}
      */
     public final ObjectProperty<OverrunStyle> textOverrunProperty() {
         if (textOverrun == null) {
             textOverrun = new StyleableObjectProperty<OverrunStyle>(OverrunStyle.ELLIPSIS) {
 
@@ -257,10 +263,11 @@
      * <p>Note that not all fonts support all Unicode characters.
      *
      * @return the ellipsis property on the string to display for the ellipsis
      * when text is truncated
      * @see <a href="http://en.wikipedia.org/wiki/Ellipsis#Computer_representations">Wikipedia:ellipsis</a>
+     * @defaultValue {@code "..."}
      * @since JavaFX 2.2
      */
     public final StringProperty ellipsisStringProperty() {
         if (ellipsisString == null) {
             ellipsisString = new StyleableStringProperty(DEFAULT_ELLIPSIS_STRING) {
@@ -285,11 +292,13 @@
 
 
     /**
      * If a run of text exceeds the width of the Labeled, then this variable
      * indicates whether the text should wrap onto another line.
+     *
      * @return the wrap property if a run of text exceeds the width of the Labeled
+     * @defaultValue {@code false}
      */
     public final BooleanProperty wrapTextProperty() {
         if (wrapText == null) {
             wrapText = new StyleableBooleanProperty() {
 
@@ -326,11 +335,13 @@
     /**
      * The default font to use for text in the Labeled. If the Label's text is
      * rich text then this font may or may not be used depending on the font
      * information embedded in the rich text, but in any case where a default
      * font is required, this font will be used.
+     *
      * @return the default font to use for text in this labeled
+     * @defaultValue {@link Font#getDefault()}
      */
     public final ObjectProperty<Font> fontProperty() {
 
         if (font == null) {
             font = new StyleableObjectProperty<Font>(Font.getDefault()) {
@@ -401,12 +412,14 @@
     /**
      * An optional icon for the Labeled. This can be positioned relative to the
      * text by using {@link #setContentDisplay}.  The node specified for this
      * variable cannot appear elsewhere in the scene graph, otherwise
      * the {@code IllegalArgumentException} is thrown.  See the class
-     * description of {@link javafx.scene.Node Node} for more detail.
+     * description of {@link Node} for more detail.
+     *
      * @return the optional icon for this labeled
+     * @defaultValue {@code null}
      */
     public final ObjectProperty<Node> graphicProperty() {
         if (graphic == null) {
             graphic = new StyleableObjectProperty<Node>() {
 
@@ -560,11 +573,13 @@
         return imageUrl;
     }
 
     /**
      * Whether all text should be underlined.
+     *
      * @return the underline property of all text in this labeled
+     * @defaultValue {@code false}
      */
     public final BooleanProperty underlineProperty() {
         if (underline == null) {
             underline = new StyleableBooleanProperty(false) {
 
@@ -590,11 +605,13 @@
     public final void setUnderline(boolean value) { underlineProperty().setValue(value); }
     public final boolean isUnderline() { return underline == null ? false : underline.getValue(); }
 
     /**
      * Specifies the space in pixel between lines.
+     *
      * @return the line spacing property between lines in this labeled
+     * @defaultValue 0
      * @since JavaFX 8.0
      */
     public final DoubleProperty lineSpacingProperty() {
         if (lineSpacing == null) {
             lineSpacing = new StyleableDoubleProperty(0) {
@@ -621,11 +638,13 @@
     public final void setLineSpacing(double value) { lineSpacingProperty().setValue(value); }
     public final double getLineSpacing() { return lineSpacing == null ? 0 : lineSpacing.getValue(); }
 
     /**
      * Specifies the positioning of the graphic relative to the text.
+     *
      * @return content display property of this labeled
+     * @defaultValue {@code ContentDisplay.LEFT}
      */
     public final ObjectProperty<ContentDisplay> contentDisplayProperty() {
         if (contentDisplay == null) {
             contentDisplay = new StyleableObjectProperty<ContentDisplay>(ContentDisplay.LEFT) {
 
@@ -655,11 +674,13 @@
      * The padding around the Labeled's text and graphic content.
      * By default labelPadding is Insets.EMPTY and cannot be set to null.
      * Subclasses may add nodes outside this padding and inside the Labeled's padding.
      *
      * This property can only be set from CSS.
-     * @return  the label padding property of this labeled
+     *
+     * @return the label padding property of this labeled
+     * @defaultValue {@code Insets.EMPTY}
      */
     public final ReadOnlyObjectProperty<Insets> labelPaddingProperty() {
         return labelPaddingPropertyImpl();
     }
     private ObjectProperty<Insets> labelPaddingPropertyImpl() {
@@ -700,11 +721,13 @@
     private void setLabelPadding(Insets value) { labelPaddingPropertyImpl().set(value); }
     public final Insets getLabelPadding() { return labelPadding == null ? Insets.EMPTY : labelPadding.get(); }
 
     /**
      * The amount of space between the graphic and text
+     *
      * @return the graphics text gap property of this labeled
+     * @defaultValue 4
      */
     public final DoubleProperty graphicTextGapProperty() {
         if (graphicTextGap == null) {
             graphicTextGap = new StyleableDoubleProperty(4) {
 
@@ -731,10 +754,12 @@
     public final double getGraphicTextGap() { return graphicTextGap == null ? 4 : graphicTextGap.getValue(); }
 
 
     /**
      * The {@link Paint} used to fill the text.
+     *
+     * @defaultValue {@code Color.BLACK}
      */
     private ObjectProperty<Paint> textFill; // TODO for now change this
 
     public final void setTextFill(Paint value) {
         textFillProperty().set(value);
@@ -774,14 +799,11 @@
      * parsed to see if it contains the mnemonic parsing character '_'.
      * When a mnemonic is detected the key combination will
      * be determined based on the succeeding character, and the mnemonic
      * added.
      *
-     * <p>
-     * The default value for Labeled is false, but it
-     * is enabled by default on some Controls.
-     * </p>
+     * @defaultValue {@code false}; {@code true} for some {@code Control}s.
      */
     private BooleanProperty mnemonicParsing;
     public final void setMnemonicParsing(boolean value) {
         mnemonicParsingProperty().set(value);
     }
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Pagination.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Pagination.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Pagination.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Pagination.java
@@ -55,27 +55,28 @@
  * <p>
  * The control can be customized to display numeric page indicators or bullet style indicators by
  * setting the style class {@link #STYLE_CLASS_BULLET}.  The
  * {@link #maxPageIndicatorCountProperty() maxPageIndicatorCountProperty} can be used to change
  * the maximum number of page indicators.  The property value can also be changed
- * via CSS using -fx-max-page-indicator-count.
+ * via CSS using {@code -fx-max-page-indicator-count}. By default, page indicator numbering starts from 1 (corresponding to
+ * page index 0).
  *</p>
  *
  * <h2>Page count</h2>
  * <p>
  * The {@link #pageCountProperty() pageCountProperty} controls the number of
  * pages this pagination control has.  If the page count is
- * not known {@link #INDETERMINATE} should be used as the page count.
+ * not known, {@link #INDETERMINATE} should be used as the page count.
  * </p>
  *
  * <h2>Page factory</h2>
  * <p>
  * The {@link #pageFactoryProperty() pageFactoryProperty} is a callback function
  * that is called when a page has been selected by the application or
  * the user.  The function is required for the functionality of the pagination
  * control.  The callback function should load and return the contents of the selected page.
- * Null should be returned if the selected page index does not exist.
+ * {@code null} should be returned if the selected page index does not exist.
  * </p>
  *
  * <h2>Creating a Pagination control:</h2>
  * <p>
  * A simple example of how to create a pagination control with ten pages and
@@ -84,16 +85,24 @@
  *
  * <pre><code> Pagination pagination = new Pagination(10, 0);
  * pagination.setPageFactory(new Callback&lt;Integer, Node&gt;() {
  *     &#064;Override
  *     public Node call(Integer pageIndex) {
- *         return new Label(pageIndex+1 + ". Lorem ipsum dolor sit amet,\n"
+ *         return new Label(pageIndex + 1 + ". Lorem ipsum dolor sit amet,\n"
  *                      + "consectetur adipiscing elit,\n"
  *                      + "sed do eiusmod tempor incididunt ut\n"
  *                      + "labore et dolore magna aliqua.");
  *     }
  * });</code></pre>
+ * or using lambdas
+ * <pre><code> Pagination pagination = new Pagination(10, 0);
+ * pagination.setPageFactory(pageIndex -&gt;
+ *         new Label(pageIndex + 1 + ". Lorem ipsum dolor sit amet,\n"
+ *                      + "consectetur adipiscing elit,\n"
+ *                      + "sed do eiusmod tempor incididunt ut\n"
+ *                      + "labore et dolore magna aliqua.");
+ * );</code></pre>
  *
  * <img src="doc-files/Pagination.png" alt="Image of the Pagination control">
  *
  * @since JavaFX 2.2
  */
diff a/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java b/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
--- a/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
+++ b/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
@@ -44,25 +44,25 @@
  * {@code KeyFrame.values}, are interpolated
  * to/from the targeted key values at the specified time of the {@code KeyFrame}
  * to {@code Timeline}'s initial position, depends on {@code Timeline}'s
  * direction.
  * <p>
- * {@code Timeline} processes individual {@code KeyFrame} at or after specified
- * time interval elapsed, it does not guarantee the timing when {@code KeyFrame}
+ * {@code Timeline} processes individual a {@code KeyFrame} at or after the specified
+ * time interval elapsed, it does not guarantee the exact time when a {@code KeyFrame}
  * is processed.
  * <p>
- * The {@link #cycleDurationProperty()} will be set to the largest time value
- * of Timeline's keyFrames.
- * <p>
  * If a {@code KeyFrame} is not provided for the {@code time==0s} instant, one
  * will be synthesized using the target values that are current at the time
- * {@link #play()} or {@link #playFromStart()} is called.
+ * {@link #play()} or {@link #playFromStart()} are called.
  * <p>
  * It is not possible to change the {@code keyFrames} of a running {@code Timeline}.
  * If the value of {@code keyFrames} is changed for a running {@code Timeline}, it
  * has to be stopped and started again to pick up the new value.
  * <p>
+ * The {@link #cycleDurationProperty()} will be set to the largest time value
+ * of Timeline's keyFrames.
+ * <p>
  * A simple Timeline can be created like this:
  * <pre> {@code final Timeline timeline = new Timeline();
  * timeline.setCycleCount(2);
  * timeline.setAutoReverse(true);
  * timeline.getKeyFrames().add(new KeyFrame(Duration.millis(5000),
@@ -114,52 +114,49 @@
             }
         }
     };
 
     /**
-     * The constructor of {@code Timeline}.
-     *
-     * This constructor allows to define a {@link Animation#targetFramerate}.
+     * Creates a {@code Timeline} with the provided key frames and a {@linkplain Animation#getTargetFramerate() target framerate}.
+     * The key frames do not need to be ordered.
      *
      * @param targetFramerate
-     *            The custom target frame rate for this {@code Timeline}
+     *            the custom target frame rate for this {@code Timeline}
      * @param keyFrames
-     *            The keyframes of this {@code Timeline}
+     *            the keyframes of this {@code Timeline}
      */
     public Timeline(double targetFramerate, KeyFrame... keyFrames) {
         super(targetFramerate);
         clipCore = new TimelineClipCore(this);
         getKeyFrames().setAll(keyFrames);
     }
 
     /**
-     * The constructor of {@code Timeline}.
+     * Creates a {@code Timeline} with the provided key frames. The key frames do not need to be ordered.
      *
      * @param keyFrames
-     *            The keyframes of this {@code Timeline}
+     *            the keyframes of this {@code Timeline}
      */
     public Timeline(KeyFrame... keyFrames) {
         super();
         clipCore = new TimelineClipCore(this);
         getKeyFrames().setAll(keyFrames);
     }
 
     /**
-     * The constructor of {@code Timeline}.
-     *
-     * This constructor allows to define a {@link Animation#targetFramerate}.
+     * Creates a {@code Timeline} with no key frames and a {@linkplain Animation#getTargetFramerate() target framerate}.
      *
      * @param targetFramerate
-     *            The custom target frame rate for this {@code Timeline}
+     *            the custom target frame rate for this {@code Timeline}
      */
     public Timeline(double targetFramerate) {
         super(targetFramerate);
         clipCore = new TimelineClipCore(this);
     }
 
     /**
-     * The constructor of {@code Timeline}.
+     * Creates a {@code Timeline} with no key frames.
      */
     public Timeline() {
         super();
         clipCore = new TimelineClipCore(this);
     }
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -308,11 +308,11 @@
  * A <b>scaling</b> transformation causes a node to either appear larger or
  * smaller depending on the scaling factor. Scaling alters the coordinate space
  * of the node such that each unit of distance along the axis in local
  * coordinates is multiplied by the scale factor. As with rotation
  * transformations, scaling transformations are applied about a "pivot" point.
- * You can think of this as the point in the Node around which you "zoom".  For
+ * You can think of this as the point in the {@code Node} around which you "zoom".  For
  * example, if you create a {@link javafx.scene.shape.Rectangle} with a
  * {@code strokeWidth} of 5, and a width and height of 50, and you apply a
  * {@link javafx.scene.transform.Scale} with scale factors (x=2.0, y=2.0) and
  * a pivot at the origin (pivotX=0, pivotY=0), the entire rectangle
  * (including the stroke) will double in size, growing to the right and
@@ -860,16 +860,17 @@
     private static final Object USER_DATA_KEY = new Object();
     // A map containing a set of properties for this node
     private ObservableMap<Object, Object> properties;
 
     /**
-      * Returns an observable map of properties on this node for use primarily
-      * by application developers.
-      *
-      * @return an observable map of properties on this node for use primarily
-      * by application developers
-      */
+     * Returns an observable map of properties on this node for use primarily by application developers.
+     *
+     * @return an observable map of properties on this node for use primarily by application developers
+     * @apiNote Layout managers use this map as well to specify layout constraints on the node, such as {@code HBox#setHgrow}, so the
+     *          developer should be mindful of clearing the map or overriding its values. These entries are not removed automatically
+     *          if the node is removed from the layout manager, so unused entries can exist throughout the life of the node.
+     */
      public final ObservableMap<Object, Object> getProperties() {
         if (properties == null) {
             properties = FXCollections.observableMap(new HashMap<Object, Object>());
         }
         return properties;
