diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Labeled.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package javafx.scene.control;
 
-
 import com.sun.javafx.css.StyleManager;
 import com.sun.javafx.scene.NodeHelper;
 import javafx.css.converter.BooleanConverter;
 import javafx.css.converter.EnumConverter;
 import javafx.css.converter.InsetsConverter;
@@ -66,11 +65,10 @@
 import javafx.css.StyleableDoubleProperty;
 import javafx.css.StyleableObjectProperty;
 import javafx.css.StyleableProperty;
 import javafx.css.StyleableStringProperty;
 
-
 /**
  * A Labeled {@link Control} is one which has as part of its user interface
  * a textual content associated with it. For example, a {@link Button} displays
  * {@code text}, as does a {@link Label}, a {@link Tooltip}, and many
  * other controls.
@@ -133,11 +131,13 @@
      * Properties                                                              *
      *                                                                         *
      **************************************************************************/
     /**
      * The text to display in the label. The text may be null.
+     *
      * @return the text to display in the label
+     * @defaultValue empty string
      */
     public final StringProperty textProperty() {
         if (text == null) {
             text = new SimpleStringProperty(this, "text", "");
         }
@@ -148,11 +148,13 @@
     public final String getText() { return text == null ? "" : text.getValue(); }
 
     /**
      * Specifies how the text and graphic within the Labeled should be
      * aligned when there is empty space within the Labeled.
+     *
      * @return the alignment within this labeled
+     * @defaultValue {@code Pos.CENTER_LEFT}
      */
     public final ObjectProperty<Pos> alignmentProperty() {
         if (alignment == null) {
             alignment = new StyleableObjectProperty<Pos>(Pos.CENTER_LEFT) {
 
@@ -180,11 +182,13 @@
 
     /**
      * Specifies the behavior for lines of text <em>when text is multiline</em>.
      * Unlike {@link #contentDisplayProperty} which affects the graphic and text, this setting
      * only affects multiple lines of text relative to the text bounds.
+     *
      * @return the alignment of lines of text within this labeled
+     * @defaultValue {@code TextAlignment.LEFT}
      */
     public final ObjectProperty<TextAlignment> textAlignmentProperty() {
         if (textAlignment == null) {
             textAlignment = new StyleableObjectProperty<TextAlignment>(TextAlignment.LEFT) {
 
@@ -211,11 +215,13 @@
     public final TextAlignment getTextAlignment() { return textAlignment == null ? TextAlignment.LEFT : textAlignment.getValue(); }
 
     /**
      * Specifies the behavior to use if the text of the {@code Labeled}
      * exceeds the available space for rendering the text.
+     *
      * @return the overrun behavior if the text exceeds the available space
+     * @defaultValue {@code OverrunStyle.ELLIPSIS}
      */
     public final ObjectProperty<OverrunStyle> textOverrunProperty() {
         if (textOverrun == null) {
             textOverrun = new StyleableObjectProperty<OverrunStyle>(OverrunStyle.ELLIPSIS) {
 
@@ -257,10 +263,11 @@
      * <p>Note that not all fonts support all Unicode characters.
      *
      * @return the ellipsis property on the string to display for the ellipsis
      * when text is truncated
      * @see <a href="http://en.wikipedia.org/wiki/Ellipsis#Computer_representations">Wikipedia:ellipsis</a>
+     * @defaultValue {@code "..."}
      * @since JavaFX 2.2
      */
     public final StringProperty ellipsisStringProperty() {
         if (ellipsisString == null) {
             ellipsisString = new StyleableStringProperty(DEFAULT_ELLIPSIS_STRING) {
@@ -285,11 +292,13 @@
 
 
     /**
      * If a run of text exceeds the width of the Labeled, then this variable
      * indicates whether the text should wrap onto another line.
+     *
      * @return the wrap property if a run of text exceeds the width of the Labeled
+     * @defaultValue {@code false}
      */
     public final BooleanProperty wrapTextProperty() {
         if (wrapText == null) {
             wrapText = new StyleableBooleanProperty() {
 
@@ -326,11 +335,13 @@
     /**
      * The default font to use for text in the Labeled. If the Label's text is
      * rich text then this font may or may not be used depending on the font
      * information embedded in the rich text, but in any case where a default
      * font is required, this font will be used.
+     *
      * @return the default font to use for text in this labeled
+     * @defaultValue {@link Font#getDefault()}
      */
     public final ObjectProperty<Font> fontProperty() {
 
         if (font == null) {
             font = new StyleableObjectProperty<Font>(Font.getDefault()) {
@@ -401,12 +412,14 @@
     /**
      * An optional icon for the Labeled. This can be positioned relative to the
      * text by using {@link #setContentDisplay}.  The node specified for this
      * variable cannot appear elsewhere in the scene graph, otherwise
      * the {@code IllegalArgumentException} is thrown.  See the class
-     * description of {@link javafx.scene.Node Node} for more detail.
+     * description of {@link Node} for more detail.
+     *
      * @return the optional icon for this labeled
+     * @defaultValue {@code null}
      */
     public final ObjectProperty<Node> graphicProperty() {
         if (graphic == null) {
             graphic = new StyleableObjectProperty<Node>() {
 
@@ -560,11 +573,13 @@
         return imageUrl;
     }
 
     /**
      * Whether all text should be underlined.
+     *
      * @return the underline property of all text in this labeled
+     * @defaultValue {@code false}
      */
     public final BooleanProperty underlineProperty() {
         if (underline == null) {
             underline = new StyleableBooleanProperty(false) {
 
@@ -590,11 +605,13 @@
     public final void setUnderline(boolean value) { underlineProperty().setValue(value); }
     public final boolean isUnderline() { return underline == null ? false : underline.getValue(); }
 
     /**
      * Specifies the space in pixel between lines.
+     *
      * @return the line spacing property between lines in this labeled
+     * @defaultValue 0
      * @since JavaFX 8.0
      */
     public final DoubleProperty lineSpacingProperty() {
         if (lineSpacing == null) {
             lineSpacing = new StyleableDoubleProperty(0) {
@@ -621,11 +638,13 @@
     public final void setLineSpacing(double value) { lineSpacingProperty().setValue(value); }
     public final double getLineSpacing() { return lineSpacing == null ? 0 : lineSpacing.getValue(); }
 
     /**
      * Specifies the positioning of the graphic relative to the text.
+     *
      * @return content display property of this labeled
+     * @defaultValue {@code ContentDisplay.LEFT}
      */
     public final ObjectProperty<ContentDisplay> contentDisplayProperty() {
         if (contentDisplay == null) {
             contentDisplay = new StyleableObjectProperty<ContentDisplay>(ContentDisplay.LEFT) {
 
@@ -655,11 +674,13 @@
      * The padding around the Labeled's text and graphic content.
      * By default labelPadding is Insets.EMPTY and cannot be set to null.
      * Subclasses may add nodes outside this padding and inside the Labeled's padding.
      *
      * This property can only be set from CSS.
-     * @return  the label padding property of this labeled
+     *
+     * @return the label padding property of this labeled
+     * @defaultValue {@code Insets.EMPTY}
      */
     public final ReadOnlyObjectProperty<Insets> labelPaddingProperty() {
         return labelPaddingPropertyImpl();
     }
     private ObjectProperty<Insets> labelPaddingPropertyImpl() {
@@ -700,11 +721,13 @@
     private void setLabelPadding(Insets value) { labelPaddingPropertyImpl().set(value); }
     public final Insets getLabelPadding() { return labelPadding == null ? Insets.EMPTY : labelPadding.get(); }
 
     /**
      * The amount of space between the graphic and text
+     *
      * @return the graphics text gap property of this labeled
+     * @defaultValue 4
      */
     public final DoubleProperty graphicTextGapProperty() {
         if (graphicTextGap == null) {
             graphicTextGap = new StyleableDoubleProperty(4) {
 
@@ -731,10 +754,12 @@
     public final double getGraphicTextGap() { return graphicTextGap == null ? 4 : graphicTextGap.getValue(); }
 
 
     /**
      * The {@link Paint} used to fill the text.
+     *
+     * @defaultValue {@code Color.BLACK}
      */
     private ObjectProperty<Paint> textFill; // TODO for now change this
 
     public final void setTextFill(Paint value) {
         textFillProperty().set(value);
@@ -774,14 +799,11 @@
      * parsed to see if it contains the mnemonic parsing character '_'.
      * When a mnemonic is detected the key combination will
      * be determined based on the succeeding character, and the mnemonic
      * added.
      *
-     * <p>
-     * The default value for Labeled is false, but it
-     * is enabled by default on some Controls.
-     * </p>
+     * @defaultValue {@code false}; {@code true} for some {@code Control}s.
      */
     private BooleanProperty mnemonicParsing;
     public final void setMnemonicParsing(boolean value) {
         mnemonicParsingProperty().set(value);
     }
