diff a/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java b/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
--- a/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
+++ b/modules/javafx.graphics/src/main/java/javafx/animation/Timeline.java
@@ -44,25 +44,25 @@
  * {@code KeyFrame.values}, are interpolated
  * to/from the targeted key values at the specified time of the {@code KeyFrame}
  * to {@code Timeline}'s initial position, depends on {@code Timeline}'s
  * direction.
  * <p>
- * {@code Timeline} processes individual {@code KeyFrame} at or after specified
- * time interval elapsed, it does not guarantee the timing when {@code KeyFrame}
+ * {@code Timeline} processes individual a {@code KeyFrame} at or after the specified
+ * time interval elapsed, it does not guarantee the exact time when a {@code KeyFrame}
  * is processed.
  * <p>
- * The {@link #cycleDurationProperty()} will be set to the largest time value
- * of Timeline's keyFrames.
- * <p>
  * If a {@code KeyFrame} is not provided for the {@code time==0s} instant, one
  * will be synthesized using the target values that are current at the time
- * {@link #play()} or {@link #playFromStart()} is called.
+ * {@link #play()} or {@link #playFromStart()} are called.
  * <p>
  * It is not possible to change the {@code keyFrames} of a running {@code Timeline}.
  * If the value of {@code keyFrames} is changed for a running {@code Timeline}, it
  * has to be stopped and started again to pick up the new value.
  * <p>
+ * The {@link #cycleDurationProperty()} will be set to the largest time value
+ * of Timeline's keyFrames.
+ * <p>
  * A simple Timeline can be created like this:
  * <pre> {@code final Timeline timeline = new Timeline();
  * timeline.setCycleCount(2);
  * timeline.setAutoReverse(true);
  * timeline.getKeyFrames().add(new KeyFrame(Duration.millis(5000),
@@ -114,52 +114,49 @@
             }
         }
     };
 
     /**
-     * The constructor of {@code Timeline}.
-     *
-     * This constructor allows to define a {@link Animation#targetFramerate}.
+     * Creates a {@code Timeline} with the provided key frames and a {@linkplain Animation#getTargetFramerate() target framerate}.
+     * The key frames do not need to be ordered.
      *
      * @param targetFramerate
-     *            The custom target frame rate for this {@code Timeline}
+     *            the custom target frame rate for this {@code Timeline}
      * @param keyFrames
-     *            The keyframes of this {@code Timeline}
+     *            the keyframes of this {@code Timeline}
      */
     public Timeline(double targetFramerate, KeyFrame... keyFrames) {
         super(targetFramerate);
         clipCore = new TimelineClipCore(this);
         getKeyFrames().setAll(keyFrames);
     }
 
     /**
-     * The constructor of {@code Timeline}.
+     * Creates a {@code Timeline} with the provided key frames. The key frames do not need to be ordered.
      *
      * @param keyFrames
-     *            The keyframes of this {@code Timeline}
+     *            the keyframes of this {@code Timeline}
      */
     public Timeline(KeyFrame... keyFrames) {
         super();
         clipCore = new TimelineClipCore(this);
         getKeyFrames().setAll(keyFrames);
     }
 
     /**
-     * The constructor of {@code Timeline}.
-     *
-     * This constructor allows to define a {@link Animation#targetFramerate}.
+     * Creates a {@code Timeline} with no key frames and a {@linkplain Animation#getTargetFramerate() target framerate}.
      *
      * @param targetFramerate
-     *            The custom target frame rate for this {@code Timeline}
+     *            the custom target frame rate for this {@code Timeline}
      */
     public Timeline(double targetFramerate) {
         super(targetFramerate);
         clipCore = new TimelineClipCore(this);
     }
 
     /**
-     * The constructor of {@code Timeline}.
+     * Creates a {@code Timeline} with no key frames.
      */
     public Timeline() {
         super();
         clipCore = new TimelineClipCore(this);
     }
