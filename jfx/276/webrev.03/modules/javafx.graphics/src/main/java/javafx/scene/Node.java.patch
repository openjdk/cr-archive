diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -308,11 +308,11 @@
  * A <b>scaling</b> transformation causes a node to either appear larger or
  * smaller depending on the scaling factor. Scaling alters the coordinate space
  * of the node such that each unit of distance along the axis in local
  * coordinates is multiplied by the scale factor. As with rotation
  * transformations, scaling transformations are applied about a "pivot" point.
- * You can think of this as the point in the Node around which you "zoom".  For
+ * You can think of this as the point in the {@code Node} around which you "zoom".  For
  * example, if you create a {@link javafx.scene.shape.Rectangle} with a
  * {@code strokeWidth} of 5, and a width and height of 50, and you apply a
  * {@link javafx.scene.transform.Scale} with scale factors (x=2.0, y=2.0) and
  * a pivot at the origin (pivotX=0, pivotY=0), the entire rectangle
  * (including the stroke) will double in size, growing to the right and
@@ -860,16 +860,17 @@
     private static final Object USER_DATA_KEY = new Object();
     // A map containing a set of properties for this node
     private ObservableMap<Object, Object> properties;
 
     /**
-      * Returns an observable map of properties on this node for use primarily
-      * by application developers.
-      *
-      * @return an observable map of properties on this node for use primarily
-      * by application developers
-      */
+     * Returns an observable map of properties on this node for use primarily by application developers.
+     *
+     * @return an observable map of properties on this node for use primarily by application developers
+     * @apiNote Layout managers use this map as well to specify layout constraints on the node, such as {@code HBox#setHgrow}, so the
+     *          developer should be mindful of clearing the map or overriding its values. These entries are not removed automatically
+     *          if the node is removed from the layout manager, so unused entries can exist throughout the life of the node.
+     */
      public final ObservableMap<Object, Object> getProperties() {
         if (properties == null) {
             properties = FXCollections.observableMap(new HashMap<Object, Object>());
         }
         return properties;
