diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -169,11 +169,10 @@
         allowReifiableTypesInInstanceof =
                 Feature.REIFIABLE_TYPES_INSTANCEOF.allowedInSource(source) &&
                 (!preview.isPreview(Feature.REIFIABLE_TYPES_INSTANCEOF) || preview.isEnabled());
         sourceName = source.name;
         useBeforeDeclarationWarning = options.isSet("useBeforeDeclarationWarning");
-        allowEmptyValues = options.isSet("allowEmptyValues");
         allowValueMemberCycles = options.isSet("allowValueMemberCycles");
 
         statInfo = new ResultInfo(KindSelector.NIL, Type.noType);
         varAssignmentInfo = new ResultInfo(KindSelector.ASG, Type.noType);
         unknownExprInfo = new ResultInfo(KindSelector.VAL, Type.noType);
@@ -215,15 +214,10 @@
      * Switch: warn about use of variable before declaration?
      * RFE: 6425594
      */
     boolean useBeforeDeclarationWarning;
 
-    /**
-     * Switch: Allow value types with no instance state?
-     */
-    boolean allowEmptyValues;
-
     /**
      * Switch: Allow value type member cycles?
      */
     boolean allowValueMemberCycles;
 
@@ -5426,18 +5420,13 @@
         chk.checkImplementations(tree);
 
         //check that a resource implementing AutoCloseable cannot throw InterruptedException
         checkAutoCloseable(tree.pos(), env, c.type);
 
-        boolean hasInstanceFields = false;
         for (List<JCTree> l = tree.defs; l.nonEmpty(); l = l.tail) {
             // Attribute declaration
             attribStat(l.head, env);
-
-            if (l.head.hasTag(VARDEF) && (TreeInfo.flags(l.head) & STATIC) == 0)
-                hasInstanceFields = true;
-
             // Check that declarations in inner classes are not static (JLS 8.1.2)
             // Make an exception for static constants.
             if (c.owner.kind != PCK &&
                 ((c.flags() & STATIC) == 0 || c.name == names.empty) &&
                 (TreeInfo.flags(l.head) & (STATIC | INTERFACE)) != 0) {
@@ -5447,13 +5436,10 @@
                     sym.kind != VAR ||
                     ((VarSymbol) sym).getConstValue() == null)
                     log.error(l.head.pos(), Errors.IclsCantHaveStaticDecl(c));
             }
         }
-        if (!allowEmptyValues && !hasInstanceFields && (c.flags() & (VALUE | SYNTHETIC)) == VALUE) {
-            log.error(tree.pos(), Errors.EmptyValueNotYet);
-        }
 
         // Check for cycles among non-initial constructors.
         chk.checkCyclicConstructors(tree);
 
         // Check for cycles among annotation elements.
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
@@ -3748,13 +3748,10 @@
     Potential null pollution from nullable type {0}
 
 compiler.err.with.field.operator.disallowed=\
     WithField operator is allowed only with -XDallowWithFieldOperator
 
-compiler.err.empty.value.not.yet=\
-    Inline types with zero instance size are not supported yet
-
 compiler.err.this.exposed.prematurely=\
     Inine type instance should not be passed around before being fully initialized
 
 compiler.warn.this.exposed.prematurely=\
     value based type instance should not be passed around before being fully initialized
diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java
@@ -32,11 +32,11 @@
  * @test
  * @key randomness
  * @summary Test inline type calling convention optimizations
  * @library /testlibrary /test/lib /compiler/whitebox /
  * @requires (os.simpleArch == "x64" | os.simpleArch == "aarch64")
- * @compile -XDallowEmptyValues TestCallingConvention.java
+ * @compile TestCallingConvention.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform
  * @run main/othervm/timeout=300 -Xbootclasspath/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions
  *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI
  *                               compiler.valhalla.inlinetypes.InlineTypeTest
  *                               compiler.valhalla.inlinetypes.TestCallingConvention
diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java
@@ -35,11 +35,11 @@
  * @key randomness
  * @summary Test inline types in LWorld.
  * @modules java.base/jdk.experimental.value
  * @library /testlibrary /test/lib /compiler/whitebox /
  * @requires (os.simpleArch == "x64" | os.simpleArch == "aarch64")
- * @compile -XDallowEmptyValues TestLWorld.java
+ * @compile TestLWorld.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform
  * @run main/othervm/timeout=300 -Xbootclasspath/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions
  *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI
  *                               compiler.valhalla.inlinetypes.InlineTypeTest
  *                               compiler.valhalla.inlinetypes.TestLWorld
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/EmptyInlineTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/EmptyInlineTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/EmptyInlineTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/EmptyInlineTest.java
@@ -28,11 +28,11 @@
 
 /*
  * @test
  * @summary Test support for empty inline types (no instance fields)
  * @library /test/lib
- * @compile -XDallowEmptyValues EmptyInlineTest.java
+ * @compile EmptyInlineTest.java
  * @run main/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.EmptyInlineTest
 
  */
 
 public class EmptyInlineTest {
diff a/test/langtools/tools/javac/diags/examples.not-yet.txt b/test/langtools/tools/javac/diags/examples.not-yet.txt
--- a/test/langtools/tools/javac/diags/examples.not-yet.txt
+++ b/test/langtools/tools/javac/diags/examples.not-yet.txt
@@ -203,11 +203,10 @@
 # Value types
 compiler.err.cyclic.value.type.membership
 compiler.err.value.does.not.support
 compiler.err.value.may.not.extend
 compiler.warn.potential.null.pollution
-compiler.err.empty.value.not.yet
 compiler.err.this.exposed.prematurely
 compiler.warn.this.exposed.prematurely
 compiler.err.inline.type.must.not.implement.identity.object
 compiler.err.concrete.supertype.for.inline.class
 compiler.err.super.class.cannot.be.inner
diff a/test/langtools/tools/javac/valhalla/lworld-values/BinarySuperclassConstraints.java b/test/langtools/tools/javac/valhalla/lworld-values/BinarySuperclassConstraints.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/BinarySuperclassConstraints.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/BinarySuperclassConstraints.java
@@ -1,11 +1,11 @@
 /*
  * @test /nodynamiccopyright/
  * @bug 8242900
  * @summary Verify various constraints for an inline class's BINARY super types.
- * @compile -XDallowEmptyValues -XDrawDiagnostics -XDdev SuperclassCollections.java
- * @compile/fail/ref=BinarySuperclassConstraints.out -XDallowEmptyValues -XDrawDiagnostics -XDdev BinarySuperclassConstraints.java
+ * @compile -XDrawDiagnostics -XDdev SuperclassCollections.java
+ * @compile/fail/ref=BinarySuperclassConstraints.out -XDrawDiagnostics -XDdev BinarySuperclassConstraints.java
  */
 
 public class BinarySuperclassConstraints {
 
     // -------------------------------------------------------------
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckClone.out b/test/langtools/tools/javac/valhalla/lworld-values/CheckClone.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckClone.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckClone.out
@@ -1,8 +1,6 @@
 CheckClone.java:11:21: compiler.err.value.does.not.support: clone
 CheckClone.java:12:18: compiler.err.value.does.not.support: clone
-CheckClone.java:9:18: compiler.err.empty.value.not.yet
 CheckClone.java:16:16: compiler.err.value.does.not.support: clone
 CheckClone.java:17:14: compiler.err.value.does.not.support: clone
 CheckClone.java:20:22: compiler.err.inline.class.may.not.override: clone
-CheckClone.java:8:14: compiler.err.empty.value.not.yet
-7 errors
+5 errors
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.java b/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.java
@@ -1,9 +1,11 @@
 /*
  * @test /nodynamiccopyright/
- * @summary Values may not extend a concrete type other than jlO
+ * @summary Values may not extend an identity class
  *
  * @compile/fail/ref=CheckExtends.out -XDrawDiagnostics CheckExtends.java
  */
 
 final inline class CheckExtends extends Object {
+    static class Nested {}
+    static inline class NestedValue extends Nested {}
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.out b/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckExtends.out
@@ -1,2 +1,2 @@
-CheckExtends.java:8:14: compiler.err.empty.value.not.yet
+CheckExtends.java:10:19: compiler.err.inline.type.must.not.implement.identity.object: CheckExtends.NestedValue
 1 error
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckFinal.out b/test/langtools/tools/javac/valhalla/lworld-values/CheckFinal.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckFinal.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckFinal.out
@@ -1,7 +1,7 @@
 CheckFinal.java:14:13: compiler.err.cant.assign.val.to.final.var: fi
 CheckFinal.java:15:13: compiler.err.cant.assign.val.to.final.var: fe
 CheckFinal.java:17:13: compiler.err.cant.assign.val.to.final.var: xsf
 CheckFinal.java:19:29: compiler.err.cant.inherit.from.final: CheckFinal
-CheckFinal.java:19:42: compiler.err.empty.value.not.yet
+CheckFinal.java:19:42: compiler.err.concrete.supertype.for.inline.class: compiler.misc.anonymous.class: CheckFinal$1, CheckFinal
 CheckFinal.java:19:25: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: CheckFinal, CheckFinal)
 6 errors
diff a/test/langtools/tools/javac/valhalla/lworld-values/EmptyValueTest.java b/test/langtools/tools/javac/valhalla/lworld-values/EmptyValueTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/EmptyValueTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/EmptyValueTest.java
@@ -1,9 +1,33 @@
 /*
- * @test /nodynamiccopyright/
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 8251504
  * @summary Test behavior with empty value type.
- * @compile/fail/ref=EmptyValueTest.out -XDrawDiagnostics -XDdev EmptyValueTest.java
- * @compile -XDrawDiagnostics -XDdev -XDallowEmptyValues EmptyValueTest.java
+ * @compile -XDrawDiagnostics -XDdev EmptyValueTest.java
  */
 public final inline class EmptyValueTest {
-    static int x;
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/EmptyValueTest.out b/test/langtools/tools/javac/valhalla/lworld-values/EmptyValueTest.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/EmptyValueTest.out
+++ /dev/null
@@ -1,2 +0,0 @@
-EmptyValueTest.java:7:21: compiler.err.empty.value.not.yet
-1 error
diff a/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationOnAnonymousClass.out b/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationOnAnonymousClass.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationOnAnonymousClass.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationOnAnonymousClass.out
@@ -1,3 +1,2 @@
 InlineAnnotationOnAnonymousClass.java:11:24: compiler.err.mod.not.allowed.here: inline
-InlineAnnotationOnAnonymousClass.java:12:29: compiler.err.empty.value.not.yet
-2 errors
+1 error
diff a/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationTest.java b/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/InlineAnnotationTest.java
@@ -1,10 +1,10 @@
 /*
  * @test /nodynamiccopyright/
  * @summary Check inlineness via __inline__ annotation
  * @bug 8222745
- * @compile/fail/ref=InlineAnnotationTest.out -XDallowEmptyValues -XDrawDiagnostics InlineAnnotationTest.java
+ * @compile/fail/ref=InlineAnnotationTest.out -XDrawDiagnostics InlineAnnotationTest.java
  */
 
 @__inline__
 class InlineAnnotationTest01 extends Object { 
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/SuperclassConstraints.java b/test/langtools/tools/javac/valhalla/lworld-values/SuperclassConstraints.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/SuperclassConstraints.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/SuperclassConstraints.java
@@ -1,10 +1,10 @@
 /*
  * @test /nodynamiccopyright/
  * @bug 8242900
  * @summary Verify various constraints for an inline class's super types.
- * @compile/fail/ref=SuperclassConstraints.out -XDallowEmptyValues -XDrawDiagnostics -XDdev SuperclassConstraints.java
+ * @compile/fail/ref=SuperclassConstraints.out -XDrawDiagnostics -XDdev SuperclassConstraints.java
  */
 
 public class SuperclassConstraints {
 
     // -------------------------------------------------------------
diff a/test/langtools/tools/javac/valhalla/lworld-values/TopInterfaceNegativeTest.out b/test/langtools/tools/javac/valhalla/lworld-values/TopInterfaceNegativeTest.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/TopInterfaceNegativeTest.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/TopInterfaceNegativeTest.out
@@ -6,9 +6,7 @@
 TopInterfaceNegativeTest.java:20:32: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)
 TopInterfaceNegativeTest.java:24:48: compiler.err.repeated.interface
 TopInterfaceNegativeTest.java:30:39: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)
 TopInterfaceNegativeTest.java:30:53: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)
 TopInterfaceNegativeTest.java:28:19: compiler.err.inline.type.must.not.implement.identity.object: TopInterfaceNegativeTest.V1
-TopInterfaceNegativeTest.java:29:19: compiler.err.empty.value.not.yet
-TopInterfaceNegativeTest.java:30:19: compiler.err.empty.value.not.yet
 TopInterfaceNegativeTest.java:33:13: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: TopInterfaceNegativeTest.V2, java.lang.IdentityObject)
-13 errors
+11 errors
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationOnAnonymousClass.out b/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationOnAnonymousClass.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationOnAnonymousClass.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationOnAnonymousClass.out
@@ -1,3 +1,2 @@
 ValueAnnotationOnAnonymousClass.java:11:24: compiler.err.mod.not.allowed.here: inline
-ValueAnnotationOnAnonymousClass.java:12:29: compiler.err.empty.value.not.yet
-2 errors
+1 error
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationTest.out b/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationTest.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationTest.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValueAnnotationTest.out
@@ -1,5 +1,3 @@
 ValueAnnotationTest.java:25:1: compiler.err.illegal.combination.of.modifiers: interface, inline
-ValueAnnotationTest.java:9:1: compiler.err.empty.value.not.yet
-ValueAnnotationTest.java:13:1: compiler.err.empty.value.not.yet
 ValueAnnotationTest.java:20:9: compiler.err.cant.assign.val.to.final.var: x
-4 errors
+2 errors
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValueModifierTest.out b/test/langtools/tools/javac/valhalla/lworld-values/ValueModifierTest.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValueModifierTest.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValueModifierTest.out
@@ -1,7 +1,5 @@
-ValueModifierTest.java:11:28: compiler.err.empty.value.not.yet
-ValueModifierTest.java:14:16: compiler.err.empty.value.not.yet
 ValueModifierTest.java:15:13: compiler.err.cant.inherit.from.final: value
-ValueModifierTest.java:15:21: compiler.err.empty.value.not.yet
+ValueModifierTest.java:15:21: compiler.err.concrete.supertype.for.inline.class: compiler.misc.anonymous.class: ValueModifierTest$2, value
 ValueModifierTest.java:16:20: compiler.err.cant.inherit.from.final: value
 ValueModifierTest.java:16:28: compiler.err.override.meth: (compiler.misc.cant.override: toString(), compiler.misc.anonymous.class: ValueModifierTest$3, toString(), value), final
-6 errors
+4 errors
