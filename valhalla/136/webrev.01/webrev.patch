diff a/src/hotspot/share/classfile/vmSymbols.hpp b/src/hotspot/share/classfile/vmSymbols.hpp
--- a/src/hotspot/share/classfile/vmSymbols.hpp
+++ b/src/hotspot/share/classfile/vmSymbols.hpp
@@ -673,10 +673,11 @@
   template(toFileURL_signature,                    "(Ljava/lang/String;)Ljava/net/URL;")                          \
   template(url_void_signature,                     "(Ljava/net/URL;)V")                                           \
                                                                                                                   \
   template(java_lang_invoke_ValueBootstrapMethods, "java/lang/invoke/ValueBootstrapMethods")                      \
   template(isSubstitutable_name,                   "isSubstitutable0")                                            \
+  template(invokeHashCode_name,                    "invokeHashCode")                                              \
                                                                                                                   \
   template(jdk_internal_vm_jni_SubElementSelector, "jdk/internal/vm/jni/SubElementSelector")                      \
   /*end*/
 
 // Here are all the intrinsics known to the runtime and the CI.
diff a/src/hotspot/share/memory/universe.cpp b/src/hotspot/share/memory/universe.cpp
--- a/src/hotspot/share/memory/universe.cpp
+++ b/src/hotspot/share/memory/universe.cpp
@@ -116,10 +116,11 @@
 LatestMethodCache* Universe::_loader_addClass_cache    = NULL;
 LatestMethodCache* Universe::_throw_illegal_access_error_cache = NULL;
 LatestMethodCache* Universe::_throw_no_such_method_error_cache = NULL;
 LatestMethodCache* Universe::_do_stack_walk_cache     = NULL;
 LatestMethodCache* Universe::_is_substitutable_cache  = NULL;
+LatestMethodCache* Universe::_inline_type_hash_code_cache = NULL;
 oop Universe::_out_of_memory_error_java_heap          = NULL;
 oop Universe::_out_of_memory_error_metaspace          = NULL;
 oop Universe::_out_of_memory_error_class_metaspace    = NULL;
 oop Universe::_out_of_memory_error_array_size         = NULL;
 oop Universe::_out_of_memory_error_gc_overhead_limit  = NULL;
@@ -233,10 +234,11 @@
   _loader_addClass_cache->metaspace_pointers_do(it);
   _throw_illegal_access_error_cache->metaspace_pointers_do(it);
   _throw_no_such_method_error_cache->metaspace_pointers_do(it);
   _do_stack_walk_cache->metaspace_pointers_do(it);
   _is_substitutable_cache->metaspace_pointers_do(it);
+  _inline_type_hash_code_cache->metaspace_pointers_do(it);
 }
 
 #define ASSERT_MIRROR_NULL(m) \
   assert(m == NULL, "archived mirrors should be NULL");
 
@@ -271,10 +273,11 @@
   _loader_addClass_cache->serialize(f);
   _throw_illegal_access_error_cache->serialize(f);
   _throw_no_such_method_error_cache->serialize(f);
   _do_stack_walk_cache->serialize(f);
   _is_substitutable_cache->serialize(f);
+  _inline_type_hash_code_cache->serialize(f);
 }
 
 void Universe::check_alignment(uintx size, uintx alignment, const char* name) {
   if (size < alignment || size % alignment != 0) {
     vm_exit_during_initialization(
@@ -705,10 +708,11 @@
   Universe::_loader_addClass_cache    = new LatestMethodCache();
   Universe::_throw_illegal_access_error_cache = new LatestMethodCache();
   Universe::_throw_no_such_method_error_cache = new LatestMethodCache();
   Universe::_do_stack_walk_cache = new LatestMethodCache();
   Universe::_is_substitutable_cache = new LatestMethodCache();
+  Universe::_inline_type_hash_code_cache = new LatestMethodCache();
 
 #if INCLUDE_CDS
   if (UseSharedSpaces) {
     // Read the data structures supporting the shared spaces (shared
     // system dictionary, symbol table, etc.).  After that, access to
@@ -863,10 +867,14 @@
   ResourceMark rm;
   initialize_known_method(_is_substitutable_cache,
                           SystemDictionary::ValueBootstrapMethods_klass(),
                           vmSymbols::isSubstitutable_name()->as_C_string(),
                           vmSymbols::object_object_boolean_signature(), true, CHECK);
+  initialize_known_method(_inline_type_hash_code_cache,
+                          SystemDictionary::ValueBootstrapMethods_klass(),
+                          vmSymbols::invokeHashCode_name()->as_C_string(),
+                          vmSymbols::object_int_signature(), true, CHECK);
 }
 
 void universe2_init() {
   EXCEPTION_MARK;
   Universe::genesis(CATCH);
diff a/src/hotspot/share/memory/universe.hpp b/src/hotspot/share/memory/universe.hpp
--- a/src/hotspot/share/memory/universe.hpp
+++ b/src/hotspot/share/memory/universe.hpp
@@ -117,10 +117,11 @@
   static LatestMethodCache* _loader_addClass_cache;    // method for registering loaded classes in class loader vector
   static LatestMethodCache* _throw_illegal_access_error_cache; // Unsafe.throwIllegalAccessError() method
   static LatestMethodCache* _throw_no_such_method_error_cache; // Unsafe.throwNoSuchMethodError() method
   static LatestMethodCache* _do_stack_walk_cache;      // method for stack walker callback
   static LatestMethodCache* _is_substitutable_cache;   // ValueBootstrapMethods.isSubstitutable() method
+  static LatestMethodCache* _inline_type_hash_code_cache;  // ValueBootstrapMethods.invokeHashCode() method
 
   // preallocated error objects (no backtrace)
   static oop          _out_of_memory_error_java_heap;
   static oop          _out_of_memory_error_metaspace;
   static oop          _out_of_memory_error_class_metaspace;
@@ -283,10 +284,11 @@
   static Method*      throw_no_such_method_error()    { return _throw_no_such_method_error_cache->get_method(); }
 
   static Method*      do_stack_walk_method()          { return _do_stack_walk_cache->get_method(); }
 
   static Method*      is_substitutable_method()       { return _is_substitutable_cache->get_method(); }
+  static Method*      inline_type_hash_code_method()  { return _inline_type_hash_code_cache->get_method(); }
 
   static oop          the_null_sentinel()             { return _the_null_sentinel;             }
   static address      the_null_sentinel_addr()        { return (address) &_the_null_sentinel;  }
 
   // Function to initialize these
diff a/src/hotspot/share/prims/jvm.cpp b/src/hotspot/share/prims/jvm.cpp
--- a/src/hotspot/share/prims/jvm.cpp
+++ b/src/hotspot/share/prims/jvm.cpp
@@ -656,11 +656,32 @@
 
 
 JVM_ENTRY(jint, JVM_IHashCode(JNIEnv* env, jobject handle))
   JVMWrapper("JVM_IHashCode");
   // as implemented in the classic virtual machine; return 0 if object is NULL
-  return handle == NULL ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;
+  if (handle == NULL) {
+    return 0;
+  }
+  oop obj = JNIHandles::resolve_non_null(handle);
+  if (EnableValhalla && InlineTypeIHashCodeViaMethod && obj->klass()->is_inline_klass()) {
+      JavaValue result(T_INT);
+      JavaCallArguments args;
+      Handle ho(THREAD, obj);
+      args.push_oop(ho);
+      methodHandle method(THREAD, Universe::inline_type_hash_code_method());
+      JavaCalls::call(&result, method, &args, THREAD);
+      if (HAS_PENDING_EXCEPTION) {
+        if (!PENDING_EXCEPTION->is_a(SystemDictionary::Error_klass())) {
+          Handle e(THREAD, PENDING_EXCEPTION);
+          CLEAR_PENDING_EXCEPTION;
+          THROW_MSG_CAUSE_(vmSymbols::java_lang_InternalError(), "Internal error in hashCode", e, false);
+        }
+      }
+      return result.get_jint();
+  } else {
+    return ObjectSynchronizer::FastHashCode(THREAD, obj);
+  }
 JVM_END
 
 
 JVM_ENTRY(void, JVM_MonitorWait(JNIEnv* env, jobject handle, jlong ms))
   JVMWrapper("JVM_MonitorWait");
diff a/src/hotspot/share/runtime/globals.hpp b/src/hotspot/share/runtime/globals.hpp
--- a/src/hotspot/share/runtime/globals.hpp
+++ b/src/hotspot/share/runtime/globals.hpp
@@ -2469,10 +2469,13 @@
           "Use platform unstable time where supported for timestamps only") \
                                                                             \
   product(bool, EnableValhalla, true,                                       \
           "Enable experimental Valhalla features")                          \
                                                                             \
+  product(bool, InlineTypeIHashCodeViaMethod, true,                         \
+         "Use generated hashCode for identity hash code")                   \
+                                                                            \
   product_pd(bool, InlineTypePassFieldsAsArgs,                              \
           "Pass each inline type field as an argument at calls")            \
                                                                             \
   product_pd(bool, InlineTypeReturnedAsFields,                              \
           "Return fields instead of an inline type reference")              \
diff a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
--- a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
+++ b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
@@ -191,10 +191,40 @@
                                  guardWithTest(IS_SAME_INLINE_CLASS.asType(mt),
                                                accumulator,
                                                instanceFalse));
         }
 
+        static MethodHandle inlineTypeHashCode(Class<?> type) {
+            assert type.isInlineClass();
+            MethodHandle target = dropArguments(constant(int.class, SALT), 0, type);
+            MethodHandle cls = dropArguments(constant(Class.class, type),0, type);
+            MethodHandle classHashCode = filterReturnValue(cls, hashCodeForType(Class.class));
+            MethodHandle combiner = filterArguments(HASH_COMBINER, 0, target, classHashCode);
+            // int v = SALT * 31 + type.hashCode();
+            MethodHandle init = permuteArguments(combiner, target.type(), 0, 0);
+            MethodHandles.Lookup lookup = new MethodHandles.Lookup(type);
+            MethodHandle[] getters = MethodHandleBuilder.getters(lookup);
+            MethodHandle iterations = dropArguments(constant(int.class, getters.length), 0, type);
+            MethodHandle[] hashers = new MethodHandle[getters.length];
+            for (int i=0; i < getters.length; i++) {
+                MethodHandle getter = getters[i];
+                // For inline type or reference type, this calls Objects::hashCode.
+                // If the instance is of inline type and the hashCode method is not
+                // overridden, VM will call invokeHashCode to compute the
+                // hash code.
+                MethodHandle hasher = hashCodeForType(getter.type().returnType());
+                hashers[i] = filterReturnValue(getter, hasher);
+            }
+
+            // for (int i=0; i < getters.length; i++) {
+            //   v = computeHash(v, i, a);
+            // }
+            MethodHandle body = COMPUTE_HASH.bindTo(hashers)
+                    .asType(methodType(int.class, int.class, int.class, type));
+            return countedLoop(iterations, init, body);
+        }
+
         // ------ utility methods ------
         private static boolean eq(byte a, byte b)       { return a == b; }
         private static boolean eq(short a, short b)     { return a == b; }
         private static boolean eq(char a, char b)       { return a == b; }
         private static boolean eq(int a, int b)         { return a == b; }
@@ -363,32 +393,11 @@
 
     /*
      * Produces a method handle that computes the hashcode
      */
     private static MethodHandle hashCodeInvoker(Lookup lookup, String name, MethodType mt) {
-        Class<?> type = lookup.lookupClass();
-        MethodHandle target = dropArguments(constant(int.class, SALT), 0, type);
-        MethodHandle cls = dropArguments(constant(Class.class, type),0, type);
-        MethodHandle classHashCode = filterReturnValue(cls, hashCodeForType(Class.class));
-        MethodHandle combiner = filterArguments(HASH_COMBINER, 0, target, classHashCode);
-        // int v = SALT * 31 + type.hashCode();
-        MethodHandle init = permuteArguments(combiner, target.type(), 0, 0);
-        MethodHandle[] getters = MethodHandleBuilder.getters(lookup);
-        MethodHandle iterations = dropArguments(constant(int.class, getters.length), 0, type);
-        MethodHandle[] hashers = new MethodHandle[getters.length];
-        for (int i=0; i < getters.length; i++) {
-            MethodHandle getter = getters[i];
-            MethodHandle hasher = hashCodeForType(getter.type().returnType());
-            hashers[i] = filterReturnValue(getter, hasher);
-        }
-
-        // for (int i=0; i < getters.length; i++) {
-        //   v = computeHash(v, i, a);
-        // }
-        MethodHandle body = COMPUTE_HASH.bindTo(hashers)
-                                        .asType(methodType(int.class, int.class, int.class, type));
-        return countedLoop(iterations, init, body);
+        return inlineTypeHashCode(lookup.lookupClass());
     }
 
     /*
      * Produces a method handle that invokes the toString method of a value object.
      */
@@ -456,10 +465,37 @@
 
     private static LinkageError newLinkageError(Throwable e) {
         return (LinkageError) new LinkageError().initCause(e);
     }
 
+    /**
+     * Invoke the bootstrap methods hashCode for the given instance.
+     * @param o the instance to hash.
+     * @return the hash code of the given instance {code o}.
+     */
+    private static int invokeHashCode(Object o) {
+        try {
+            Class<?> type = o.getClass();
+            // Note: javac disallows user to call super.hashCode if user implementated
+            // risk for recursion for experts crafting byte-code
+            if (!type.isInlineClass())
+                throw new InternalError("must be inline type: " + type.getName());
+            return (int) HASHCODE_METHOD_HANDLES.get(type).invoke(o);
+        } catch (Error|RuntimeException e) {
+            throw e;
+        } catch (Throwable e) {
+            if (VERBOSE) e.printStackTrace();
+            throw new InternalError(e);
+        }
+    }
+
+    private static ClassValue<MethodHandle> HASHCODE_METHOD_HANDLES = new ClassValue<>() {
+        @Override protected MethodHandle computeValue(Class<?> type) {
+            return MethodHandleBuilder.inlineTypeHashCode(type);
+        }
+    };
+
     /**
      * Returns {@code true} if the arguments are <em>substitutable</em> to each
      * other and {@code false} otherwise.
      * <em>Substitutability</em> means that they cannot be distinguished from
      * each other in any data-dependent way, meaning that it is safe to substitute
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
@@ -1161,11 +1161,11 @@
 
         /** Add the implicit members for a value type to the parse tree and the symbol table.
          */
         private void addValueMembers(JCClassDecl tree, Env<AttrContext> env) {
 
-            boolean requireHashCode = true, requireEquals = true, requireToString = true;
+            boolean requireToString = true;
 
             for (JCTree def : tree.defs) {
                 if (def.getTag() == METHODDEF) {
                     JCMethodDecl methodDecl = (JCMethodDecl)def;
                     if (methodDecl.sym != null
@@ -1174,20 +1174,13 @@
                             && (methodDecl.sym.flags() & STATIC) == 0) {
                         final List<Type> parameterTypes = methodDecl.sym.type.getParameterTypes();
                         switch (parameterTypes.size()) {
                             case 0:
                                 String name = methodDecl.name.toString();
-                                if (name.equals("hashCode"))
-                                    requireHashCode = false;
-                                else if (name.equals("toString"))
+                                if (name.equals("toString"))
                                     requireToString = false;
                                 break;
-                            case 1:
-                                name = methodDecl.name.toString();
-                                if (name.equals("equals") && parameterTypes.head.tsym == syms.objectType.tsym)
-                                    requireEquals = false;
-                                break;
                         }
                     }
                 }
             }
 
@@ -1198,40 +1191,10 @@
                             null,
                             make.Ident(names.fromString("RuntimeException")),
                             List.of(make.Literal(CLASS, "Internal error: This method must have been replaced by javac")),
                             null))));
 
-            if (requireHashCode) {
-                // public int hashCode() { throw new RuntimeException(message); }
-                JCMethodDecl hashCode = make.
-                        MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
-                                names.hashCode,
-                                make.TypeIdent(TypeTag.INT),
-                                List.nil(),
-                                List.nil(),
-                                List.nil(), // thrown
-                                body,
-                                null);
-                memberEnter.memberEnter(hashCode, env);
-                tree.defs = tree.defs.append(hashCode);
-            }
-
-            if (requireEquals) {
-                // public boolean equals(Object o) { throw new RuntimeException(message); }
-                JCMethodDecl equals = make.
-                        MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
-                                names.equals,
-                                make.TypeIdent(TypeTag.BOOLEAN),
-                                List.nil(),
-                                List.of(make.VarDef(make.Modifiers(PARAMETER), names.fromString("o"), make.Ident(names.fromString("Object")), null )),
-                                List.nil(), // thrown
-                                body,
-                                null);
-                memberEnter.memberEnter(equals, env);
-                tree.defs = tree.defs.append(equals);
-            }
-
             if (requireToString) {
                 // public String toString() { throw new RuntimeException(message); }
                 JCMethodDecl toString = make.
                         MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
                                 names.toString,
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java
@@ -1082,20 +1082,10 @@
         private void synthesizeValueMethod(JCMethodDecl methodDecl) {
 
             Name name; List<Type> argTypes; Type resType;
 
             switch (methodDecl.name.toString()) {
-                case "hashCode":
-                    name = names.hashCode;
-                    argTypes = List.of(methodDecl.sym.owner.type);
-                    resType = methodDecl.restype.type;
-                    break;
-                case "equals":
-                    name = names.equals;
-                    argTypes = List.of(methodDecl.sym.owner.type, syms.objectType);
-                    resType = methodDecl.restype.type;
-                    break;
                 case "toString":
                     name = names.toString;
                     argTypes = List.of(methodDecl.sym.owner.type);
                     resType = methodDecl.restype.type;
                     break;
@@ -1123,23 +1113,11 @@
                     syms.noSymbol,
                     ((MethodSymbol)bsm).asHandle(),
                     indyType,
                     List.nil().toArray(new LoadableConstant[0]));
 
-
             switch (methodDecl.name.toString()) {
-                case "hashCode":
-                    code.emitop0(aload_0);
-                    items.makeDynamicItem(dynSym).invoke();
-                    code.emitop0(ireturn);
-                    return;
-                case "equals":
-                    code.emitop0(aload_0);
-                    code.emitop0(aload_1);
-                    items.makeDynamicItem(dynSym).invoke();
-                    code.emitop0(ireturn);
-                    return;
                 case "toString":
                     code.emitop0(aload_0);
                     items.makeDynamicItem(dynSym).invoke();
                     code.emitop0(areturn);
                     return;
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java
@@ -31,15 +31,15 @@
  * @summary Check object method implemented by the VM behave with inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
  * @compile -XDallowWithFieldOperator ObjectMethods.java
- * @run main/othervm -Xint -XX:+UseBiasedLocking -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
- * @run main/othervm -Xint -XX:-UseBiasedLocking -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
+ * @run main/othervm -Xint -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
+ * @run main/othervm -Xint -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
  * @run main/othervm -Xint -noverify runtime.valhalla.inlinetypes.ObjectMethods noverify
- * @run main/othervm -Xcomp -XX:+UseBiasedLocking -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
- * @run main/othervm -Xcomp -XX:-UseBiasedLocking -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
+ * @run main/othervm -Xcomp -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
+ * @run main/othervm -Xcomp -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
  * @run main/othervm -Xcomp -noverify runtime.valhalla.inlinetypes.ObjectMethods noverify
  */
 
 public class ObjectMethods {
 
@@ -87,12 +87,18 @@
         }
     }
 
     // Just check we don't crash the VM
     static void checkHashCodes(Object val, int expectedHashCode) {
-        if (val.hashCode() != expectedHashCode) {
-            throw new RuntimeException("Hash code mismatch value: " + val.hashCode() +
+        int hash = val.hashCode();
+        if (hash != expectedHashCode) {
+            throw new RuntimeException("Hash code mismatch value: " + hash +
+                                       " expected: " + expectedHashCode);
+        }
+        hash = System.identityHashCode(val);
+        if (hash != expectedHashCode) {
+            throw new RuntimeException("Identity hash code mismatch value: " + hash +
                                        " expected: " + expectedHashCode);
         }
     }
 
     static void checkNotCloneable(MyInt val) {
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UnsafeTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UnsafeTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UnsafeTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UnsafeTest.java
@@ -43,64 +43,44 @@
     static final Unsafe U = Unsafe.getUnsafe();
 
     static inline class Value1 {
         Point point;
         Point[] array;
-        Value1() {
-            this.point = Point.createPoint(1, 1);
-            this.array = new Point[0];
-        }
-
-        static Value1 create(Point p, Point... points) {
-            Value1 o = Value1.default;
-            o = __WithField(o.point, p);
-            o = __WithField(o.array, points);
-            return o;
+        Value1(Point p, Point... points) {
+            this.point = p;
+            this.array = points;
         }
     }
 
     static inline class Value2 {
         int i;
         Value1 v;
 
-        Value2() {
-            this.i = 0;
-            this.v = Value1.create(Point.createPoint(0,0), new Point[0]);
-        }
-
-        static Value2 create(Value1 v, int i) {
-            Value2 o = Value2.default;
-            o = __WithField(o.v, v);
-            o = __WithField(o.i, i);
-            return o;
+        Value2(Value1 v, int i) {
+            this.v = v;
+            this.i = i;
         }
     }
 
     static inline class Value3 {
         Object o;
         Value2 v;
 
-        Value3() {
-            this.v = Value2.create(Value1.create(Point.createPoint(0,0), new Point[0]), 0);
-            this.o = new Object();
+        Value3(Value2 v, Object ref) {
+            this.v = v;
+            this.o = ref;
         }
 
-        static Value3 create(Value2 v, Object ref) {
-            Value3 o = Value3.default;
-            o = __WithField(o.v, v);
-            o = __WithField(o.o, ref);
-            return o;
-        }
     }
 
 
     public static void main(String[] args) throws Throwable {
         printValueClass(Value3.class, 0);
 
-        Value1 v1 = Value1.create(Point.createPoint(10,10), Point.createPoint(20,20), Point.createPoint(30,30));
-        Value2 v2 = Value2.create(v1, 20);
-        Value3 v3 = Value3.create(v2, List.of("Value3"));
+        Value1 v1 = new Value1(Point.createPoint(10,10), Point.createPoint(20,20), Point.createPoint(30,30));
+        Value2 v2 = new Value2(v1, 20);
+        Value3 v3 = new Value3(v2, List.of("Value3"));
         long off_o = U.objectFieldOffset(Value3.class, "o");
         long off_v = U.objectFieldOffset(Value3.class, "v");
         long off_i = U.objectFieldOffset(Value2.class, "i");
         long off_v2 = U.objectFieldOffset(Value2.class, "v");
 
@@ -116,15 +96,16 @@
          *                        Value1
          *
          *                   ^-------------------^
          *                    Value2
          */
+        List<String> list = List.of("Value1", "Value2", "Value3");
         Value3 v = v3;
         try {
             v = U.makePrivateBuffer(v);
             // patch v3.o
-            U.putObject(v, off_o, List.of("Value1", "Value2", "Value3"));
+            U.putObject(v, off_o, list);
             // patch v3.v.i;
             U.putInt(v, off_v + off_i - U.valueHeaderSize(Value2.class), 999);
             // patch v3.v.v.point
             U.putValue(v, off_v + off_v2 - U.valueHeaderSize(Value2.class) + off_point - U.valueHeaderSize(Value1.class),
                        Point.class, Point.createPoint(100, 100));
@@ -132,16 +113,16 @@
             v = U.finishPrivateBuffer(v);
         }
 
         assertEquals(v.v.v.point, Point.createPoint(100, 100));
         assertEquals(v.v.i, 999);
-        assertEquals(v.o, List.of("Value1", "Value2", "Value3"));
+        assertEquals(v.o, list);
         assertEquals(v.v.v.array, v1.array);
 
-        Value1 nv1 = Value1.create(Point.createPoint(70,70), Point.createPoint(80,80), Point.createPoint(90,90));
-        Value2 nv2 = Value2.create(nv1, 100);
-        Value3 nv3 = Value3.create(nv2, List.of("Value1", "Value2", "Value3"));
+        Value1 nv1 = new Value1(Point.createPoint(70,70), Point.createPoint(80,80), Point.createPoint(90,90));
+        Value2 nv2 = new Value2(nv1, 100);
+        Value3 nv3 = new Value3(nv2, list);
 
         try {
             v = U.makePrivateBuffer(v);
             // patch v3.v
             U.putValue(v, off_v2, Value2.class, nv2);
diff a/test/jdk/valhalla/valuetypes/ValueBootstrapMethods.java b/test/jdk/valhalla/valuetypes/ValueBootstrapMethods.java
--- a/test/jdk/valhalla/valuetypes/ValueBootstrapMethods.java
+++ b/test/jdk/valhalla/valuetypes/ValueBootstrapMethods.java
@@ -50,57 +50,51 @@
 public class ValueBootstrapMethods {
     private static final String TEST_CLASSES = System.getProperty("test.classes", ".");
 
     public static void main(String... args) throws Throwable {
         Class<?> test = valueTestClass();
-        Value value = Value.make(10, 5.03, "foo", "bar", "goo");
+        Value value = new Value(10, 5.03, "foo", "bar", "goo");
 
         Class<?> valueClass = Value.class;
         Method hashCode = test.getMethod("hashCode", valueClass);
         int hash = (int)hashCode.invoke(null, value);
+        assertEquals(hash, value.localHashCode());
         assertEquals(hash, value.hashCode());
 
         Method toString = test.getMethod("toString", valueClass);
         String s = (String)toString.invoke(null, value);
+        assertEquals(s, value.localToString());
         assertEquals(s, value.toString());
 
         Method equals = test.getMethod("equals", valueClass, Object.class);
         boolean rc = (boolean)equals.invoke(null, value, value);
         if (!rc) {
             throw new RuntimeException("expected equals");
         }
     }
 
-    public static final inline class Value {
+    public static inline class Value {
         private final int i;
         private final double d;
         private final String s;
         private final List<String> l;
-        Value() {
-            this.i = 0;
-            this.d = 0;
-            this.s = "default";
-            this.l = List.of();
-        }
-        public static Value make(int i, double d, String s, String... items) {
-            Value v = Value.default;
-            v = __WithField(v.i, i);
-            v = __WithField(v.d, d);
-            v = __WithField(v.s, s);
-            v = __WithField(v.l, List.of(items));
-            return v;
+        Value(int i, double d, String s, String... items) {
+            this.i = i;
+            this.d = d;
+            this.s = s;
+            this.l = List.of(items);
         }
 
         List<Object> values() {
             return List.of(Value.class, i, d, s, l);
         }
 
-        public int hashCode() {
+        public int localHashCode() {
             return values().hashCode();
         }
 
-        public String toString() {
+        public String localToString() {
             System.out.println(l);
             return String.format("[%s i=%s d=%s s=%s l=%s]", Value.class.getName(),
                                  i, String.valueOf(d), s, l.toString());
         }
     }
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java b/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java
@@ -56,10 +56,21 @@
         public String localToString() {
             System.out.println(l);
             return String.format("[%s i=%s d=%s s=%s l=%s]", Value.class.getName(),
                                  i, String.valueOf(d), s, l.toString());
         }
+
+        @Override
+        public boolean equals(Object obj) {
+            if (obj instanceof Value) {
+                Value v = (Value)obj;
+                return this.i == v.i && this.d == v.d &&
+                        Objects.equals(this.s, v.s) &&
+                        Objects.equals(this.l, this.l);
+            }
+            return false;
+        }
     }
 
     private static void assertEquals(Object o1, Object expected) {
         if (!Objects.equals(o1, expected)) {
             throw new RuntimeException(o1 + " expected: " + expected);
@@ -71,20 +82,26 @@
         Value value = new Value(10, 5.03, "foo", "bar", "goo");
 
         assertEquals(value.localHashCode(), value.hashCode());
         assertEquals(value.localToString(), value.toString());
 
-        if (!value.equals(value)) {
-            throw new RuntimeException("expected equals");
+        // verify ifacmp and the overridden equals method
+
+        // same instance
+        if (value != value || !value.equals(value)) {
+            throw new RuntimeException("expected == and equals");
         }
 
+        // value and v2 are of different values
         Value v2 = new Value(20, 5.03, "foo", "bar", "goo");
-        if (value.equals(v2)) {
-            throw new RuntimeException("expected unequals");
+        if (value == v2 || value.equals(v2)) {
+            throw new RuntimeException("expected != and unequals");
         }
 
+        // v2 and v3 are of different values but Value::equals 
+        // returns true because v2::l and v3::l field contain the same elements
         Value v3 = new Value(20, 5.03, "foo", "bar", "goo");
-        if (!v2.equals(v3)) {
-            throw new RuntimeException("expected equals");
+        if (v2 == v3 || !v2.equals(v3)) {
+            throw new RuntimeException("expected != and equals");
         }
     }
 }
