diff a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
--- a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
+++ b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
@@ -191,10 +191,40 @@
                                  guardWithTest(IS_SAME_INLINE_CLASS.asType(mt),
                                                accumulator,
                                                instanceFalse));
         }
 
+        static MethodHandle inlineTypeHashCode(Class<?> type) {
+            assert type.isInlineClass();
+            MethodHandle target = dropArguments(constant(int.class, SALT), 0, type);
+            MethodHandle cls = dropArguments(constant(Class.class, type),0, type);
+            MethodHandle classHashCode = filterReturnValue(cls, hashCodeForType(Class.class));
+            MethodHandle combiner = filterArguments(HASH_COMBINER, 0, target, classHashCode);
+            // int v = SALT * 31 + type.hashCode();
+            MethodHandle init = permuteArguments(combiner, target.type(), 0, 0);
+            MethodHandles.Lookup lookup = new MethodHandles.Lookup(type);
+            MethodHandle[] getters = MethodHandleBuilder.getters(lookup);
+            MethodHandle iterations = dropArguments(constant(int.class, getters.length), 0, type);
+            MethodHandle[] hashers = new MethodHandle[getters.length];
+            for (int i=0; i < getters.length; i++) {
+                MethodHandle getter = getters[i];
+                // For inline type or reference type, this calls Objects::hashCode.
+                // If the instance is of inline type and the hashCode method is not
+                // overridden, VM will call invokeHashCode to compute the
+                // hash code.
+                MethodHandle hasher = hashCodeForType(getter.type().returnType());
+                hashers[i] = filterReturnValue(getter, hasher);
+            }
+
+            // for (int i=0; i < getters.length; i++) {
+            //   v = computeHash(v, i, a);
+            // }
+            MethodHandle body = COMPUTE_HASH.bindTo(hashers)
+                    .asType(methodType(int.class, int.class, int.class, type));
+            return countedLoop(iterations, init, body);
+        }
+
         // ------ utility methods ------
         private static boolean eq(byte a, byte b)       { return a == b; }
         private static boolean eq(short a, short b)     { return a == b; }
         private static boolean eq(char a, char b)       { return a == b; }
         private static boolean eq(int a, int b)         { return a == b; }
@@ -363,32 +393,11 @@
 
     /*
      * Produces a method handle that computes the hashcode
      */
     private static MethodHandle hashCodeInvoker(Lookup lookup, String name, MethodType mt) {
-        Class<?> type = lookup.lookupClass();
-        MethodHandle target = dropArguments(constant(int.class, SALT), 0, type);
-        MethodHandle cls = dropArguments(constant(Class.class, type),0, type);
-        MethodHandle classHashCode = filterReturnValue(cls, hashCodeForType(Class.class));
-        MethodHandle combiner = filterArguments(HASH_COMBINER, 0, target, classHashCode);
-        // int v = SALT * 31 + type.hashCode();
-        MethodHandle init = permuteArguments(combiner, target.type(), 0, 0);
-        MethodHandle[] getters = MethodHandleBuilder.getters(lookup);
-        MethodHandle iterations = dropArguments(constant(int.class, getters.length), 0, type);
-        MethodHandle[] hashers = new MethodHandle[getters.length];
-        for (int i=0; i < getters.length; i++) {
-            MethodHandle getter = getters[i];
-            MethodHandle hasher = hashCodeForType(getter.type().returnType());
-            hashers[i] = filterReturnValue(getter, hasher);
-        }
-
-        // for (int i=0; i < getters.length; i++) {
-        //   v = computeHash(v, i, a);
-        // }
-        MethodHandle body = COMPUTE_HASH.bindTo(hashers)
-                                        .asType(methodType(int.class, int.class, int.class, type));
-        return countedLoop(iterations, init, body);
+        return inlineTypeHashCode(lookup.lookupClass());
     }
 
     /*
      * Produces a method handle that invokes the toString method of a value object.
      */
@@ -456,10 +465,37 @@
 
     private static LinkageError newLinkageError(Throwable e) {
         return (LinkageError) new LinkageError().initCause(e);
     }
 
+    /**
+     * Invoke the bootstrap methods hashCode for the given instance.
+     * @param o the instance to hash.
+     * @return the hash code of the given instance {code o}.
+     */
+    private static int invokeHashCode(Object o) {
+        try {
+            Class<?> type = o.getClass();
+            // Note: javac disallows user to call super.hashCode if user implementated
+            // risk for recursion for experts crafting byte-code
+            if (!type.isInlineClass())
+                throw new InternalError("must be inline type: " + type.getName());
+            return (int) HASHCODE_METHOD_HANDLES.get(type).invoke(o);
+        } catch (Error|RuntimeException e) {
+            throw e;
+        } catch (Throwable e) {
+            if (VERBOSE) e.printStackTrace();
+            throw new InternalError(e);
+        }
+    }
+
+    private static ClassValue<MethodHandle> HASHCODE_METHOD_HANDLES = new ClassValue<>() {
+        @Override protected MethodHandle computeValue(Class<?> type) {
+            return MethodHandleBuilder.inlineTypeHashCode(type);
+        }
+    };
+
     /**
      * Returns {@code true} if the arguments are <em>substitutable</em> to each
      * other and {@code false} otherwise.
      * <em>Substitutability</em> means that they cannot be distinguished from
      * each other in any data-dependent way, meaning that it is safe to substitute
