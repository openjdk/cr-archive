diff a/src/hotspot/share/runtime/synchronizer.cpp b/src/hotspot/share/runtime/synchronizer.cpp
--- a/src/hotspot/share/runtime/synchronizer.cpp
+++ b/src/hotspot/share/runtime/synchronizer.cpp
@@ -1011,16 +1011,12 @@
   return value;
 }
 
 intptr_t ObjectSynchronizer::FastHashCode(Thread* self, oop obj) {
   if (EnableValhalla && obj->klass()->is_inline_klass()) {
-    // Expected tooling to override hashCode for inline type, just don't crash
-    if (log_is_enabled(Debug, monitorinflation)) {
-      ResourceMark rm;
-      log_debug(monitorinflation)("FastHashCode for value type: %s", obj->klass()->external_name());
-    }
-    return obj->klass()->java_mirror()->identity_hash();
+    // VM should be calling bootstrap method
+    ShouldNotReachHere();
   }
   if (UseBiasedLocking) {
     // NOTE: many places throughout the JVM do not expect a safepoint
     // to be taken here, in particular most operations on perm gen
     // objects. However, we only ever bias Java instances and all of
