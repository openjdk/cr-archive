diff a/src/hotspot/share/classfile/vmSymbols.hpp b/src/hotspot/share/classfile/vmSymbols.hpp
--- a/src/hotspot/share/classfile/vmSymbols.hpp
+++ b/src/hotspot/share/classfile/vmSymbols.hpp
@@ -673,11 +673,11 @@
   template(toFileURL_signature,                    "(Ljava/lang/String;)Ljava/net/URL;")                          \
   template(url_void_signature,                     "(Ljava/net/URL;)V")                                           \
                                                                                                                   \
   template(java_lang_invoke_ValueBootstrapMethods, "java/lang/invoke/ValueBootstrapMethods")                      \
   template(isSubstitutable_name,                   "isSubstitutable0")                                            \
-  template(invokeHashCode_name,                    "invokeHashCode")                                              \
+  template(inlineObjectHashCode_name,              "inlineObjectHashCode")                                        \
                                                                                                                   \
   template(jdk_internal_vm_jni_SubElementSelector, "jdk/internal/vm/jni/SubElementSelector")                      \
   /*end*/
 
 // Here are all the intrinsics known to the runtime and the CI.
diff a/src/hotspot/share/memory/universe.cpp b/src/hotspot/share/memory/universe.cpp
--- a/src/hotspot/share/memory/universe.cpp
+++ b/src/hotspot/share/memory/universe.cpp
@@ -869,11 +869,11 @@
                           SystemDictionary::ValueBootstrapMethods_klass(),
                           vmSymbols::isSubstitutable_name()->as_C_string(),
                           vmSymbols::object_object_boolean_signature(), true, CHECK);
   initialize_known_method(_inline_type_hash_code_cache,
                           SystemDictionary::ValueBootstrapMethods_klass(),
-                          vmSymbols::invokeHashCode_name()->as_C_string(),
+                          vmSymbols::inlineObjectHashCode_name()->as_C_string(),
                           vmSymbols::object_int_signature(), true, CHECK);
 }
 
 void universe2_init() {
   EXCEPTION_MARK;
diff a/src/hotspot/share/memory/universe.hpp b/src/hotspot/share/memory/universe.hpp
--- a/src/hotspot/share/memory/universe.hpp
+++ b/src/hotspot/share/memory/universe.hpp
@@ -117,11 +117,11 @@
   static LatestMethodCache* _loader_addClass_cache;    // method for registering loaded classes in class loader vector
   static LatestMethodCache* _throw_illegal_access_error_cache; // Unsafe.throwIllegalAccessError() method
   static LatestMethodCache* _throw_no_such_method_error_cache; // Unsafe.throwNoSuchMethodError() method
   static LatestMethodCache* _do_stack_walk_cache;      // method for stack walker callback
   static LatestMethodCache* _is_substitutable_cache;   // ValueBootstrapMethods.isSubstitutable() method
-  static LatestMethodCache* _inline_type_hash_code_cache;  // ValueBootstrapMethods.invokeHashCode() method
+  static LatestMethodCache* _inline_type_hash_code_cache;  // ValueBootstrapMethods.inlineObjectHashCode() method
 
   // preallocated error objects (no backtrace)
   static oop          _out_of_memory_error_java_heap;
   static oop          _out_of_memory_error_metaspace;
   static oop          _out_of_memory_error_class_metaspace;
diff a/src/hotspot/share/prims/jvm.cpp b/src/hotspot/share/prims/jvm.cpp
--- a/src/hotspot/share/prims/jvm.cpp
+++ b/src/hotspot/share/prims/jvm.cpp
@@ -660,11 +660,11 @@
   // as implemented in the classic virtual machine; return 0 if object is NULL
   if (handle == NULL) {
     return 0;
   }
   oop obj = JNIHandles::resolve_non_null(handle);
-  if (EnableValhalla && InlineTypeIHashCodeViaMethod && obj->klass()->is_inline_klass()) {
+  if (EnableValhalla && obj->klass()->is_inline_klass()) {
       JavaValue result(T_INT);
       JavaCallArguments args;
       Handle ho(THREAD, obj);
       args.push_oop(ho);
       methodHandle method(THREAD, Universe::inline_type_hash_code_method());
diff a/src/hotspot/share/runtime/globals.hpp b/src/hotspot/share/runtime/globals.hpp
--- a/src/hotspot/share/runtime/globals.hpp
+++ b/src/hotspot/share/runtime/globals.hpp
@@ -2469,13 +2469,10 @@
           "Use platform unstable time where supported for timestamps only") \
                                                                             \
   product(bool, EnableValhalla, true,                                       \
           "Enable experimental Valhalla features")                          \
                                                                             \
-  product(bool, InlineTypeIHashCodeViaMethod, true,                         \
-         "Use generated hashCode for identity hash code")                   \
-                                                                            \
   product_pd(bool, InlineTypePassFieldsAsArgs,                              \
           "Pass each inline type field as an argument at calls")            \
                                                                             \
   product_pd(bool, InlineTypeReturnedAsFields,                              \
           "Return fields instead of an inline type reference")              \
diff a/src/hotspot/share/runtime/synchronizer.cpp b/src/hotspot/share/runtime/synchronizer.cpp
--- a/src/hotspot/share/runtime/synchronizer.cpp
+++ b/src/hotspot/share/runtime/synchronizer.cpp
@@ -1011,16 +1011,12 @@
   return value;
 }
 
 intptr_t ObjectSynchronizer::FastHashCode(Thread* self, oop obj) {
   if (EnableValhalla && obj->klass()->is_inline_klass()) {
-    // Expected tooling to override hashCode for inline type, just don't crash
-    if (log_is_enabled(Debug, monitorinflation)) {
-      ResourceMark rm;
-      log_debug(monitorinflation)("FastHashCode for value type: %s", obj->klass()->external_name());
-    }
-    return obj->klass()->java_mirror()->identity_hash();
+    // VM should be calling bootstrap method
+    ShouldNotReachHere();
   }
   if (UseBiasedLocking) {
     // NOTE: many places throughout the JVM do not expect a safepoint
     // to be taken here, in particular most operations on perm gen
     // objects. However, we only ever bias Java instances and all of
diff a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
--- a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
+++ b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
@@ -207,11 +207,11 @@
             MethodHandle[] hashers = new MethodHandle[getters.length];
             for (int i=0; i < getters.length; i++) {
                 MethodHandle getter = getters[i];
                 // For inline type or reference type, this calls Objects::hashCode.
                 // If the instance is of inline type and the hashCode method is not
-                // overridden, VM will call invokeHashCode to compute the
+                // overridden, VM will call inlineObjectHashCode to compute the
                 // hash code.
                 MethodHandle hasher = hashCodeForType(getter.type().returnType());
                 hashers[i] = filterReturnValue(getter, hasher);
             }
 
@@ -470,11 +470,11 @@
     /**
      * Invoke the bootstrap methods hashCode for the given instance.
      * @param o the instance to hash.
      * @return the hash code of the given instance {code o}.
      */
-    private static int invokeHashCode(Object o) {
+    private static int inlineObjectHashCode(Object o) {
         try {
             Class<?> type = o.getClass();
             // Note: javac disallows user to call super.hashCode if user implementated
             // risk for recursion for experts crafting byte-code
             if (!type.isInlineClass())
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
@@ -1171,31 +1171,29 @@
                     if (methodDecl.sym != null
                             && methodDecl.sym.type != null
                             && !methodDecl.sym.type.isErroneous()
                             && (methodDecl.sym.flags() & STATIC) == 0) {
                         final List<Type> parameterTypes = methodDecl.sym.type.getParameterTypes();
-                        switch (parameterTypes.size()) {
-                            case 0:
-                                String name = methodDecl.name.toString();
-                                if (name.equals("toString"))
-                                    requireToString = false;
-                                break;
+                        if (parameterTypes.size() == 0) {
+                            String name = methodDecl.name.toString();
+                            if (name.equals("toString")) {
+                                requireToString = false;
+                            }
                         }
                     }
                 }
             }
 
-            make.at(tree.pos);
-            // Make a body comprising { throw new RuntimeException(""Internal error: This method must have been replaced by javac"); }
-            JCBlock body = make.Block(Flags.SYNTHETIC, List.of(make.Throw(
-                    make.NewClass(null,
-                            null,
-                            make.Ident(names.fromString("RuntimeException")),
-                            List.of(make.Literal(CLASS, "Internal error: This method must have been replaced by javac")),
-                            null))));
-
             if (requireToString) {
+                make.at(tree.pos);
+                // Make a body comprising { throw new RuntimeException(""Internal error: This method must have been replaced by javac"); }
+                JCBlock body = make.Block(Flags.SYNTHETIC, List.of(make.Throw(
+                        make.NewClass(null,
+                                null,
+                                make.Ident(names.fromString("RuntimeException")),
+                                List.of(make.Literal(CLASS, "Internal error: This method must have been replaced by javac")),
+                                null))));
                 // public String toString() { throw new RuntimeException(message); }
                 JCMethodDecl toString = make.
                         MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
                                 names.toString,
                                 make.Ident(names.fromString("String")),
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Gen.java
@@ -1113,17 +1113,13 @@
                     syms.noSymbol,
                     ((MethodSymbol)bsm).asHandle(),
                     indyType,
                     List.nil().toArray(new LoadableConstant[0]));
 
-            switch (methodDecl.name.toString()) {
-                case "toString":
-                    code.emitop0(aload_0);
-                    items.makeDynamicItem(dynSym).invoke();
-                    code.emitop0(areturn);
-                    return;
-            }
+            code.emitop0(aload_0);
+            items.makeDynamicItem(dynSym).invoke();
+            code.emitop0(areturn);
         }
 
     public void visitVarDef(JCVariableDecl tree) {
         VarSymbol v = tree.sym;
         if (tree.init != null) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java b/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValueBootstrapMethodsTest.java
@@ -95,11 +95,11 @@
         Value v2 = new Value(20, 5.03, "foo", "bar", "goo");
         if (value == v2 || value.equals(v2)) {
             throw new RuntimeException("expected != and unequals");
         }
 
-        // v2 and v3 are of different values but Value::equals 
+        // v2 and v3 are of different values but Value::equals
         // returns true because v2::l and v3::l field contain the same elements
         Value v3 = new Value(20, 5.03, "foo", "bar", "goo");
         if (v2 == v3 || !v2.equals(v3)) {
             throw new RuntimeException("expected != and equals");
         }
