diff a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
--- a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
+++ b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
@@ -207,11 +207,11 @@
             MethodHandle[] hashers = new MethodHandle[getters.length];
             for (int i=0; i < getters.length; i++) {
                 MethodHandle getter = getters[i];
                 // For inline type or reference type, this calls Objects::hashCode.
                 // If the instance is of inline type and the hashCode method is not
-                // overridden, VM will call invokeHashCode to compute the
+                // overridden, VM will call inlineObjectHashCode to compute the
                 // hash code.
                 MethodHandle hasher = hashCodeForType(getter.type().returnType());
                 hashers[i] = filterReturnValue(getter, hasher);
             }
 
@@ -470,11 +470,11 @@
     /**
      * Invoke the bootstrap methods hashCode for the given instance.
      * @param o the instance to hash.
      * @return the hash code of the given instance {code o}.
      */
-    private static int invokeHashCode(Object o) {
+    private static int inlineObjectHashCode(Object o) {
         try {
             Class<?> type = o.getClass();
             // Note: javac disallows user to call super.hashCode if user implementated
             // risk for recursion for experts crafting byte-code
             if (!type.isInlineClass())
