diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
@@ -1171,31 +1171,29 @@
                     if (methodDecl.sym != null
                             && methodDecl.sym.type != null
                             && !methodDecl.sym.type.isErroneous()
                             && (methodDecl.sym.flags() & STATIC) == 0) {
                         final List<Type> parameterTypes = methodDecl.sym.type.getParameterTypes();
-                        switch (parameterTypes.size()) {
-                            case 0:
-                                String name = methodDecl.name.toString();
-                                if (name.equals("toString"))
-                                    requireToString = false;
-                                break;
+                        if (parameterTypes.size() == 0) {
+                            String name = methodDecl.name.toString();
+                            if (name.equals("toString")) {
+                                requireToString = false;
+                            }
                         }
                     }
                 }
             }
 
-            make.at(tree.pos);
-            // Make a body comprising { throw new RuntimeException(""Internal error: This method must have been replaced by javac"); }
-            JCBlock body = make.Block(Flags.SYNTHETIC, List.of(make.Throw(
-                    make.NewClass(null,
-                            null,
-                            make.Ident(names.fromString("RuntimeException")),
-                            List.of(make.Literal(CLASS, "Internal error: This method must have been replaced by javac")),
-                            null))));
-
             if (requireToString) {
+                make.at(tree.pos);
+                // Make a body comprising { throw new RuntimeException(""Internal error: This method must have been replaced by javac"); }
+                JCBlock body = make.Block(Flags.SYNTHETIC, List.of(make.Throw(
+                        make.NewClass(null,
+                                null,
+                                make.Ident(names.fromString("RuntimeException")),
+                                List.of(make.Literal(CLASS, "Internal error: This method must have been replaced by javac")),
+                                null))));
                 // public String toString() { throw new RuntimeException(message); }
                 JCMethodDecl toString = make.
                         MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
                                 names.toString,
                                 make.Ident(names.fromString("String")),
