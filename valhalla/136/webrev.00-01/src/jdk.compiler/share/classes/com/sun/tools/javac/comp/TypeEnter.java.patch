diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
@@ -1161,11 +1161,11 @@
 
         /** Add the implicit members for a value type to the parse tree and the symbol table.
          */
         private void addValueMembers(JCClassDecl tree, Env<AttrContext> env) {
 
-            boolean requireHashCode = true, requireEquals = true, requireToString = true;
+            boolean requireToString = true;
 
             for (JCTree def : tree.defs) {
                 if (def.getTag() == METHODDEF) {
                     JCMethodDecl methodDecl = (JCMethodDecl)def;
                     if (methodDecl.sym != null
@@ -1174,20 +1174,13 @@
                             && (methodDecl.sym.flags() & STATIC) == 0) {
                         final List<Type> parameterTypes = methodDecl.sym.type.getParameterTypes();
                         switch (parameterTypes.size()) {
                             case 0:
                                 String name = methodDecl.name.toString();
-                                if (name.equals("hashCode"))
-                                    requireHashCode = false;
-                                else if (name.equals("toString"))
+                                if (name.equals("toString"))
                                     requireToString = false;
                                 break;
-                            case 1:
-                                name = methodDecl.name.toString();
-                                if (name.equals("equals") && parameterTypes.head.tsym == syms.objectType.tsym)
-                                    requireEquals = false;
-                                break;
                         }
                     }
                 }
             }
 
@@ -1198,40 +1191,10 @@
                             null,
                             make.Ident(names.fromString("RuntimeException")),
                             List.of(make.Literal(CLASS, "Internal error: This method must have been replaced by javac")),
                             null))));
 
-            if (requireHashCode) {
-                // public int hashCode() { throw new RuntimeException(message); }
-                JCMethodDecl hashCode = make.
-                        MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
-                                names.hashCode,
-                                make.TypeIdent(TypeTag.INT),
-                                List.nil(),
-                                List.nil(),
-                                List.nil(), // thrown
-                                body,
-                                null);
-                memberEnter.memberEnter(hashCode, env);
-                tree.defs = tree.defs.append(hashCode);
-            }
-
-            if (requireEquals) {
-                // public boolean equals(Object o) { throw new RuntimeException(message); }
-                JCMethodDecl equals = make.
-                        MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
-                                names.equals,
-                                make.TypeIdent(TypeTag.BOOLEAN),
-                                List.nil(),
-                                List.of(make.VarDef(make.Modifiers(PARAMETER), names.fromString("o"), make.Ident(names.fromString("Object")), null )),
-                                List.nil(), // thrown
-                                body,
-                                null);
-                memberEnter.memberEnter(equals, env);
-                tree.defs = tree.defs.append(equals);
-            }
-
             if (requireToString) {
                 // public String toString() { throw new RuntimeException(message); }
                 JCMethodDecl toString = make.
                         MethodDef(make.Modifiers(Flags.PUBLIC | Flags.FINAL),
                                 names.toString,
