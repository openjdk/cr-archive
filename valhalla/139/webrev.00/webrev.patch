diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
@@ -1816,11 +1816,11 @@
                     }
 
                     // Sidecast
                     if (s.hasTag(CLASS)) {
                         if ((s.tsym.flags() & INTERFACE) != 0) {
-                            return ((t.tsym.flags() & FINAL) == 0)
+                            return (dynamicTypeMayImplementAdditionalInterfaces(t.tsym))
                                 ? sideCast(t, s, warnStack.head)
                                 : sideCastFinal(t, s, warnStack.head);
                         } else if ((t.tsym.flags() & INTERFACE) != 0) {
                             return ((s.tsym.flags() & FINAL) == 0)
                                 ? sideCast(t, s, warnStack.head)
@@ -4614,11 +4614,11 @@
             Assert.check((from.tsym.flags() & INTERFACE) != 0);
             reverse = true;
             to = from;
             from = target;
         }
-        Assert.check((from.tsym.flags() & FINAL) != 0);
+        Assert.check(!dynamicTypeMayImplementAdditionalInterfaces(from.tsym));
         Type t1 = asSuper(from, to.tsym);
         if (t1 == null) return false;
         Type t2 = to;
         if (disjointTypes(t1.getTypeArguments(), t2.getTypeArguments()))
             return false;
@@ -4626,10 +4626,14 @@
             (reverse ? giveWarning(t2, t1) : giveWarning(t1, t2)))
             warn.warn(LintCategory.UNCHECKED);
         return true;
     }
 
+    private boolean dynamicTypeMayImplementAdditionalInterfaces(TypeSymbol tsym) {
+        return (tsym.flags() & FINAL) == 0 && !tsym.isReferenceProjection();
+    }
+
     private boolean giveWarning(Type from, Type to) {
         List<Type> bounds = to.isCompound() ?
                 directSupertypes(to) : List.of(to);
         for (Type b : bounds) {
             Type subFrom = asSub(from, b.tsym);
