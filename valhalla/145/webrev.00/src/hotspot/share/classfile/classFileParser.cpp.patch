diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -3285,13 +3285,13 @@
     jint recognized_modifiers = RECOGNIZED_INNER_CLASS_MODIFIERS;
     // JVM_ACC_MODULE is defined in JDK-9 and later.
     if (_major_version >= JAVA_9_VERSION) {
       recognized_modifiers |= JVM_ACC_MODULE;
     }
-    // JVM_ACC_VALUE is defined for class file version 55 and later
+    // JVM_ACC_INLINE is defined for class file version 55 and later
     if (supports_inline_types()) {
-      recognized_modifiers |= JVM_ACC_VALUE;
+      recognized_modifiers |= JVM_ACC_INLINE;
     }
 
     // Access flags
     jint flags = cfs->get_u2_fast() & recognized_modifiers;
 
@@ -4153,11 +4153,11 @@
   assert(cp != NULL, "invariant");
   const InstanceKlass* super_klass = NULL;
 
   if (super_class_index == 0) {
     check_property(_class_name == vmSymbols::java_lang_Object()
-                   || (_access_flags.get_flags() & JVM_ACC_VALUE),
+                   || (_access_flags.get_flags() & JVM_ACC_INLINE),
                    "Invalid superclass index %u in class file %s",
                    super_class_index,
                    CHECK_NULL);
   } else {
     check_property(valid_klass_reference_at(super_class_index),
@@ -5351,13 +5351,13 @@
 
 // utility methods for format checking
 
 void ClassFileParser::verify_legal_class_modifiers(jint flags, TRAPS) const {
   const bool is_module = (flags & JVM_ACC_MODULE) != 0;
-  const bool is_inline_type = (flags & JVM_ACC_VALUE) != 0;
+  const bool is_inline_type = (flags & JVM_ACC_INLINE) != 0;
   assert(_major_version >= JAVA_9_VERSION || !is_module, "JVM_ACC_MODULE should not be set");
-  assert(supports_inline_types() || !is_inline_type, "JVM_ACC_VALUE should not be set");
+  assert(supports_inline_types() || !is_inline_type, "JVM_ACC_INLINE should not be set");
   if (is_module) {
     ResourceMark rm(THREAD);
     Exceptions::fthrow(
       THREAD_AND_LOCATION,
       vmSymbols::java_lang_NoClassDefFoundError(),
@@ -5369,11 +5369,11 @@
   if (is_inline_type && !EnableValhalla) {
     ResourceMark rm(THREAD);
     Exceptions::fthrow(
       THREAD_AND_LOCATION,
       vmSymbols::java_lang_ClassFormatError(),
-      "Class modifier ACC_VALUE in class %s requires option -XX:+EnableValhalla",
+      "Class modifier ACC_INLINE in class %s requires option -XX:+EnableValhalla",
       _class_name->as_C_string()
     );
   }
 
   if (!_need_verify) { return; }
@@ -6883,13 +6883,13 @@
   jint recognized_modifiers = JVM_RECOGNIZED_CLASS_MODIFIERS;
   // JVM_ACC_MODULE is defined in JDK-9 and later.
   if (_major_version >= JAVA_9_VERSION) {
     recognized_modifiers |= JVM_ACC_MODULE;
   }
-  // JVM_ACC_VALUE is defined for class file version 55 and later
+  // JVM_ACC_INLINE is defined for class file version 55 and later
   if (supports_inline_types()) {
-    recognized_modifiers |= JVM_ACC_VALUE;
+    recognized_modifiers |= JVM_ACC_INLINE;
   }
 
   // Access flags
   jint flags = stream->get_u2_fast() & recognized_modifiers;
 
