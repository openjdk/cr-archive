diff a/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp b/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp
--- a/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp
@@ -1499,11 +1499,11 @@
   }
 }
 
 void MacroAssembler::test_klass_is_value(Register klass, Register temp_reg, Label& is_value) {
   ldrw(temp_reg, Address(klass, Klass::access_flags_offset()));
-  andr(temp_reg, temp_reg, JVM_ACC_VALUE);
+  andr(temp_reg, temp_reg, JVM_ACC_INLINE);
   cbnz(temp_reg, is_value);
 }
 
 void MacroAssembler::test_field_is_inline_type(Register flags, Register temp_reg, Label& is_inline) {
   (void) temp_reg; // keep signature uniform with x86
diff a/src/hotspot/cpu/x86/macroAssembler_x86.cpp b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
--- a/src/hotspot/cpu/x86/macroAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
@@ -2617,11 +2617,11 @@
   }
 }
 
 void MacroAssembler::test_klass_is_inline_type(Register klass, Register temp_reg, Label& is_inline_type) {
   movl(temp_reg, Address(klass, Klass::access_flags_offset()));
-  testl(temp_reg, JVM_ACC_VALUE);
+  testl(temp_reg, JVM_ACC_INLINE);
   jcc(Assembler::notZero, is_inline_type);
 }
 
 void MacroAssembler::test_klass_is_empty_inline_type(Register klass, Register temp_reg, Label& is_empty_inline_type) {
 #ifdef ASSERT
diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -3285,13 +3285,13 @@
     jint recognized_modifiers = RECOGNIZED_INNER_CLASS_MODIFIERS;
     // JVM_ACC_MODULE is defined in JDK-9 and later.
     if (_major_version >= JAVA_9_VERSION) {
       recognized_modifiers |= JVM_ACC_MODULE;
     }
-    // JVM_ACC_VALUE is defined for class file version 55 and later
+    // JVM_ACC_INLINE is defined for class file version 55 and later
     if (supports_inline_types()) {
-      recognized_modifiers |= JVM_ACC_VALUE;
+      recognized_modifiers |= JVM_ACC_INLINE;
     }
 
     // Access flags
     jint flags = cfs->get_u2_fast() & recognized_modifiers;
 
@@ -4153,11 +4153,11 @@
   assert(cp != NULL, "invariant");
   const InstanceKlass* super_klass = NULL;
 
   if (super_class_index == 0) {
     check_property(_class_name == vmSymbols::java_lang_Object()
-                   || (_access_flags.get_flags() & JVM_ACC_VALUE),
+                   || (_access_flags.get_flags() & JVM_ACC_INLINE),
                    "Invalid superclass index %u in class file %s",
                    super_class_index,
                    CHECK_NULL);
   } else {
     check_property(valid_klass_reference_at(super_class_index),
@@ -5351,13 +5351,13 @@
 
 // utility methods for format checking
 
 void ClassFileParser::verify_legal_class_modifiers(jint flags, TRAPS) const {
   const bool is_module = (flags & JVM_ACC_MODULE) != 0;
-  const bool is_inline_type = (flags & JVM_ACC_VALUE) != 0;
+  const bool is_inline_type = (flags & JVM_ACC_INLINE) != 0;
   assert(_major_version >= JAVA_9_VERSION || !is_module, "JVM_ACC_MODULE should not be set");
-  assert(supports_inline_types() || !is_inline_type, "JVM_ACC_VALUE should not be set");
+  assert(supports_inline_types() || !is_inline_type, "JVM_ACC_INLINE should not be set");
   if (is_module) {
     ResourceMark rm(THREAD);
     Exceptions::fthrow(
       THREAD_AND_LOCATION,
       vmSymbols::java_lang_NoClassDefFoundError(),
@@ -5369,11 +5369,11 @@
   if (is_inline_type && !EnableValhalla) {
     ResourceMark rm(THREAD);
     Exceptions::fthrow(
       THREAD_AND_LOCATION,
       vmSymbols::java_lang_ClassFormatError(),
-      "Class modifier ACC_VALUE in class %s requires option -XX:+EnableValhalla",
+      "Class modifier ACC_INLINE in class %s requires option -XX:+EnableValhalla",
       _class_name->as_C_string()
     );
   }
 
   if (!_need_verify) { return; }
@@ -6883,13 +6883,13 @@
   jint recognized_modifiers = JVM_RECOGNIZED_CLASS_MODIFIERS;
   // JVM_ACC_MODULE is defined in JDK-9 and later.
   if (_major_version >= JAVA_9_VERSION) {
     recognized_modifiers |= JVM_ACC_MODULE;
   }
-  // JVM_ACC_VALUE is defined for class file version 55 and later
+  // JVM_ACC_INLINE is defined for class file version 55 and later
   if (supports_inline_types()) {
-    recognized_modifiers |= JVM_ACC_VALUE;
+    recognized_modifiers |= JVM_ACC_INLINE;
   }
 
   // Access flags
   jint flags = stream->get_u2_fast() & recognized_modifiers;
 
diff a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -3295,11 +3295,11 @@
 Node* LibraryCallKit::generate_hidden_class_guard(Node* kls, RegionNode* region) {
   return generate_access_flags_guard(kls, JVM_ACC_IS_HIDDEN_CLASS, 0, region);
 }
 
 Node* LibraryCallKit::generate_value_guard(Node* kls, RegionNode* region) {
-  return generate_access_flags_guard(kls, JVM_ACC_VALUE, 0, region);
+  return generate_access_flags_guard(kls, JVM_ACC_INLINE, 0, region);
 }
 
 //-------------------------inline_native_Class_query-------------------
 bool LibraryCallKit::inline_native_Class_query(vmIntrinsics::ID id) {
   const Type* return_type = TypeInt::BOOL;
diff a/src/hotspot/share/utilities/accessFlags.hpp b/src/hotspot/share/utilities/accessFlags.hpp
--- a/src/hotspot/share/utilities/accessFlags.hpp
+++ b/src/hotspot/share/utilities/accessFlags.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -122,11 +122,11 @@
   bool is_transient   () const         { return (_flags & JVM_ACC_TRANSIENT   ) != 0; }
   bool is_native      () const         { return (_flags & JVM_ACC_NATIVE      ) != 0; }
   bool is_interface   () const         { return (_flags & JVM_ACC_INTERFACE   ) != 0; }
   bool is_abstract    () const         { return (_flags & JVM_ACC_ABSTRACT    ) != 0; }
   bool is_strict      () const         { return (_flags & JVM_ACC_STRICT      ) != 0; }
-  bool is_inline_type () const         { return (_flags & JVM_ACC_VALUE       ) != 0; }
+  bool is_inline_type () const         { return (_flags & JVM_ACC_INLINE      ) != 0; }
 
   // Attribute flags
   bool is_synthetic   () const         { return (_flags & JVM_ACC_SYNTHETIC   ) != 0; }
 
   // Method* flags
diff a/src/java.base/share/classes/jdk/experimental/bytecode/Flag.java b/src/java.base/share/classes/jdk/experimental/bytecode/Flag.java
--- a/src/java.base/share/classes/jdk/experimental/bytecode/Flag.java
+++ b/src/java.base/share/classes/jdk/experimental/bytecode/Flag.java
@@ -42,11 +42,11 @@
     ACC_STATIC(0x0008),
     ACC_FINAL(0x0010),
     ACC_SYNCHRONIZED(0x0020),
     ACC_BRIDGE(0x0040),
     ACC_VARARGS(0x0080),
-    ACC_VALUE(0x0100),
+    ACC_INLINE(0x0100),
     ACC_NATIVE(0x0100),
     ACC_STRICT(0x0800);
 
     public int flag;
 
diff a/src/java.base/share/native/include/classfile_constants.h.template b/src/java.base/share/native/include/classfile_constants.h.template
--- a/src/java.base/share/native/include/classfile_constants.h.template
+++ b/src/java.base/share/native/include/classfile_constants.h.template
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -46,11 +46,11 @@
     JVM_ACC_SUPER         = 0x0020,
     JVM_ACC_VOLATILE      = 0x0040,
     JVM_ACC_BRIDGE        = 0x0040,
     JVM_ACC_TRANSIENT     = 0x0080,
     JVM_ACC_VARARGS       = 0x0080,
-    JVM_ACC_VALUE         = 0x0100,
+    JVM_ACC_INLINE        = 0x0100,
     JVM_ACC_NATIVE        = 0x0100,
     JVM_ACC_INTERFACE     = 0x0200,
     JVM_ACC_ABSTRACT      = 0x0400,
     JVM_ACC_STRICT        = 0x0800,
     JVM_ACC_SYNTHETIC     = 0x1000,
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java
@@ -108,11 +108,11 @@
     // files into unique bits positions: ACC_SYNTHETIC <-> SYNTHETIC,
     // for example.
     public static final int ACC_SUPER    = 0x0020;
     public static final int ACC_BRIDGE   = 0x0040;
     public static final int ACC_VARARGS  = 0x0080;
-    public static final int ACC_VALUE    = 0x0100;
+    public static final int ACC_INLINE   = 0x0100;
     public static final int ACC_MODULE   = 0x8000;
 
     /*****************************************
      * Internal compiler flags (no bits in the lower 16).
      *****************************************/
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
@@ -2772,12 +2772,12 @@
     long adjustClassFlags(long flags) {
         if ((flags & ACC_MODULE) != 0) {
             flags &= ~ACC_MODULE;
             flags |= MODULE;
         }
-        if ((flags & ACC_VALUE) != 0) {
-            flags &= ~ACC_VALUE;
+        if ((flags & ACC_INLINE) != 0) {
+            flags &= ~ACC_INLINE;
             flags |= allowInlineTypes ? VALUE : allowValueBasedClasses ? VALUEBASED : 0;
         }
         return flags & ~ACC_SUPER; // SUPER and SYNCHRONIZED bits overloaded
     }
 
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
@@ -1570,11 +1570,11 @@
         if (c.owner.kind == MDL) {
             flags = ACC_MODULE;
         } else {
             flags = adjustFlags(c.flags() & ~DEFAULT);
             if ((flags & PROTECTED) != 0) flags |= PUBLIC;
-            flags = flags & (ClassFlags | ACC_VALUE) & ~STRICTFP;
+            flags = flags & (ClassFlags | ACC_INLINE) & ~STRICTFP;
             if ((flags & INTERFACE) == 0) flags |= ACC_SUPER;
         }
 
         if (dumpClassModifiers) {
             PrintWriter pw = log.getWriter(Log.WriterKind.ERROR);
@@ -1748,11 +1748,11 @@
         if ((flags & VARARGS) != 0)
             result |= ACC_VARARGS;
         if ((flags & DEFAULT) != 0)
             result &= ~ABSTRACT;
         if ((flags & VALUE) != 0)
-            result |= ACC_VALUE;
+            result |= ACC_INLINE;
         return result;
     }
 
     long getLastModified(FileObject filename) {
         long mod = 0;
diff a/src/jdk.jdeps/share/classes/com/sun/tools/classfile/AccessFlags.java b/src/jdk.jdeps/share/classes/com/sun/tools/classfile/AccessFlags.java
--- a/src/jdk.jdeps/share/classes/com/sun/tools/classfile/AccessFlags.java
+++ b/src/jdk.jdeps/share/classes/com/sun/tools/classfile/AccessFlags.java
@@ -47,11 +47,11 @@
     public static final int ACC_SYNCHRONIZED  = 0x0020; //                      method
     public static final int ACC_VOLATILE      = 0x0040; //               field
     public static final int ACC_BRIDGE        = 0x0040; //                      method
     public static final int ACC_TRANSIENT     = 0x0080; //               field
     public static final int ACC_VARARGS       = 0x0080; //                      method
-    public static final int ACC_VALUE         = 0x0100; // class
+    public static final int ACC_INLINE        = 0x0100; // class
     public static final int ACC_NATIVE        = 0x0100; //                      method
     public static final int ACC_INTERFACE     = 0x0200; // class, inner
     public static final int ACC_ABSTRACT      = 0x0400; // class, inner,        method
     public static final int ACC_STRICT        = 0x0800; //                      method
     public static final int ACC_SYNTHETIC     = 0x1000; // class, inner, field, method
@@ -81,16 +81,16 @@
     public int byteLength() {
         return 2;
     }
 
     private static final int[] classModifiers = {
-        ACC_PUBLIC, ACC_FINAL, ACC_ABSTRACT, ACC_VALUE
+        ACC_PUBLIC, ACC_FINAL, ACC_ABSTRACT, ACC_INLINE
     };
 
     private static final int[] classFlags = {
         ACC_PUBLIC, ACC_FINAL, ACC_SUPER, ACC_INTERFACE, ACC_ABSTRACT,
-        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_VALUE
+        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_INLINE
     };
 
     public Set<String> getClassModifiers() {
         int f = ((flags & ACC_INTERFACE) != 0 ? flags & ~ACC_ABSTRACT : flags);
         return getModifiers(f, classModifiers, Kind.Class);
@@ -100,16 +100,16 @@
         return getFlags(classFlags, Kind.Class);
     }
 
     private static final int[] innerClassModifiers = {
         ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC, ACC_FINAL,
-        ACC_ABSTRACT, ACC_VALUE
+        ACC_ABSTRACT, ACC_INLINE
     };
 
     private static final int[] innerClassFlags = {
         ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC, ACC_FINAL, ACC_SUPER,
-        ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_VALUE
+        ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_INLINE
     };
 
     public Set<String> getInnerClassModifiers() {
         int f = ((flags & ACC_INTERFACE) != 0 ? flags & ~ACC_ABSTRACT : flags);
         return getModifiers(f, innerClassModifiers, Kind.InnerClass);
@@ -234,11 +234,11 @@
         case 0x40:
             return (t == Kind.Field ? "ACC_VOLATILE" : "ACC_BRIDGE");
         case 0x80:
             return (t == Kind.Field ? "ACC_TRANSIENT" : "ACC_VARARGS");
         case 0x100:
-            return (t == Kind.Class || t == Kind.InnerClass) ? "ACC_VALUE" : "ACC_NATIVE";
+            return (t == Kind.Class || t == Kind.InnerClass) ? "ACC_INLINE" : "ACC_NATIVE";
         case ACC_INTERFACE:
             return "ACC_INTERFACE";
         case ACC_ABSTRACT:
             return "ACC_ABSTRACT";
         case ACC_STRICT:
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadACCValue.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadACCValue.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadACCValue.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadACCValue.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  *
  */
 /*
  * @test
- * @summary test that if a class file has ACC_VALUE set then it must be run
+ * @summary test that if a class file has ACC_INLINE set then it must be run
  *          with option -XX:+EnableValhalla.
  * @compile cfpTests.jcod
  * @run main/othervm -XX:-EnableValhalla BadACCValue
  */
 
@@ -42,10 +42,10 @@
         }
     }
 
     public static void main(String[] args) throws Exception {
 
-        // Test ACC_VALUE causes a CFE unless -XX:+EnableValhalla is specified.
+        // Test ACC_INLINE causes a CFE unless -XX:+EnableValhalla is specified.
         runTest("ValueFieldNotFinal",
-                "Class modifier ACC_VALUE in class ValueFieldNotFinal requires option -XX:+EnableValhalla");
+                "Class modifier ACC_INLINE in class ValueFieldNotFinal requires option -XX:+EnableValhalla");
     }
 }
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadInlineTypes.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadInlineTypes.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadInlineTypes.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/BadInlineTypes.java
@@ -42,20 +42,20 @@
         }
     }
 
     public static void main(String[] args) throws Exception {
 
-        // Test that ACC_VALUE with ACC_ABSTRACT is illegal.
+        // Test that ACC_INLINE with ACC_ABSTRACT is illegal.
         runTest("ValueAbstract", "Illegal class modifiers in class ValueAbstract");
 
-        // Test that ACC_VALUE with ACC_ENUM is illegal.
+        // Test that ACC_INLINE with ACC_ENUM is illegal.
         runTest("ValueEnum", "Illegal class modifiers in class ValueEnum");
 
         // Test that inline type fields must be final.
         runTest("ValueFieldNotFinal", "Illegal field modifiers in class ValueFieldNotFinal");
 
-        // Test that ACC_VALUE with ACC_INTERFACE is illegal.
+        // Test that ACC_INLINE with ACC_INTERFACE is illegal.
         runTest("ValueInterface", "Illegal class modifiers in class ValueInterface");
 
         // Test that inline type instance methods cannot be synchronized.
         runTest("ValueMethodSynch",
                 "Method getInt in class ValueMethodSynch (an inline class) has illegal modifiers");
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/cfpTests.jcod b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/cfpTests.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/cfpTests.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/cfpTests.jcod
@@ -41,11 +41,11 @@
 //         return v;
 //     }
 // }
 
 
-// Test that class modifiers cannot have both ACC_VALUE and ACC_ABSTRACT set.
+// Test that class modifiers cannot have both ACC_INLINE and ACC_ABSTRACT set.
 //
 class ValueAbstract {
   0xCAFEBABE;
   0; // minor version
   60; // version
@@ -78,11 +78,11 @@
     NameAndType #18 #19; // #25     at 0xC9
     NameAndType #8 #11; // #26     at 0xCE
     Utf8 "java/lang/Object"; // #27     at 0xD3
   } // Constant Pool
 
-  0x0530; // access [  ACC_VALUE ACC_ABSTRACT(bad) ACC_SUPER ACC_FINAL ]
+  0x0530; // access [  ACC_INLINE ACC_ABSTRACT(bad) ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
@@ -197,11 +197,11 @@
   } // Attributes
 } // end class ValueAbstract
 
 //////////////////////////////////////////////////////////////////////
 
-// Test that class modifiers cannot have both ACC_VALUE and ACC_ENUM set.
+// Test that class modifiers cannot have both ACC_INLINE and ACC_ENUM set.
 //
 class ValueEnum {
   0xCAFEBABE;
   0; // minor version
   60; // version
@@ -234,11 +234,11 @@
     NameAndType #18 #19; // #25     at 0xC9
     NameAndType #8 #11; // #26     at 0xCE
     Utf8 "java/lang/Object"; // #27     at 0xD3
   } // Constant Pool
 
-  0x04130; // access [  ACC_VALUE ACC_ENUM(bad) ACC_SUPER ACC_FINAL ]
+  0x04130; // access [  ACC_INLINE ACC_ENUM(bad) ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
@@ -390,11 +390,11 @@
     NameAndType #18 #19; // #25     at 0xC9
     NameAndType #8 #11; // #26     at 0xCE
     Utf8 "java/lang/Object"; // #27     at 0xD3
   } // Constant Pool
 
-  0x0130; // access [ ACC_VALUE ACC_SUPER ACC_FINAL ]
+  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
@@ -509,11 +509,11 @@
   } // Attributes
 } // end class ValueFieldNotFinal
 
 //////////////////////////////////////////////////////////////////////
 
-// Test that class modifiers cannot have both ACC_VALUE and ACC_INTERFACE set.
+// Test that class modifiers cannot have both ACC_INLINE and ACC_INTERFACE set.
 //
 class ValueInterface {
   0xCAFEBABE;
   0; // minor version
   60; // version
@@ -545,11 +545,11 @@
     NameAndType #16 #17; // #24     at 0xD0
     NameAndType #8 #9; // #25     at 0xD5
     Utf8 "java/lang/Object"; // #26     at 0xDA
   } // Constant Pool
 
-  0x0330; // access [ ACC_VALUE ACC_INTERFACE(bad) ACC_SUPER ACC_FINAL ]
+  0x0330; // access [ ACC_INLINE ACC_INTERFACE(bad) ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/verifierTests.jcod b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/verifierTests.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/verifierTests.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/verifierTests.jcod
@@ -89,11 +89,11 @@
     NameAndType #16 #17; // #24     at 0xBC
     NameAndType #8 #9; // #25     at 0xC1
     Utf8 "java/lang/Object"; // #26     at 0xC6
   } // Constant Pool
 
-  0x0130; // access [ ACC_VALUE ACC_SUPER ACC_FINAL ]
+  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
@@ -190,11 +190,11 @@
     NameAndType #16 #17; // #24     at 0xBC
     NameAndType #8 #9; // #25     at 0xC1
     Utf8 "java/lang/Object"; // #26     at 0xC6
   } // Constant Pool
 
-  0x0130; // access [ ACC_VALUE ACC_SUPER ACC_FINAL ]
+  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
@@ -291,11 +291,11 @@
     NameAndType #16 #17; // #24     at 0xBC
     NameAndType #8 #9; // #25     at 0xC1
     Utf8 "java/lang/Object"; // #26     at 0xC6
   } // Constant Pool
 
-  0x0130; // access [ ACC_VALUE ACC_SUPER ACC_FINAL ]
+  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
@@ -745,11 +745,11 @@
     NameAndType #16 #17; // #24     at 0xBC
     NameAndType #8 #9; // #25     at 0xC1
     Utf8 "java/lang/Object"; // #26     at 0xC6
   } // Constant Pool
 
-  0x0130; // access [ ACC_VALUE ACC_SUPER ACC_FINAL ]
+  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #7;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
@@ -961,11 +961,11 @@
     class #19; // #20  // NEW ClassRef
     Field #20 #18; // #21  // New FieldRef
 
   } // Constant Pool
 
-  0x0130; // access [ ACC_VALUE, ACC_SUPER ACC_FINAL ]
+  0x0130; // access [ ACC_INLINE, ACC_SUPER ACC_FINAL ]
   #3;// this_cpx
   #4;// super_cpx
 
   [0] { // Interfaces
   } // Interfaces
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckFlags.java b/test/langtools/tools/javac/valhalla/lworld-values/CheckFlags.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckFlags.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckFlags.java
@@ -35,11 +35,11 @@
 
 public class CheckFlags {
     public static void main(String[] args) throws Exception {
         ClassFile cls = ClassFile.read(CheckFlags.class.getResourceAsStream("Point.class"));
 
-        if (!cls.access_flags.is(AccessFlags.ACC_VALUE))
+        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))
             throw new Exception("Value flag not set");
 
         if (!cls.access_flags.is(AccessFlags.ACC_FINAL))
             throw new Exception("Final flag not set");
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckFlattenableSyntheticFields.java b/test/langtools/tools/javac/valhalla/lworld-values/CheckFlattenableSyntheticFields.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckFlattenableSyntheticFields.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckFlattenableSyntheticFields.java
@@ -53,19 +53,19 @@
     }
 
     public static void main(String[] args) throws Exception {
         ClassFile cls = ClassFile.read(CheckFlattenableSyntheticFields.class.getResourceAsStream("CheckFlattenableSyntheticFields$ValueOuter$Inner.class"));
 
-        if (!cls.access_flags.is(AccessFlags.ACC_VALUE))
+        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))
             throw new Exception("Value flag not set");
 
         if (!cls.access_flags.is(AccessFlags.ACC_FINAL))
             throw new Exception("Final flag not set");
 
         cls = ClassFile.read(CheckFlattenableSyntheticFields.class.getResourceAsStream("CheckFlattenableSyntheticFields$RefOuter$Inner.class"));
 
-        if (!cls.access_flags.is(AccessFlags.ACC_VALUE))
+        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))
             throw new Exception("Value flag not set");
 
         if (!cls.access_flags.is(AccessFlags.ACC_FINAL))
             throw new Exception("Final flag not set");
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckLocalClasses.java b/test/langtools/tools/javac/valhalla/lworld-values/CheckLocalClasses.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckLocalClasses.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckLocalClasses.java
@@ -61,19 +61,19 @@
     }
 
     public static void main(String[] args) throws Exception {
         ClassFile cls = ClassFile.read(CheckLocalClasses.class.getResourceAsStream("CheckLocalClasses$ValueOuter$1Inner.class"));
 
-        if (!cls.access_flags.is(AccessFlags.ACC_VALUE))
+        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))
             throw new Exception("Value flag not set");
 
         if (!cls.access_flags.is(AccessFlags.ACC_FINAL))
             throw new Exception("Final flag not set");
 
         cls = ClassFile.read(CheckLocalClasses.class.getResourceAsStream("CheckLocalClasses$RefOuter$1Inner.class"));
 
-        if (!cls.access_flags.is(AccessFlags.ACC_VALUE))
+        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))
             throw new Exception("Value flag not set");
 
         if (!cls.access_flags.is(AccessFlags.ACC_FINAL))
             throw new Exception("Final flag not set");
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java b/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java
@@ -46,9 +46,9 @@
         public static final Inner.ref ZERO = Inner.create(0);
         public static final Inner.ref ZERO2 = Inner.create(0);
     }
 
     public static void main(String[] args) {
-        if ((Inner.class.getModifiers() & AccessFlags.ACC_VALUE) == 0)
+        if ((Inner.class.getModifiers() & AccessFlags.ACC_INLINE) == 0)
             throw new AssertionError("Value flag missing");
     }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/QTypeTest.java b/test/langtools/tools/javac/valhalla/lworld-values/QTypeTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/QTypeTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/QTypeTest.java
@@ -45,11 +45,11 @@
         String [] params = new String [] { "-v",
                                             Paths.get(System.getProperty("test.classes"),
                                                 "QTypedValue.class").toString() };
         runCheck(params, new String [] {
               "final value class QTypedValue",
-              "  flags: (0x0130) ACC_FINAL, ACC_SUPER, ACC_VALUE",
+              "  flags: (0x0130) ACC_FINAL, ACC_SUPER, ACC_INLINE",
               "  this_class: #1                          // QTypedValue",
               "   #1 = Class              #2             // QTypedValue",
               "   #2 = Utf8               QTypedValue",
               "   #3 = Class              #4             // \"QQTypedValue;\"",
               "   #4 = Utf8               QQTypedValue;",
