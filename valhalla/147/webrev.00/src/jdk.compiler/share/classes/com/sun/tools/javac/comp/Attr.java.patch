diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -2070,27 +2070,29 @@
                         return candidate;
                     }
                 }
             }
 
-            // Those were all the cases that could result in a primitive
+            // Those were all the cases that could result in a primitive. See if primitive boxing and inline
+            // narrowing conversions bring about a convergence.
             condTypes = condTypes.stream()
-                                 .map(t -> t.isPrimitive() ? types.boxedClass(t).type : t)
+                                 .map(t -> t.isPrimitive() ? types.boxedClass(t).type
+                                         : t.isReferenceProjection() ? t.valueProjection() : t)
                                  .collect(List.collector());
 
             for (Type type : condTypes) {
                 if (condTypes.stream().filter(t -> t != type).allMatch(t -> types.isAssignable(t, type)))
                     return type.baseType();
             }
 
             Iterator<DiagnosticPosition> posIt = positions.iterator();
 
             condTypes = condTypes.stream()
-                                 .map(t -> chk.checkNonVoid(posIt.next(), t))
+                                 .map(t -> chk.checkNonVoid(posIt.next(), t.isValue() ? t.referenceProjection() : t))
                                  .collect(List.collector());
 
-            // both are known to be reference types.  The result is
+            // both are known to be reference types (or projections).  The result is
             // lub(thentype,elsetype). This cannot fail, as it will
             // always be possible to infer "Object" if nothing better.
             return types.lub(condTypes.stream().map(t -> t.baseType()).collect(List.collector()));
         }
 
