diff a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -2488,11 +2488,10 @@
     return true;
   }
 
   if (base->is_InlineType()) {
     InlineTypeNode* vt = base->as_InlineType();
-
     if (is_store) {
       if (!vt->is_allocated(&_gvn) || !_gvn.type(vt)->is_inlinetype()->larval()) {
         return false;
       }
       base = vt->get_oop();
@@ -2502,22 +2501,19 @@
         ciInlineKlass* vk = vt->type()->inline_klass();
         if ((long)(int)off != off || !vk->contains_field_offset(off)) {
           return false;
         }
 
-        ciField* f = vk->get_non_flattened_field_by_offset((int)off);
-
-        if (f != NULL) {
-          BasicType bt = f->layout_type();
-          if (bt == T_ARRAY || bt == T_NARROWOOP) {
+        ciField* field = vk->get_non_flattened_field_by_offset(off);
+        if (field != NULL) {
+          BasicType bt = field->layout_type();
+          if (bt == T_ARRAY || bt == T_NARROWOOP || (bt == T_INLINE_TYPE && !field->is_flattened())) {
             bt = T_OBJECT;
           }
-          if (bt == type) {
-            if (bt != T_INLINE_TYPE || f->type() == inline_klass) {
-              set_result(vt->field_value_by_offset((int)off, false));
-              return true;
-            }
+          if (bt == type && (bt != T_INLINE_TYPE || field->type() == inline_klass)) {
+            set_result(vt->field_value_by_offset(off, false));
+            return true;
           }
         }
       }
       // Re-execute the unsafe access if allocation triggers deoptimization.
       PreserveReexecuteState preexecs(this);
diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
@@ -1025,6 +1025,23 @@
     public void test54_verifier(boolean warmup) {
         MyValue1 v = MyValue1.createWithFieldsInline(rI, rL);
         MyValue1 res = test54(v.setX(v, 0));
         Asserts.assertEQ(res.hash(), v.hash());
     }
+
+    static final MyValue1 test55_vt = MyValue1.createWithFieldsInline(rI, rL);
+
+    // Same as test30 but with constant field holder
+    @Test(failOn=CALL_Unsafe)
+    public MyValue2 test55() {
+        if (V1_FLATTENED) {
+            return U.getValue(test55_vt, V1_OFFSET, MyValue2.val.class);
+        }
+        return (MyValue2)U.getReference(test55_vt, V1_OFFSET);
+    }
+
+    @DontCompile
+    public void test55_verifier(boolean warmup) {
+        MyValue2 res = test55();
+        Asserts.assertEQ(res.hash(), vfinal.v1.hash());
+    }
 }
