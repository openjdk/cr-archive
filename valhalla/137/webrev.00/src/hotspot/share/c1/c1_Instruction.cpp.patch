diff a/src/hotspot/share/c1/c1_Instruction.cpp b/src/hotspot/share/c1/c1_Instruction.cpp
--- a/src/hotspot/share/c1/c1_Instruction.cpp
+++ b/src/hotspot/share/c1/c1_Instruction.cpp
@@ -417,10 +417,44 @@
     }
   }
 }
 
 
+  StoreField::StoreField(Value obj, int offset, ciField* field, Value value, bool is_static,
+             ValueStack* state_before, bool needs_patching)
+  : AccessField(obj, offset, field, is_static, state_before, needs_patching)
+  , _value(value)
+  {
+    set_flag(NeedsWriteBarrierFlag, as_ValueType(field_type())->is_object());
+#ifdef ASSERT
+  AssertValues assert_value;
+  values_do(&assert_value);
+#endif
+    pin();
+    if (value->as_NewInlineTypeInstance() != NULL) {
+      value->as_NewInlineTypeInstance()->set_not_larva_anymore();
+    }
+  }
+
+  StoreIndexed::StoreIndexed(Value array, Value index, Value length, BasicType elt_type, Value value, ValueStack* state_before,
+               bool check_boolean, bool mismatched)
+  : AccessIndexed(array, index, length, elt_type, state_before, mismatched)
+  , _value(value), _check_boolean(check_boolean)
+  {
+    set_flag(NeedsWriteBarrierFlag, (as_ValueType(elt_type)->is_object()));
+    set_flag(NeedsStoreCheckFlag, (as_ValueType(elt_type)->is_object()));
+#ifdef ASSERT
+  AssertValues assert_value;
+  values_do(&assert_value);
+#endif
+    pin();
+    if (value->as_NewInlineTypeInstance() != NULL) {
+      value->as_NewInlineTypeInstance()->set_not_larva_anymore();
+    }
+  }
+
+
 // Implementation of Invoke
 
 
 Invoke::Invoke(Bytecodes::Code code, ValueType* result_type, Value recv, Values* args,
                int vtable_index, ciMethod* target, ValueStack* state_before, bool null_free)
@@ -444,15 +478,22 @@
 
   // provide an initial guess of signature size.
   _signature = new BasicTypeList(number_of_arguments() + (has_receiver() ? 1 : 0));
   if (has_receiver()) {
     _signature->append(as_BasicType(receiver()->type()));
+    if (receiver()->as_NewInlineTypeInstance() != NULL) {
+      receiver()->as_NewInlineTypeInstance()->set_not_larva_anymore();
+    }
   }
   for (int i = 0; i < number_of_arguments(); i++) {
-    ValueType* t = argument_at(i)->type();
+    Value v = argument_at(i);
+    ValueType* t = v->type();
     BasicType bt = as_BasicType(t);
     _signature->append(bt);
+    if (v->as_NewInlineTypeInstance() != NULL) {
+      v->as_NewInlineTypeInstance()->set_not_larva_anymore();
+    }
   }
 }
 
 
 void Invoke::state_values_do(ValueVisitor* f) {
@@ -961,10 +1002,12 @@
         Phi* existing_phi = existing_value->as_Phi();
 
         if (new_value != existing_value && (existing_phi == NULL || existing_phi->block() != this)) {
           existing_state->setup_phi_for_stack(this, index);
           TRACE_PHI(tty->print_cr("creating phi-function %c%d for stack %d", existing_state->stack_at(index)->type()->tchar(), existing_state->stack_at(index)->id(), index));
+          if (new_value->as_NewInlineTypeInstance() != NULL) {new_value->as_NewInlineTypeInstance()->set_not_larva_anymore(); }
+          if (existing_value->as_NewInlineTypeInstance() != NULL) {existing_value->as_NewInlineTypeInstance()->set_not_larva_anymore(); }
         }
       }
 
       // create necessary phi functions for locals
       for_each_local_value(existing_state, index, existing_value) {
@@ -975,10 +1018,12 @@
           existing_state->invalidate_local(index);
           TRACE_PHI(tty->print_cr("invalidating local %d because of type mismatch", index));
         } else if (new_value != existing_value && (existing_phi == NULL || existing_phi->block() != this)) {
           existing_state->setup_phi_for_local(this, index);
           TRACE_PHI(tty->print_cr("creating phi-function %c%d for local %d", existing_state->local_at(index)->type()->tchar(), existing_state->local_at(index)->id(), index));
+          if (new_value->as_NewInlineTypeInstance() != NULL) {new_value->as_NewInlineTypeInstance()->set_not_larva_anymore(); }
+          if (existing_value->as_NewInlineTypeInstance() != NULL) {existing_value->as_NewInlineTypeInstance()->set_not_larva_anymore(); }
         }
       }
     }
 
     assert(existing_state->caller_state() == new_state->caller_state(), "caller states must be equal");
@@ -1141,5 +1186,6 @@
 }
 
 void ProfileInvoke::state_values_do(ValueVisitor* f) {
   if (state() != NULL) state()->values_do(f);
 }
+
