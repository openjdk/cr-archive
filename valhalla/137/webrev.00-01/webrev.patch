diff a/src/hotspot/share/c1/c1_GraphBuilder.cpp b/src/hotspot/share/c1/c1_GraphBuilder.cpp
--- a/src/hotspot/share/c1/c1_GraphBuilder.cpp
+++ b/src/hotspot/share/c1/c1_GraphBuilder.cpp
@@ -1102,40 +1102,41 @@
 
 void GraphBuilder::stack_op(Bytecodes::Code code) {
   switch (code) {
     case Bytecodes::_pop:
       { Value w = state()->raw_pop();
-        NewInlineTypeInstance::update_stack_count(w);
+        update_larva_stack_count(w);
       }
       break;
     case Bytecodes::_pop2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
-        NewInlineTypeInstance::update_stack_count(w1);
-        NewInlineTypeInstance::update_stack_count(w2);
+        update_larva_stack_count(w1);
+        update_larva_stack_count(w2);
       }
       break;
     case Bytecodes::_dup:
       { Value w = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w);
+        update_larval_state(w);
         state()->raw_push(w);
         state()->raw_push(w);
       }
       break;
     case Bytecodes::_dup_x1:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
+        update_larval_state(w1);
         state()->raw_push(w1);
         state()->raw_push(w2);
         state()->raw_push(w1);
       }
       break;
     case Bytecodes::_dup_x2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
+        // special handling for the dup_x2/pop sequence (see JDK-8251046)
         if (w1 != NULL && w1->as_NewInlineTypeInstance() != NULL) {
           ciBytecodeStream s(method());
           s.force_bci(bci());
           s.next();
           if (s.cur_bc() != Bytecodes::_pop) {
@@ -1151,24 +1152,24 @@
       }
       break;
     case Bytecodes::_dup2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
-        NewInlineTypeInstance::update_larval_state(w2);
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w2);
         state()->raw_push(w1);
       }
       break;
     case Bytecodes::_dup2_x1:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
-        NewInlineTypeInstance::update_larval_state(w2);
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w3);
         state()->raw_push(w2);
         state()->raw_push(w1);
@@ -1177,12 +1178,12 @@
     case Bytecodes::_dup2_x2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
         Value w4 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
-        NewInlineTypeInstance::update_larval_state(w2);
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w4);
         state()->raw_push(w3);
         state()->raw_push(w2);
diff a/src/hotspot/share/c1/c1_GraphBuilder.hpp b/src/hotspot/share/c1/c1_GraphBuilder.hpp
--- a/src/hotspot/share/c1/c1_GraphBuilder.hpp
+++ b/src/hotspot/share/c1/c1_GraphBuilder.hpp
@@ -364,10 +364,22 @@
   const char* should_not_inline(ciMethod* callee) const;
 
   // JSR 292 support
   bool try_method_handle_inline(ciMethod* callee, bool ignore_return);
 
+  // Inline type support
+  void update_larval_state(Value v) {
+    if (v != NULL && v->as_NewInlineTypeInstance() != NULL) {
+      v->as_NewInlineTypeInstance()->update_larval_state();
+    }
+  }
+  void update_larva_stack_count(Value v) {
+    if (v != NULL && v->as_NewInlineTypeInstance() != NULL) {
+      v->as_NewInlineTypeInstance()->update_stack_count();
+    }
+  }
+
   // helpers
   void inline_bailout(const char* msg);
   BlockBegin* header_block(BlockBegin* entry, BlockBegin::Flag f, ValueStack* state);
   BlockBegin* setup_start_block(int osr_bci, BlockBegin* std_entry, BlockBegin* osr_entry, ValueStack* init_state);
   void setup_osr_entry_block();
diff a/src/hotspot/share/c1/c1_Instruction.cpp b/src/hotspot/share/c1/c1_Instruction.cpp
--- a/src/hotspot/share/c1/c1_Instruction.cpp
+++ b/src/hotspot/share/c1/c1_Instruction.cpp
@@ -418,11 +418,11 @@
   }
 }
 
 
   StoreField::StoreField(Value obj, int offset, ciField* field, Value value, bool is_static,
-             ValueStack* state_before, bool needs_patching)
+                         ValueStack* state_before, bool needs_patching)
   : AccessField(obj, offset, field, is_static, state_before, needs_patching)
   , _value(value)
   {
     set_flag(NeedsWriteBarrierFlag, as_ValueType(field_type())->is_object());
 #ifdef ASSERT
@@ -433,12 +433,12 @@
     if (value->as_NewInlineTypeInstance() != NULL) {
       value->as_NewInlineTypeInstance()->set_not_larva_anymore();
     }
   }
 
-  StoreIndexed::StoreIndexed(Value array, Value index, Value length, BasicType elt_type, Value value, ValueStack* state_before,
-               bool check_boolean, bool mismatched)
+  StoreIndexed::StoreIndexed(Value array, Value index, Value length, BasicType elt_type, Value value,
+                             ValueStack* state_before, bool check_boolean, bool mismatched)
   : AccessIndexed(array, index, length, elt_type, state_before, mismatched)
   , _value(value), _check_boolean(check_boolean)
   {
     set_flag(NeedsWriteBarrierFlag, (as_ValueType(elt_type)->is_object()));
     set_flag(NeedsStoreCheckFlag, (as_ValueType(elt_type)->is_object()));
diff a/src/hotspot/share/c1/c1_Instruction.hpp b/src/hotspot/share/c1/c1_Instruction.hpp
--- a/src/hotspot/share/c1/c1_Instruction.hpp
+++ b/src/hotspot/share/c1/c1_Instruction.hpp
@@ -1413,26 +1413,23 @@
       }
     }
   }
 
   virtual bool in_larval_state() const { return _in_larval_state; }
-  virtual void set_not_larva_anymore() {
-    _in_larval_state = false; }
+  virtual void set_not_larva_anymore() { _in_larval_state = false; }
 
   virtual int on_stack_count() { return _on_stack_count; }
   virtual void increment_on_stack_count() { _on_stack_count++; }
   virtual void decrement_on_stack_count() { _on_stack_count--; }
 
-  static void update_larval_state(Value v) {
-    if (v != NULL && v->as_NewInlineTypeInstance() != NULL) {
-      v->as_NewInlineTypeInstance()->set_not_larva_anymore();
-    }
+  void update_larval_state() {
+    set_not_larva_anymore();
   }
 
-  static void update_stack_count(Value v) {
-    if (v != NULL && v->as_NewInlineTypeInstance() != NULL && v->as_NewInlineTypeInstance()->in_larval_state()) {
-      v->as_NewInlineTypeInstance()->decrement_on_stack_count();
+  void update_stack_count() {
+    if (in_larval_state()) {
+      decrement_on_stack_count();
     }
   }
 
 };
 
