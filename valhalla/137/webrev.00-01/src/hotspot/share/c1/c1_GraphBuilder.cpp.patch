diff a/src/hotspot/share/c1/c1_GraphBuilder.cpp b/src/hotspot/share/c1/c1_GraphBuilder.cpp
--- a/src/hotspot/share/c1/c1_GraphBuilder.cpp
+++ b/src/hotspot/share/c1/c1_GraphBuilder.cpp
@@ -1102,40 +1102,41 @@
 
 void GraphBuilder::stack_op(Bytecodes::Code code) {
   switch (code) {
     case Bytecodes::_pop:
       { Value w = state()->raw_pop();
-        NewInlineTypeInstance::update_stack_count(w);
+        update_larva_stack_count(w);
       }
       break;
     case Bytecodes::_pop2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
-        NewInlineTypeInstance::update_stack_count(w1);
-        NewInlineTypeInstance::update_stack_count(w2);
+        update_larva_stack_count(w1);
+        update_larva_stack_count(w2);
       }
       break;
     case Bytecodes::_dup:
       { Value w = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w);
+        update_larval_state(w);
         state()->raw_push(w);
         state()->raw_push(w);
       }
       break;
     case Bytecodes::_dup_x1:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
+        update_larval_state(w1);
         state()->raw_push(w1);
         state()->raw_push(w2);
         state()->raw_push(w1);
       }
       break;
     case Bytecodes::_dup_x2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
+        // special handling for the dup_x2/pop sequence (see JDK-8251046)
         if (w1 != NULL && w1->as_NewInlineTypeInstance() != NULL) {
           ciBytecodeStream s(method());
           s.force_bci(bci());
           s.next();
           if (s.cur_bc() != Bytecodes::_pop) {
@@ -1151,24 +1152,24 @@
       }
       break;
     case Bytecodes::_dup2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
-        NewInlineTypeInstance::update_larval_state(w2);
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w2);
         state()->raw_push(w1);
       }
       break;
     case Bytecodes::_dup2_x1:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
-        NewInlineTypeInstance::update_larval_state(w2);
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w3);
         state()->raw_push(w2);
         state()->raw_push(w1);
@@ -1177,12 +1178,12 @@
     case Bytecodes::_dup2_x2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
         Value w4 = state()->raw_pop();
-        NewInlineTypeInstance::update_larval_state(w1);
-        NewInlineTypeInstance::update_larval_state(w2);
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w4);
         state()->raw_push(w3);
         state()->raw_push(w2);
