diff a/src/hotspot/share/c1/c1_GraphBuilder.cpp b/src/hotspot/share/c1/c1_GraphBuilder.cpp
--- a/src/hotspot/share/c1/c1_GraphBuilder.cpp
+++ b/src/hotspot/share/c1/c1_GraphBuilder.cpp
@@ -949,16 +949,27 @@
 
 void GraphBuilder::load_local(ValueType* type, int index) {
   Value x = state()->local_at(index);
   assert(x != NULL && !x->type()->is_illegal(), "access of illegal local variable");
   push(type, x);
+  if (x->as_NewInlineTypeInstance() != NULL && x->as_NewInlineTypeInstance()->in_larval_state()) {
+    if (x->as_NewInlineTypeInstance()->on_stack_count() == 1) {
+      x->as_NewInlineTypeInstance()->set_not_larva_anymore();
+    } else {
+      x->as_NewInlineTypeInstance()->increment_on_stack_count();
+    }
+  }
 }
 
 
 void GraphBuilder::store_local(ValueType* type, int index) {
   Value x = pop(type);
   store_local(state(), x, index);
+  if (x->as_NewInlineTypeInstance() != NULL) {
+    x->as_NewInlineTypeInstance()->set_local_index(index);
+    x->as_NewInlineTypeInstance()->decrement_on_stack_count();
+  }
 }
 
 
 void GraphBuilder::store_local(ValueStack* state, Value x, int index) {
   if (parsing_jsr()) {
@@ -984,10 +995,14 @@
     }
   }
 
   x->set_local_index(index);
   state->store_local(index, round_fp(x));
+  if (x->as_NewInlineTypeInstance() != NULL) {
+    x->as_NewInlineTypeInstance()->set_local_index(index);
+    x->as_NewInlineTypeInstance()->decrement_on_stack_count();
+  }
 }
 
 
 void GraphBuilder::load_indexed(BasicType type) {
   // In case of in block code motion in range check elimination
@@ -1083,59 +1098,78 @@
   assert(!store_indexed->should_profile() || store_indexed == result, "should not be optimized out");
   _memory->store_value(value);
 
 }
 
-
 void GraphBuilder::stack_op(Bytecodes::Code code) {
   switch (code) {
     case Bytecodes::_pop:
-      { state()->raw_pop();
+      { Value w = state()->raw_pop();
+        update_larva_stack_count(w);
       }
       break;
     case Bytecodes::_pop2:
-      { state()->raw_pop();
-        state()->raw_pop();
+      { Value w1 = state()->raw_pop();
+        Value w2 = state()->raw_pop();
+        update_larva_stack_count(w1);
+        update_larva_stack_count(w2);
       }
       break;
     case Bytecodes::_dup:
       { Value w = state()->raw_pop();
+        update_larval_state(w);
         state()->raw_push(w);
         state()->raw_push(w);
       }
       break;
     case Bytecodes::_dup_x1:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
+        update_larval_state(w1);
         state()->raw_push(w1);
         state()->raw_push(w2);
         state()->raw_push(w1);
       }
       break;
     case Bytecodes::_dup_x2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
+        // special handling for the dup_x2/pop sequence (see JDK-8251046)
+        if (w1 != NULL && w1->as_NewInlineTypeInstance() != NULL) {
+          ciBytecodeStream s(method());
+          s.force_bci(bci());
+          s.next();
+          if (s.cur_bc() != Bytecodes::_pop) {
+            w1->as_NewInlineTypeInstance()->set_not_larva_anymore();
+          }  else {
+            w1->as_NewInlineTypeInstance()->increment_on_stack_count();
+           }
+        }
         state()->raw_push(w1);
         state()->raw_push(w3);
         state()->raw_push(w2);
         state()->raw_push(w1);
       }
       break;
     case Bytecodes::_dup2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w2);
         state()->raw_push(w1);
       }
       break;
     case Bytecodes::_dup2_x1:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w3);
         state()->raw_push(w2);
         state()->raw_push(w1);
@@ -1144,10 +1178,12 @@
     case Bytecodes::_dup2_x2:
       { Value w1 = state()->raw_pop();
         Value w2 = state()->raw_pop();
         Value w3 = state()->raw_pop();
         Value w4 = state()->raw_pop();
+        update_larval_state(w1);
+        update_larval_state(w2);
         state()->raw_push(w2);
         state()->raw_push(w1);
         state()->raw_push(w4);
         state()->raw_push(w3);
         state()->raw_push(w2);
@@ -1939,69 +1975,39 @@
   ValueStack* state_before = copy_state_before();
 
   Value val = pop(type);
   Value obj = apop();
 
-  if (!needs_patching && obj->is_optimizable_for_withfield()) {
-    int astore_index;
-    ciBytecodeStream s(method());
-    s.force_bci(bci());
-    s.next();
-    switch (s.cur_bc()) {
-    case Bytecodes::_astore:    astore_index = s.get_index(); break;
-    case Bytecodes::_astore_0:  astore_index = 0; break;
-    case Bytecodes::_astore_1:  astore_index = 1; break;
-    case Bytecodes::_astore_2:  astore_index = 2; break;
-    case Bytecodes::_astore_3:  astore_index = 3; break;
-    default: astore_index = -1;
-    }
-
-    if (astore_index >= 0 && obj == state()->local_at(astore_index)) {
-      // We have a sequence like this, where we load a value object from a local slot,
-      // and overwrite the same local slot with a modified copy of the inline object.
-      //      defaultvalue #1 // class compiler/valhalla/valuetypes/MyValue1
-      //      astore 9
-      //      ...
-      //      iload_0
-      //      aload 9
-      //      swap
-      //      withfield #7 // Field x:I
-      //      astore 9
-      // If this object was created by defaultvalue, and has not escaped, and is not stored
-      // in any other local slots, we can effectively treat the withfield/astore
-      // sequence as a single putfield bytecode.
-      push(objectType, obj);
-      push(type, val);
-      access_field(Bytecodes::_withfield);
-      stream()->next(); // skip the next astore/astore_n bytecode.
-      return;
-    }
-  }
-
-  assert(holder->is_inlinetype(), "must be an inline klass");
+  assert(holder->is_inlinetype(), "must be a value klass");
   // Save the entire state and re-execute on deopt when executing withfield
   state_before->set_should_reexecute(true);
-  NewInlineTypeInstance* new_instance = new NewInlineTypeInstance(holder->as_inline_klass(), state_before, false);
-  _memory->new_instance(new_instance);
-  apush(append_split(new_instance));
+  NewInlineTypeInstance* new_instance;
+  if (obj->as_NewInlineTypeInstance() != NULL && obj->as_NewInlineTypeInstance()->in_larval_state()) {
+    new_instance = obj->as_NewInlineTypeInstance();
+    apush(append_split(new_instance));
+  } else {
+    new_instance = new NewInlineTypeInstance(holder->as_inline_klass(), state_before, false);
+    _memory->new_instance(new_instance);
+    apush(append_split(new_instance));
 
-  for (int i = 0; i < holder->nof_nonstatic_fields(); i++) {
-    ciField* field = holder->nonstatic_field_at(i);
-    int off = field->offset();
+    for (int i = 0; i < holder->nof_nonstatic_fields(); i++) {
+      ciField* field = holder->nonstatic_field_at(i);
+      int off = field->offset();
 
-    if (field->offset() != offset) {
-      if (field->is_flattened()) {
-        assert(field->type()->is_inlinetype(), "Sanity check");
-        assert(field->type()->is_inlinetype(), "Only inline types can be flattened");
-        ciInlineKlass* vk = field->type()->as_inline_klass();
-        copy_inline_content(vk, obj, off, new_instance, vk->first_field_offset(), state_before, needs_patching);
-      } else {
-        // Only load those fields who are not modified
-        LoadField* load = new LoadField(obj, off, field, false, state_before, needs_patching);
-        Value replacement = append(load);
-        StoreField* store = new StoreField(new_instance, off, field, replacement, false, state_before, needs_patching);
-        append(store);
+      if (field->offset() != offset) {
+        if (field->is_flattened()) {
+          assert(field->type()->is_inlinetype(), "Sanity check");
+          assert(field->type()->is_inlinetype(), "Only inline types can be flattened");
+          ciInlineKlass* vk = field->type()->as_inline_klass();
+          copy_inline_content(vk, obj, off, new_instance, vk->first_field_offset(), state_before, needs_patching);
+        } else {
+          // Only load those fields who are not modified
+          LoadField* load = new LoadField(obj, off, field, false, state_before, needs_patching);
+          Value replacement = append(load);
+          StoreField* store = new StoreField(new_instance, off, field, replacement, false, state_before, needs_patching);
+          append(store);
+        }
       }
     }
   }
 
   // Field to modify
