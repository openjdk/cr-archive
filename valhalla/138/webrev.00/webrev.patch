diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -5258,11 +5258,11 @@
                                                  .anyMatch(s -> s.tsym.kind == Kind.ERR);
                     if (!hasErrorSuper) {
                         log.error(TreeInfo.diagnosticPositionFor(c, env.tree), Errors.NonSealedWithNoSealedSupertype(c));
                     }
                 }
-            } else {
+            } else if ((c.flags_field & Flags.COMPOUND) == 0) {
                 if (c.isLocal() && !c.isEnum()) {
                     log.error(TreeInfo.diagnosticPositionFor(c, env.tree), Errors.LocalClassesCantExtendSealed);
                 }
 
                 for (ClassSymbol supertypeSym : sealedSupers) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
@@ -21,10 +21,11 @@
  * questions.
  */
 
 /**
  * @test
+ * @bug 8251116
  * @summary Test that values code like a class - i.e are accepted in some places where only references used be, when suitable reference projection is used.
    @compile  ValuesAsRefs.java
  * @run main/othervm ValuesAsRefs
  */
 import java.util.ArrayList;
