diff a/src/hotspot/cpu/x86/gc/g1/g1BarrierSetAssembler_x86.cpp b/src/hotspot/cpu/x86/gc/g1/g1BarrierSetAssembler_x86.cpp
--- a/src/hotspot/cpu/x86/gc/g1/g1BarrierSetAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/gc/g1/g1BarrierSetAssembler_x86.cpp
@@ -200,14 +200,22 @@
   // Record the previous value
   __ movptr(Address(tmp, 0), pre_val);
   __ jmp(done);
 
   __ bind(runtime);
-  // FIXME
   // Barriers might be emitted when converting between (scalarized) calling conventions for inline
-  // types. Save all registers until JDK-8232094 is fixed to avoid overwriting argument registers.
+  // types. Save all argument registers before calling into the runtime.
   __ pusha();
+  __ subptr(rsp, 64);
+  __ movdbl(Address(rsp, 0),  j_farg0);
+  __ movdbl(Address(rsp, 8),  j_farg1);
+  __ movdbl(Address(rsp, 16), j_farg2);
+  __ movdbl(Address(rsp, 24), j_farg3);
+  __ movdbl(Address(rsp, 32), j_farg4);
+  __ movdbl(Address(rsp, 40), j_farg5);
+  __ movdbl(Address(rsp, 48), j_farg6);
+  __ movdbl(Address(rsp, 56), j_farg7);
 
   // Calling the runtime using the regular call_VM_leaf mechanism generates
   // code (generated by InterpreterMacroAssember::call_VM_leaf_base)
   // that checks that the *(ebp+frame::interpreter_frame_last_sp) == NULL.
   //
@@ -235,11 +243,22 @@
     __ MacroAssembler::call_VM_leaf_base(CAST_FROM_FN_PTR(address, G1BarrierSetRuntime::write_ref_field_pre_entry), 2);
   } else {
     __ call_VM_leaf(CAST_FROM_FN_PTR(address, G1BarrierSetRuntime::write_ref_field_pre_entry), pre_val, thread);
   }
 
+  // Restore registers
+  __ movdbl(j_farg0, Address(rsp, 0));
+  __ movdbl(j_farg1, Address(rsp, 8));
+  __ movdbl(j_farg2, Address(rsp, 16));
+  __ movdbl(j_farg3, Address(rsp, 24));
+  __ movdbl(j_farg4, Address(rsp, 32));
+  __ movdbl(j_farg5, Address(rsp, 40));
+  __ movdbl(j_farg6, Address(rsp, 48));
+  __ movdbl(j_farg7, Address(rsp, 56));
+  __ addptr(rsp, 64);
   __ popa();
+
   __ bind(done);
 }
 
 void G1BarrierSetAssembler::g1_write_barrier_post(MacroAssembler* masm,
                                                   Register store_addr,
@@ -310,24 +329,43 @@
   __ movl(Address(tmp2, 0), card_addr);
 #endif
   __ jmp(done);
 
   __ bind(runtime);
-  // FIXME
   // Barriers might be emitted when converting between (scalarized) calling conventions for inline
-  // types. Save all registers until JDK-8232094 is fixed to avoid overwriting argument registers.
+  // types. Save all argument registers before calling into the runtime.
   __ pusha();
+  __ subptr(rsp, 64);
+  __ movdbl(Address(rsp, 0),  j_farg0);
+  __ movdbl(Address(rsp, 8),  j_farg1);
+  __ movdbl(Address(rsp, 16), j_farg2);
+  __ movdbl(Address(rsp, 24), j_farg3);
+  __ movdbl(Address(rsp, 32), j_farg4);
+  __ movdbl(Address(rsp, 40), j_farg5);
+  __ movdbl(Address(rsp, 48), j_farg6);
+  __ movdbl(Address(rsp, 56), j_farg7);
 
 #ifdef _LP64
   __ call_VM_leaf(CAST_FROM_FN_PTR(address, G1BarrierSetRuntime::write_ref_field_post_entry), card_addr, r15_thread);
 #else
   __ push(thread);
   __ call_VM_leaf(CAST_FROM_FN_PTR(address, G1BarrierSetRuntime::write_ref_field_post_entry), card_addr, thread);
   __ pop(thread);
 #endif
 
+  // Restore registers
+  __ movdbl(j_farg0, Address(rsp, 0));
+  __ movdbl(j_farg1, Address(rsp, 8));
+  __ movdbl(j_farg2, Address(rsp, 16));
+  __ movdbl(j_farg3, Address(rsp, 24));
+  __ movdbl(j_farg4, Address(rsp, 32));
+  __ movdbl(j_farg5, Address(rsp, 40));
+  __ movdbl(j_farg6, Address(rsp, 48));
+  __ movdbl(j_farg7, Address(rsp, 56));
+  __ addptr(rsp, 64);
   __ popa();
+
   __ bind(done);
 }
 
 void G1BarrierSetAssembler::oop_store_at(MacroAssembler* masm, DecoratorSet decorators, BasicType type,
                                          Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) {
