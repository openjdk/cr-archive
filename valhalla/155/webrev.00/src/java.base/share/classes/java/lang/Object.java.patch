diff a/src/java.base/share/classes/java/lang/Object.java b/src/java.base/share/classes/java/lang/Object.java
--- a/src/java.base/share/classes/java/lang/Object.java
+++ b/src/java.base/share/classes/java/lang/Object.java
@@ -24,11 +24,13 @@
  */
 
 package java.lang;
 
 import jdk.internal.HotSpotIntrinsicCandidate;
+import jdk.internal.access.SharedSecrets;
 
+import java.lang.invoke.ValueBootstrapMethods;
 import java.util.Objects;
 
 /**
  * Class {@code Object} is the root of the class hierarchy.
  * Every class has {@code Object} as a superclass. All objects,
@@ -225,25 +227,35 @@
      * "textually represents" this object. The result should
      * be a concise but informative representation that is easy for a
      * person to read.
      * It is recommended that all subclasses override this method.
      * <p>
-     * The {@code toString} method for class {@code Object}
-     * returns a string consisting of the name of the class of which the
-     * object is an instance, the at-sign character `{@code @}', and
-     * the unsigned hexadecimal representation of the hash code of the
-     * object. In other words, this method returns a string equal to the
+     * If this object is an instance of an identity class, then
+     * the {@code toString} method returns a string consisting of the name
+     * of the class of which the object is an instance, the at-sign character
+     * `{@code @}', and the unsigned hexadecimal representation of the hash code
+     * of the object. In other words, this method returns a string equal to the
      * value of:
      * <blockquote>
      * <pre>
      * getClass().getName() + '@' + Integer.toHexString(hashCode())
      * </pre></blockquote>
+     * <p>
+     * If this object is an instance of an inline class, then
+     * the {@code toString} method returns a string which contains
+     * the name of the inline class, and string representations of
+     * all its fields.  The precise format produced by this method
+     * is unspecified and subject to change.
      *
      * @return  a string representation of the object.
      */
     public String toString() {
-        return getClass().getName() + "@" + Integer.toHexString(hashCode());
+        if (getClass().isInlineClass()) {
+            return SharedSecrets.getJavaLangInvokeAccess().inlineObjectToString(this);
+        } else {
+            return getClass().getName() + "@" + Integer.toHexString(hashCode());
+        }
     }
 
     /**
      * Wakes up a single thread that is waiting on this object's
      * monitor. If any threads are waiting on this object, one of them
