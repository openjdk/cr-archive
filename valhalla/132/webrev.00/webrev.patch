diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
@@ -270,11 +270,11 @@
                     /* Temporary treatment for inline class: Given an inline class V that implements
                        I1, I2, ... In, V.class is typed to be Class<? extends Object & I1 & I2 .. & In>
                     */
                     if (type.isValue()) {
                         List<Type> bounds = List.of(objectType).appendList(((ClassSymbol) type.tsym).getInterfaces());
-                        arg = new WildcardType(types.makeIntersectionType(bounds), BoundKind.EXTENDS, boundClass);
+                        arg = new WildcardType(bounds.size() > 1 ? types.makeIntersectionType(bounds) : objectType, BoundKind.EXTENDS, boundClass);
                     } else {
                         arg = types.erasure(type);
                     }
                 }
                 else if (type.isPrimitiveOrVoid())
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -2541,11 +2541,11 @@
                 // Temporary treatment for inline class: Given an inline class V that implements
                 // I1, I2, ... In, v.getClass() is typed to be Class<? extends Object & I1 & I2 .. & In>
                 Type wcb;
                 if (qualifierType.isValue()) {
                     List<Type> bounds = List.of(syms.objectType).appendList(((ClassSymbol) qualifierType.tsym).getInterfaces());
-                    wcb = types.makeIntersectionType(bounds);
+                    wcb = bounds.size() > 1 ? types.makeIntersectionType(bounds) : syms.objectType;
                 } else {
                     wcb = types.erasure(qualifierType);
                 }
                 return new ClassType(restype.getEnclosingType(),
                         List.of(new WildcardType(wcb,
diff a/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingNegativeTest.java b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingNegativeTest.java
--- /dev/null
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingNegativeTest.java
@@ -0,0 +1,41 @@
+/*
+ * @test /nodynamiccopyright/
+ * @bug 8221323
+ * @summary  Javac should support class literals for projection types.
+ * @compile/fail/ref=ClassLiteralTypingNegativeTest.out -XDrawDiagnostics ClassLiteralTypingNegativeTest.java
+ */
+
+public class ClassLiteralTypingNegativeTest {
+
+    public static inline class Foo {
+        final int value = 0;
+
+        public static void main(String[] args) {
+            Class<? extends Foo.ref> cFooRef = Foo.class; // Error
+            cFooRef = new Foo().getClass(); // Error
+            cFooRef = Foo.ref.class; // OK.
+            cFooRef = Foo.val.class; // Error.
+            Foo.val xv = new Foo();
+            cFooRef = xv.getClass(); // Error
+            Foo.ref xr = new Foo();
+            cFooRef = xr.getClass(); // OK.
+        }
+    }
+
+    interface I {}
+
+    public static inline class Bar implements I {
+        final int value = 0;
+
+        public static void main(String[] args) {
+            Class<? extends Bar.ref> cBarRef = Bar.class; // Error
+            cBarRef = new Bar().getClass(); // Error
+            cBarRef = Bar.ref.class; // OK.
+            cBarRef = Bar.val.class; // Error.
+            Bar.val xv = new Bar();
+            cBarRef = xv.getClass(); // Error
+            Bar.ref xr = new Bar();
+            cBarRef = xr.getClass(); // OK.
+        }
+    }
+}
diff a/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingNegativeTest.out b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingNegativeTest.out
--- /dev/null
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingNegativeTest.out
@@ -0,0 +1,9 @@
+ClassLiteralTypingNegativeTest.java:14:51: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo$ref>)
+ClassLiteralTypingNegativeTest.java:15:41: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo$ref>)
+ClassLiteralTypingNegativeTest.java:17:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo$ref>)
+ClassLiteralTypingNegativeTest.java:19:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo$ref>)
+ClassLiteralTypingNegativeTest.java:31:51: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar$ref>)
+ClassLiteralTypingNegativeTest.java:32:41: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar$ref>)
+ClassLiteralTypingNegativeTest.java:34:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar$ref>)
+ClassLiteralTypingNegativeTest.java:36:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar$ref>)
+8 errors
