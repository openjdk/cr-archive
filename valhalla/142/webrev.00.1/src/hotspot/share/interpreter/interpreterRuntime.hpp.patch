diff a/src/hotspot/share/interpreter/interpreterRuntime.hpp b/src/hotspot/share/interpreter/interpreterRuntime.hpp
--- a/src/hotspot/share/interpreter/interpreterRuntime.hpp
+++ b/src/hotspot/share/interpreter/interpreterRuntime.hpp
@@ -59,10 +59,20 @@
   static void    _new          (JavaThread* thread, ConstantPool* pool, int index);
   static void    newarray      (JavaThread* thread, BasicType type, jint size);
   static void    anewarray     (JavaThread* thread, ConstantPool* pool, int index, jint size);
   static void    multianewarray(JavaThread* thread, jint* first_size_address);
   static void    register_finalizer(JavaThread* thread, oopDesc* obj);
+  static void    defaultvalue  (JavaThread* thread, ConstantPool* pool, int index);
+  static int     withfield     (JavaThread* thread, ConstantPoolCache* cp_cache);
+  static void    uninitialized_static_inline_type_field(JavaThread* thread, oopDesc* mirror, int offset);
+  static void    write_heap_copy (JavaThread* thread, oopDesc* value, int offset, oopDesc* rcv);
+  static void    read_inlined_field(JavaThread* thread, oopDesc* value, int index, Klass* field_holder);
+
+  static void value_array_load(JavaThread* thread, arrayOopDesc* array, int index);
+  static void value_array_store(JavaThread* thread, void* val, arrayOopDesc* array, int index);
+
+  static jboolean is_substitutable(JavaThread* thread, oopDesc* aobj, oopDesc* bobj);
 
   // Quicken instance-of and check-cast bytecodes
   static void    quicken_io_cc(JavaThread* thread);
 
   // Exceptions thrown by the interpreter
@@ -70,10 +80,11 @@
   static void    throw_AbstractMethodErrorWithMethod(JavaThread* thread, Method* oop);
   static void    throw_AbstractMethodErrorVerbose(JavaThread* thread,
                                                   Klass* recvKlass,
                                                   Method* missingMethod);
 
+  static void    throw_InstantiationError(JavaThread* thread);
   static void    throw_IncompatibleClassChangeError(JavaThread* thread);
   static void    throw_IncompatibleClassChangeErrorVerbose(JavaThread* thread,
                                                            Klass* resc,
                                                            Klass* interfaceKlass);
   static void    throw_StackOverflowError(JavaThread* thread);
