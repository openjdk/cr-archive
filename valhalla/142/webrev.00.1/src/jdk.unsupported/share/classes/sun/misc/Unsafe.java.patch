diff a/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java b/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java
--- a/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java
+++ b/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java
@@ -643,10 +643,13 @@
         }
         Class<?> declaringClass = f.getDeclaringClass();
         if (declaringClass.isHidden()) {
             throw new UnsupportedOperationException("can't get field offset on a hidden class: " + f);
         }
+        if (f.getDeclaringClass().isInlineClass()) {
+            throw new UnsupportedOperationException("can't get field offset on an inline class: " + f);
+        }
         if (declaringClass.isRecord()) {
             throw new UnsupportedOperationException("can't get field offset on a record (preview): " + f);
         }
         return theInternalUnsafe.objectFieldOffset(f);
     }
@@ -676,10 +679,13 @@
         }
         Class<?> declaringClass = f.getDeclaringClass();
         if (declaringClass.isHidden()) {
             throw new UnsupportedOperationException("can't get field offset on a hidden class: " + f);
         }
+        if (f.getDeclaringClass().isInlineClass()) {
+            throw new UnsupportedOperationException("can't get static field offset on an inline class: " + f);
+        }
         if (declaringClass.isRecord()) {
             throw new UnsupportedOperationException("can't get field offset on a record (preview): " + f);
         }
         return theInternalUnsafe.staticFieldOffset(f);
     }
@@ -702,10 +708,13 @@
         }
         Class<?> declaringClass = f.getDeclaringClass();
         if (declaringClass.isHidden()) {
             throw new UnsupportedOperationException("can't get base address on a hidden class: " + f);
         }
+        if (f.getDeclaringClass().isInlineClass()) {
+            throw new UnsupportedOperationException("can't get base address on an inline class: " + f);
+        }
         if (declaringClass.isRecord()) {
             throw new UnsupportedOperationException("can't get base address on a record (preview): " + f);
         }
         return theInternalUnsafe.staticFieldBase(f);
     }
