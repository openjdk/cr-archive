diff a/src/hotspot/share/runtime/vmOperations.hpp b/src/hotspot/share/runtime/vmOperations.hpp
--- a/src/hotspot/share/runtime/vmOperations.hpp
+++ b/src/hotspot/share/runtime/vmOperations.hpp
@@ -108,11 +108,10 @@
   template(JVMCIResizeCounters)                   \
   template(ClassLoaderStatsOperation)             \
   template(ClassLoaderHierarchyOperation)         \
   template(DumpHashtable)                         \
   template(DumpTouchedMethods)                    \
-  template(MarkActiveNMethods)                    \
   template(PrintCompileQueue)                     \
   template(PrintClassHierarchy)                   \
   template(ThreadSuspend)                         \
   template(ThreadsSuspendJVMTI)                   \
   template(ICBufferFull)                          \
@@ -129,27 +128,23 @@
     VMOp_Terminating
   };
 
  private:
   Thread*         _calling_thread;
-  uint64_t        _timestamp;
   VM_Operation*   _next;
   VM_Operation*   _prev;
 
   // The VM operation name array
   static const char* _names[];
 
  public:
-  VM_Operation() : _calling_thread(NULL), _timestamp(0),  _next(NULL), _prev(NULL) {}
+  VM_Operation() : _calling_thread(NULL), _next(NULL), _prev(NULL) {}
 
   // VM operation support (used by VM thread)
   Thread* calling_thread() const                 { return _calling_thread; }
   void set_calling_thread(Thread* thread);
 
-  uint64_t timestamp() const              { return _timestamp; }
-  void set_timestamp(uint64_t timestamp)  { _timestamp = timestamp; }
-
   // Called by VM thread - does in turn invoke doit(). Do not override this
   void evaluate();
 
   // evaluate() is called by the VMThread and in turn calls doit().
   // If the thread invoking VMThread::execute((VM_Operation*) is a JavaThread,
