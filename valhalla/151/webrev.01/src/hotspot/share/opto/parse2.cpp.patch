diff a/src/hotspot/share/opto/parse2.cpp b/src/hotspot/share/opto/parse2.cpp
--- a/src/hotspot/share/opto/parse2.cpp
+++ b/src/hotspot/share/opto/parse2.cpp
@@ -79,17 +79,17 @@
   Node* ary = pop();
 
   // Handle inline type arrays
   const TypeOopPtr* elemptr = elemtype->make_oopptr();
   const TypeAryPtr* ary_t = _gvn.type(ary)->is_aryptr();
-  if (elemtype->isa_inlinetype() != NULL) {
+  if (ary_t->is_flat()) {
     C->set_flattened_accesses();
     // Load from flattened inline type array
     Node* vt = InlineTypeNode::make_from_flattened(this, elemtype->inline_klass(), ary, adr);
     push(vt);
     return;
-  } else if (elemptr != NULL && elemptr->is_inlinetypeptr() && !elemptr->maybe_null()) {
+  } else if (ary_t->is_null_free()) {
     // Load from non-flattened inline type array (elements can never be null)
     bt = T_INLINE_TYPE;
   } else if (!ary_t->is_not_flat()) {
     // Cannot statically determine if array is flattened, emit runtime check
     assert(UseFlatArray && is_reference_type(bt) && elemptr->can_be_inline_type() && !ary_t->klass_is_exact() && !ary_t->is_not_null_free() &&
@@ -187,11 +187,11 @@
         // Prevent any use of the newly allocated inline type before it is fully initialized
         alloc_obj = new CastPPNode(alloc_obj, _gvn.type(alloc_obj), true);
         alloc_obj->set_req(0, control());
         alloc_obj = _gvn.transform(alloc_obj);
 
-        const Type* unknown_value = elemptr->is_instptr()->cast_to_flat_array();
+        const Type* unknown_value = elemptr->is_instptr()->cast_to_flatten_array();
         alloc_obj = _gvn.transform(new CheckCastPPNode(control(), alloc_obj, unknown_value));
 
         ideal.sync_kit(this);
         ideal.set(res, alloc_obj);
       }
@@ -269,11 +269,11 @@
       Node* cast = _gvn.transform(new CheckCastPPNode(control(), ary, ary_t));
       replace_in_map(ary, cast);
       ary = cast;
     }
 
-    if (ary_t->elem()->isa_inlinetype() != NULL) {
+    if (ary_t->is_flat()) {
       // Store to flattened inline type array
       C->set_flattened_accesses();
       if (!cast_val->is_InlineType()) {
         inc_sp(3);
         cast_val = null_check(cast_val);
@@ -285,11 +285,11 @@
       PreserveReexecuteState preexecs(this);
       inc_sp(3);
       jvms()->set_should_reexecute(true);
       cast_val->as_InlineType()->store_flattened(this, ary, adr, NULL, 0, MO_UNORDERED | IN_HEAP | IS_ARRAY);
       return;
-    } else if (elemtype->is_inlinetypeptr() && !elemtype->maybe_null()) {
+    } else if (ary_t->is_null_free()) {
       // Store to non-flattened inline type array (elements can never be null)
       if (!cast_val->is_InlineType() && tval->maybe_null()) {
         inc_sp(3);
         cast_val = null_check(cast_val);
         if (stopped()) return;
