diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/InlineTypeTest.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/InlineTypeTest.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/InlineTypeTest.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/InlineTypeTest.java
@@ -115,11 +115,11 @@
     protected static final int COMP_LEVEL_FULL_PROFILE      =  3;     // C1, invocation & backedge counters + mdo
     protected static final int COMP_LEVEL_FULL_OPTIMIZATION =  4;     // C2 or JVMCI
 
     protected static final boolean TieredCompilation = (Boolean)WHITE_BOX.getVMFlag("TieredCompilation");
     protected static final long TieredStopAtLevel = (Long)WHITE_BOX.getVMFlag("TieredStopAtLevel");
-    static final boolean TEST_C1 = TieredStopAtLevel < COMP_LEVEL_FULL_OPTIMIZATION;
+    static final boolean TEST_C1 = TieredCompilation && TieredStopAtLevel < COMP_LEVEL_FULL_OPTIMIZATION;
 
     // Random test values
     public static final int  rI = Utils.getRandomInstance().nextInt() % 1000;
     public static final long rL = Utils.getRandomInstance().nextLong() % 1000;
 
@@ -220,10 +220,11 @@
     protected static final String NULL_CHECK_TRAP = START + "CallStaticJava" + MID + "uncommon_trap.*null_check" + END;
     protected static final String RANGE_CHECK_TRAP = START + "CallStaticJava" + MID + "uncommon_trap.*range_check" + END;
     protected static final String UNHANDLED_TRAP = START + "CallStaticJava" + MID + "uncommon_trap.*unhandled" + END;
     protected static final String PREDICATE_TRAP = START + "CallStaticJava" + MID + "uncommon_trap.*predicate" + END;
     protected static final String MEMBAR = START + "MemBar" + MID + END;
+    protected static final String CHECKCAST_ARRAY = "(cmp.*precise klass \\[(L|Q)compiler/valhalla/inlinetypes/MyValue.*" + END;
 
     public static String[] concat(String prefix[], String... extra) {
         ArrayList<String> list = new ArrayList<String>();
         if (prefix != null) {
             for (String s : prefix) {
@@ -674,21 +675,23 @@
             int warmup = anno == null ? WARMUP : anno.value();
             for (int i = 0; i < warmup; ++i) {
                 verifier.invoke(this, true);
             }
             boolean osrOnly = (test.getAnnotation(OSRCompileOnly.class) != null);
+            int compLevel = getCompLevel(test.getAnnotation(Test.class));
 
             // C1 generates a lot of code when VerifyOops is enabled and may run out of space (for a small
             // number of test cases).
             boolean maybeCodeBufferOverflow = (TEST_C1 && VerifyOops);
 
             if (osrOnly) {
                 long started = System.currentTimeMillis();
                 boolean stateCleared = false;
                 for (;;) {
                     long elapsed = System.currentTimeMillis() - started;
-                    if (maybeCodeBufferOverflow && elapsed > 5000 && !WHITE_BOX.isMethodCompiled(test, false)) {
+                    int level = WHITE_BOX.getMethodCompilationLevel(test);
+                    if (maybeCodeBufferOverflow && elapsed > 5000 && (!WHITE_BOX.isMethodCompiled(test, false) || level != compLevel)) {
                         System.out.println("Temporarily disabling VerifyOops");
                         try {
                             WHITE_BOX.setBooleanVMFlag("VerifyOops", false);
                             if (!stateCleared) {
                                 WHITE_BOX.clearMethodState(test);
@@ -711,23 +714,25 @@
                         // Don't control compilation if -Xcomp is enabled, or if compiler is disabled
                         break;
                     }
                     Asserts.assertTrue(OSR_TEST_TIMEOUT < 0 || elapsed < OSR_TEST_TIMEOUT, test + " not compiled after " + OSR_TEST_TIMEOUT + " ms");
                 }
-                Asserts.assertTrue(XCOMP || STRESS_CC || !USE_COMPILER || WHITE_BOX.isMethodCompiled(test, false), test + " not compiled");
             } else {
-                int compLevel = getCompLevel(test.getAnnotation(Test.class));
                 // Trigger compilation
                 enqueueMethodForCompilation(test, compLevel);
                 if (maybeCodeBufferOverflow && !WHITE_BOX.isMethodCompiled(test, false)) {
                     // Let's disable VerifyOops temporarily and retry.
                     WHITE_BOX.setBooleanVMFlag("VerifyOops", false);
                     WHITE_BOX.clearMethodState(test);
                     enqueueMethodForCompilation(test, compLevel);
                     WHITE_BOX.setBooleanVMFlag("VerifyOops", true);
                 }
-                Asserts.assertTrue(STRESS_CC || !USE_COMPILER || WHITE_BOX.isMethodCompiled(test, false), test + " not compiled");
+                if (!STRESS_CC && USE_COMPILER) {
+                    Asserts.assertTrue(WHITE_BOX.isMethodCompiled(test, false), test + " not compiled");
+                    int level = WHITE_BOX.getMethodCompilationLevel(test);
+                    Asserts.assertEQ(level, compLevel, "Unexpected compilation level for " + test);
+                }
                 // Check result
                 verifier.invoke(this, false);
             }
             if (PRINT_TIMES || VERBOSE) {
                 long endTime = System.nanoTime();
@@ -783,11 +788,11 @@
             }
         }
         if (!TEST_C1 && compLevel < COMP_LEVEL_FULL_OPTIMIZATION) {
             compLevel = COMP_LEVEL_FULL_OPTIMIZATION;
         }
-        if (compLevel > (int)TieredStopAtLevel) {
+        if (TieredCompilation && compLevel > (int)TieredStopAtLevel) {
             compLevel = (int)TieredStopAtLevel;
         }
         return compLevel;
     }
 
