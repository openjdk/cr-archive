diff a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -3891,23 +3891,10 @@
   Node* original          = argument(0);
   Node* start             = is_copyOfRange? argument(1): intcon(0);
   Node* end               = is_copyOfRange? argument(2): argument(1);
   Node* array_type_mirror = is_copyOfRange? argument(3): argument(2);
 
-  const TypeAryPtr* original_t = _gvn.type(original)->isa_aryptr();
-  const TypeInstPtr* mirror_t = _gvn.type(array_type_mirror)->isa_instptr();
-  if (EnableValhalla && UseFlatArray &&
-      (original_t == NULL || mirror_t == NULL ||
-       (mirror_t->java_mirror_type() == NULL &&
-        (original_t->elem()->isa_inlinetype() ||
-         (original_t->elem()->make_oopptr() != NULL &&
-          original_t->elem()->make_oopptr()->can_be_inline_type()))))) {
-    // We need to know statically if the copy is to a flattened array
-    // or not but can't tell.
-    return false;
-  }
-
   Node* newcopy = NULL;
 
   // Set the original stack and the reexecute bit for the interpreter to reexecute
   // the bytecode that invokes Arrays.copyOf if deoptimization happens.
   { PreserveReexecuteState preexecs(this);
@@ -3935,11 +3922,11 @@
     Node* not_objArray = !bs->array_copy_requires_gc_barriers(false, T_OBJECT, false, BarrierSetC2::Parsing) ?
         generate_typeArray_guard(klass_node, bailout) : generate_non_objArray_guard(klass_node, bailout);
     if (not_objArray != NULL) {
       // Improve the klass node's type from the new optimistic assumption:
       ciKlass* ak = ciArrayKlass::make(env()->Object_klass());
-      const Type* akls = TypeKlassPtr::make(TypePtr::NotNull, ak, Type::Offset(0), false);
+      const Type* akls = TypeKlassPtr::make(TypePtr::NotNull, ak, Type::Offset(0));
       Node* cast = new CastPPNode(klass_node, akls);
       cast->init_req(0, control());
       klass_node = _gvn.transform(cast);
     }
 
@@ -3966,20 +3953,21 @@
     }
 
     if (UseFlatArray) {
       // Either both or neither new array klass and original array
       // klass must be flattened
+      const TypeAryPtr* t_original = _gvn.type(original)->isa_aryptr();
       Node* is_flat = generate_flatArray_guard(klass_node, NULL);
-      if (!original_t->is_not_flat()) {
+      if (t_original == NULL || !t_original->is_not_flat()) {
         generate_flatArray_guard(original_kls, bailout);
       }
       if (is_flat != NULL) {
         RegionNode* r = new RegionNode(2);
         record_for_igvn(r);
         r->init_req(1, control());
         set_control(is_flat);
-        if (!original_t->is_not_flat()) {
+        if (t_original == NULL || !t_original->is_not_flat()) {
           generate_flatArray_guard(original_kls, r);
         }
         bailout->add_req(control());
         set_control(_gvn.transform(r));
       }
@@ -5063,13 +5051,17 @@
       }
       if (could_have_src && could_have_dest) {
         // If we can have both exact types, emit the missing guards
         if (could_have_src && !src_spec) {
           src = maybe_cast_profiled_obj(src, src_k, true);
+          src_type = _gvn.type(src);
+          top_src = src_type->isa_aryptr();
         }
         if (could_have_dest && !dest_spec) {
           dest = maybe_cast_profiled_obj(dest, dest_k, true);
+          dest_type = _gvn.type(dest);
+          top_dest = dest_type->isa_aryptr();
         }
       }
     }
   }
 
@@ -5141,17 +5133,20 @@
     const Type* toop = TypeOopPtr::make_from_klass(dest_klass_t->klass());
     src = _gvn.transform(new CheckCastPPNode(control(), src, toop));
     src_type = _gvn.type(src);
     top_src  = src_type->isa_aryptr();
 
-    if (top_dest != NULL && !top_dest->elem()->isa_inlinetype() && !top_dest->is_not_flat()) {
+    if (top_dest != NULL && !top_dest->is_flat() && !top_dest->is_not_flat()) {
       generate_flatArray_guard(dest_klass, slow_region);
+      top_dest = top_dest->cast_to_not_flat();
+      dest = _gvn.transform(new CheckCastPPNode(control(), dest, top_dest));
     }
-
-    if (top_src != NULL && !top_src->elem()->isa_inlinetype() && !top_src->is_not_flat()) {
+    if (top_src != NULL && !top_src->is_flat() && !top_src->is_not_flat()) {
       Node* src_klass = load_object_klass(src);
       generate_flatArray_guard(src_klass, slow_region);
+      top_src = top_src->cast_to_not_flat();
+      src = _gvn.transform(new CheckCastPPNode(control(), src, top_src));
     }
 
     {
       PreserveJVMState pjvms(this);
       set_control(_gvn.transform(slow_region));
