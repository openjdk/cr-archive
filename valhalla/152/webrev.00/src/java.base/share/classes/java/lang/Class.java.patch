diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -577,38 +577,111 @@
      *         this class if this class is the value projection type
      *         or the reference projection type of an inline class;
      *         an empty {@link Optional} otherwise
      * @since Valhalla
      */
-    public Optional<Class<T>> valueType() {
-        return Optional.ofNullable(valType);
+    public Optional<Class<?>> valueType() {
+        if (isPrimitive() || isInterface() || isArray())
+            return Optional.empty();
+
+        ensureProjectionTypesInited();
+        System.out.println(getName() + " " + Arrays.toString(projectionTypes));
+        return projectionTypes.length > 0 ? Optional.of(projectionTypes[0]) : Optional.empty();
     }
 
     /**
-     * Returns a {@code Class} object representing the <em>reference projection</em>
-     * type of this class if this {@code Class} represents an
-     * {@linkplain #isInlineClass() inline class} with a reference projection
-     * type. If this {@code Class} represents the reference projection type
+     * Returns a {@code Class} object representing the reference type
+     * of this class.
+     * <p>
+     * If this {@code Class} represents an {@linkplain #isInlineClass()
+     * inline class} with a reference projection type, then this method
+     * returns the <em>reference projection</em> type of this inline class.
+     * <p>
+     * If this {@code Class} represents the reference projection type
      * of an inline class, then this method returns this class.
-     * If this class is not an {@linkplain #isInlineClass() inline class}
-     * or this class is an inline class without a reference projection,
-     * then this method returns an empty {@link Optional}.
+     * <p>
+     * If this class is an {@linkplain #isInlineClass() inline class}
+     * without a reference projection, then this method returns an empty
+     * {@code Optional}.
+     * <p>
+     * If this class is an identity class, then this method returns this
+     * class.
+     * <p>
+     * Otherwise this method returns an empty {@code Optional}.
      *
-     * @return the {@code Class} object representing the value projection type of
-     *         this class if this class is an inline class with a reference
-     *         projection type or this class is the reference projection type;
-     *         an empty {@link Optional} otherwise
+     * @return the {@code Class} object representing a reference type for
+     *         this class if present; an empty {@link Optional} otherwise.
      * @since Valhalla
      */
-    public Optional<Class<T>> referenceType() {
-        return valType != null ? Optional.ofNullable(refType) : Optional.of(this);
+    public Optional<Class<?>> referenceType() {
+        if (isPrimitive()) return Optional.empty();
+        if (isInterface() || isArray()) return Optional.of(this);
+
+        ensureProjectionTypesInited();
+        return projectionTypes.length == 2 ? Optional.of(projectionTypes[1]) : Optional.empty();
+    }
+
+    private transient Class<?>[] projectionTypes;
+
+    private synchronized void ensureProjectionTypesInited() {
+        if (isPrimitive() || isArray() || isInterface())
+            return;
+
+        if (projectionTypes != null)
+            return;
+
+        if (isInlineClass()) {
+            Class<?> superClass = getSuperclass();
+            if (superClass != Object.class && superClass.isReferenceProjectionType()) {
+                projectionTypes = new Class<?>[] { this, superClass };
+            } else {
+                projectionTypes = new Class<?>[] { this };
+            }
+        } else if (isReferenceProjectionType()) {
+            projectionTypes = new Class<?>[] { valueProjectionType(), this };
+        } else {
+            projectionTypes = EMPTY_CLASS_ARRAY;
+        }
+    }
+
+    private boolean isReferenceProjectionType() {
+        if (isPrimitive() || isInterface() || isArray() || isInlineClass())
+            return false;
+
+        if (projectionTypes != null) {
+            return projectionTypes.length == 2 && projectionTypes[1] == this;
+        }
+
+        int mods = getModifiers();
+        if (!Modifier.isAbstract(mods)) {
+            return false;
+        }
+
+        return valueProjectionType() != null;
     }
 
-    // set by VM if this class is an inline type
-    // otherwise, these two fields are null
-    private transient Class<T> valType;
-    private transient Class<T> refType;
+    private Class<?> valueProjectionType() {
+        // A reference projection type must be a sealed abstract class
+        // that permits the inline projection type to extend.
+        // The inline projection type and reference projection type for
+        // an inline type must be of the same package.
+        String[] subclassNames = getPermittedSubclasses0();
+        if (subclassNames.length == 1) {
+            String cn = subclassNames[0].replace('/', '.');
+            int index = cn.lastIndexOf('.');
+            String pn = index > 0 ? cn.substring(0, index) : "";
+            if (pn.equals(getPackageName())) {
+                try {
+                    Class<?> valType = Class.forName(cn, false, getClassLoader());
+                    if (valType.isInlineClass()) {
+                        return valType;
+                    }
+                } catch (ClassNotFoundException e) {}
+            }
+        }
+        return null;
+    }
 
     /**
      * Creates a new instance of the class represented by this {@code Class}
      * object.  The class is instantiated as if by a {@code new}
      * expression with an empty argument list.  The class is initialized if it
