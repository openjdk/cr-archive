diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -641,11 +641,29 @@
         return valRefTypes.length == 2 && valRefTypes[1] == this;
     }
 
     private transient Class<?>[] projectionTypes;
     private Class<?>[] getProjectionTypes() {
-        ensureProjectionTypesInited();
+        if (isPrimitive() || isArray() || isInterface())
+            return null;
+
+        Class<?>[] valRefTypes = projectionTypes;
+        if (valRefTypes == null) {
+            // C.ensureProjectionTypesInited calls initProjectionTypes that may
+            // call D.ensureProjectionTypesInited where D is its superclass.
+            // So initProjectionTypes is called without holding any lock to
+            // avoid potential deadlock when multiple threads attempt to
+            // initialize the projection types for C and E where D is
+            // the superclass of both C and E (which is an error case)
+            valRefTypes = newProjectionTypeArray();
+        }
+        synchronized (this) {
+            // set the projection types if not set
+            if (projectionTypes == null) {
+                projectionTypes = valRefTypes;
+            }
+        }
         return projectionTypes;
     }
 
     /*
      * Returns an array of Class object whose element at index 0 represents the
@@ -713,31 +731,10 @@
             }
         }
         return null;
     }
 
-    private void ensureProjectionTypesInited() {
-        if (isPrimitive() || isArray() || isInterface())
-            return;
-
-        Class<?>[] valRefTypes = projectionTypes;
-        if (valRefTypes == null) {
-            // C.ensureProjectionTypesInited calls initProjectionTypes that may
-            // call D.ensureProjectionTypesInited where D is its superclass.
-            // So initProjectionTypes is called without holding any lock to
-            // avoid potential deadlock when multiple threads attempt to
-            // initialize the projection types for C and E where D is
-            // the superclass of both C and E (which is an error case)
-            valRefTypes = newProjectionTypeArray();
-        }
-        synchronized (this) {
-            if (projectionTypes == null) {
-                projectionTypes = valRefTypes;
-            }
-        }
-    }
-
     /**
      * Creates a new instance of the class represented by this {@code Class}
      * object.  The class is instantiated as if by a {@code new}
      * expression with an empty argument list.  The class is initialized if it
      * has not already been initialized.
