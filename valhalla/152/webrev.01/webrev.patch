diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -3665,13 +3665,12 @@
                      "Bad length on BootstrapMethods in class file %s",
                      CHECK);
 }
 
 bool ClassFileParser::supports_sealed_types() {
-  return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&
-         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
-         Arguments::enable_preview();
+  // temporarily disable the sealed type preview feature check
+  return _major_version == JVM_CLASSFILE_MAJOR_VERSION;
 }
 
 bool ClassFileParser::supports_records() {
   return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&
          _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
diff a/src/hotspot/share/classfile/javaClasses.cpp b/src/hotspot/share/classfile/javaClasses.cpp
--- a/src/hotspot/share/classfile/javaClasses.cpp
+++ b/src/hotspot/share/classfile/javaClasses.cpp
@@ -808,12 +808,10 @@
 int java_lang_Class::_static_oop_field_count_offset;
 int java_lang_Class::_class_loader_offset;
 int java_lang_Class::_module_offset;
 int java_lang_Class::_protection_domain_offset;
 int java_lang_Class::_component_mirror_offset;
-int java_lang_Class::_val_type_mirror_offset;
-int java_lang_Class::_ref_type_mirror_offset;
 int java_lang_Class::_init_lock_offset;
 int java_lang_Class::_signers_offset;
 int java_lang_Class::_name_offset;
 int java_lang_Class::_source_file_offset;
 int java_lang_Class::_classData_offset;
@@ -1057,29 +1055,10 @@
     if (comp_mirror() != NULL) {
       // Set after k->java_mirror() is published, because compiled code running
       // concurrently doesn't expect a k to have a null java_mirror.
       release_set_array_klass(comp_mirror(), k);
     }
-
-    if (k->is_inline_klass()) {
-      InstanceKlass* super = k->java_super();
-      set_val_type_mirror(mirror(), mirror());
-
-      // if the supertype is a restricted abstract class
-      if (super != SystemDictionary::Object_klass()) {
-        assert(super->access_flags().is_abstract(), "must be an abstract class");
-        oop ref_type_oop = super->java_mirror();
-        // set the reference projection type
-        set_ref_type_mirror(mirror(), ref_type_oop);
-
-        assert(oopDesc::is_oop(ref_type_oop), "Sanity check");
-
-        // set the value and reference projection types
-        set_val_type_mirror(ref_type_oop, mirror());
-        set_ref_type_mirror(ref_type_oop, ref_type_oop);
-      }
-    }
   } else {
     assert(fixup_mirror_list() != NULL, "fixup_mirror_list not initialized");
     fixup_mirror_list()->push(k);
   }
 }
@@ -1530,30 +1509,10 @@
 void java_lang_Class::set_source_file(oop java_class, oop source_file) {
   assert(_source_file_offset != 0, "must be set");
   java_class->obj_field_put(_source_file_offset, source_file);
 }
 
-oop java_lang_Class::val_type_mirror(oop java_class) {
-  assert(_val_type_mirror_offset != 0, "must be set");
-  return java_class->obj_field(_val_type_mirror_offset);
-}
-
-void java_lang_Class::set_val_type_mirror(oop java_class, oop mirror) {
-  assert(_val_type_mirror_offset != 0, "must be set");
-  java_class->obj_field_put(_val_type_mirror_offset, mirror);
-}
-
-oop java_lang_Class::ref_type_mirror(oop java_class) {
-  assert(_ref_type_mirror_offset != 0, "must be set");
-  return java_class->obj_field(_ref_type_mirror_offset);
-}
-
-void java_lang_Class::set_ref_type_mirror(oop java_class, oop mirror) {
-  assert(_ref_type_mirror_offset != 0, "must be set");
-  java_class->obj_field_put(_ref_type_mirror_offset, mirror);
-}
-
 oop java_lang_Class::create_basic_type_mirror(const char* basic_type_name, BasicType type, TRAPS) {
   // This should be improved by adding a field at the Java level or by
   // introducing a new VM klass (see comment in ClassFileParser)
   oop java_class = InstanceMirrorKlass::cast(SystemDictionary::Class_klass())->allocate_instance(NULL, CHECK_NULL);
   if (type != T_VOID) {
@@ -1709,12 +1668,10 @@
   macro(_classRedefinedCount_offset, k, "classRedefinedCount", int_signature,         false); \
   macro(_class_loader_offset,        k, "classLoader",         classloader_signature, false); \
   macro(_component_mirror_offset,    k, "componentType",       class_signature,       false); \
   macro(_module_offset,              k, "module",              module_signature,      false); \
   macro(_name_offset,                k, "name",                string_signature,      false); \
-  macro(_val_type_mirror_offset,     k, "valType",             class_signature,       false); \
-  macro(_ref_type_mirror_offset,     k, "refType",             class_signature,       false); \
   macro(_classData_offset,           k, "classData",           object_signature,      false);
 
 void java_lang_Class::compute_offsets() {
   if (_offsets_computed) {
     return;
diff a/src/hotspot/share/classfile/javaClasses.hpp b/src/hotspot/share/classfile/javaClasses.hpp
--- a/src/hotspot/share/classfile/javaClasses.hpp
+++ b/src/hotspot/share/classfile/javaClasses.hpp
@@ -241,12 +241,10 @@
   static int _class_loader_offset;
   static int _module_offset;
   static int _component_mirror_offset;
   static int _name_offset;
   static int _source_file_offset;
-  static int _val_type_mirror_offset;
-  static int _ref_type_mirror_offset;
   static int _classData_offset;
   static int _classRedefinedCount_offset;
 
   static bool _offsets_computed;
 
@@ -323,16 +321,10 @@
 
   static oop class_loader(oop java_class);
   static void set_module(oop java_class, oop module);
   static oop module(oop java_class);
 
-  static void set_ref_type_mirror(oop java_class, oop mirror);
-  static oop ref_type_mirror(oop java_class);
-
-  static void set_val_type_mirror(oop java_class, oop mirror);
-  static oop val_type_mirror(oop java_class);
-
   static oop name(Handle java_class, TRAPS);
 
   static oop source_file(oop java_class);
   static void set_source_file(oop java_class, oop source_file);
 
diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -577,38 +577,110 @@
      *         this class if this class is the value projection type
      *         or the reference projection type of an inline class;
      *         an empty {@link Optional} otherwise
      * @since Valhalla
      */
-    public Optional<Class<T>> valueType() {
-        return Optional.ofNullable(valType);
+    public Optional<Class<?>> valueType() {
+        if (isPrimitive() || isInterface() || isArray())
+            return Optional.empty();
+
+        ensureProjectionTypesInited();
+        return projectionTypes.length > 0 ? Optional.of(projectionTypes[0]) : Optional.empty();
     }
 
     /**
-     * Returns a {@code Class} object representing the <em>reference projection</em>
-     * type of this class if this {@code Class} represents an
-     * {@linkplain #isInlineClass() inline class} with a reference projection
-     * type. If this {@code Class} represents the reference projection type
+     * Returns a {@code Class} object representing the reference type
+     * of this class.
+     * <p>
+     * If this {@code Class} represents an {@linkplain #isInlineClass()
+     * inline class} with a reference projection type, then this method
+     * returns the <em>reference projection</em> type of this inline class.
+     * <p>
+     * If this {@code Class} represents the reference projection type
      * of an inline class, then this method returns this class.
-     * If this class is not an {@linkplain #isInlineClass() inline class}
-     * or this class is an inline class without a reference projection,
-     * then this method returns an empty {@link Optional}.
+     * <p>
+     * If this class is an {@linkplain #isInlineClass() inline class}
+     * without a reference projection, then this method returns an empty
+     * {@code Optional}.
+     * <p>
+     * If this class is an identity class, then this method returns this
+     * class.
+     * <p>
+     * Otherwise this method returns an empty {@code Optional}.
      *
-     * @return the {@code Class} object representing the value projection type of
-     *         this class if this class is an inline class with a reference
-     *         projection type or this class is the reference projection type;
-     *         an empty {@link Optional} otherwise
+     * @return the {@code Class} object representing a reference type for
+     *         this class if present; an empty {@link Optional} otherwise.
      * @since Valhalla
      */
-    public Optional<Class<T>> referenceType() {
-        return valType != null ? Optional.ofNullable(refType) : Optional.of(this);
+    public Optional<Class<?>> referenceType() {
+        if (isPrimitive()) return Optional.empty();
+        if (isInterface() || isArray()) return Optional.of(this);
+
+        ensureProjectionTypesInited();
+        return projectionTypes.length == 2 ? Optional.of(projectionTypes[1]) : Optional.empty();
+    }
+
+    private transient Class<?>[] projectionTypes;
+
+    private synchronized void ensureProjectionTypesInited() {
+        if (isPrimitive() || isArray() || isInterface())
+            return;
+
+        if (projectionTypes != null)
+            return;
+
+        if (isInlineClass()) {
+            Class<?> superClass = getSuperclass();
+            if (superClass != Object.class && superClass.isReferenceProjectionType()) {
+                projectionTypes = new Class<?>[] { this, superClass };
+            } else {
+                projectionTypes = new Class<?>[] { this };
+            }
+        } else if (isReferenceProjectionType()) {
+            projectionTypes = new Class<?>[] { valueProjectionType(), this };
+        } else {
+            projectionTypes = EMPTY_CLASS_ARRAY;
+        }
+    }
+
+    private boolean isReferenceProjectionType() {
+        if (isPrimitive() || isInterface() || isArray() || isInlineClass())
+            return false;
+
+        if (projectionTypes != null) {
+            return projectionTypes.length == 2 && projectionTypes[1] == this;
+        }
+
+        int mods = getModifiers();
+        if (!Modifier.isAbstract(mods)) {
+            return false;
+        }
+
+        return valueProjectionType() != null;
     }
 
-    // set by VM if this class is an inline type
-    // otherwise, these two fields are null
-    private transient Class<T> valType;
-    private transient Class<T> refType;
+    private Class<?> valueProjectionType() {
+        // A reference projection type must be a sealed abstract class
+        // that permits the inline projection type to extend.
+        // The inline projection type and reference projection type for
+        // an inline type must be of the same package.
+        String[] subclassNames = getPermittedSubclasses0();
+        if (subclassNames.length == 1) {
+            String cn = subclassNames[0].replace('/', '.');
+            int index = cn.lastIndexOf('.');
+            String pn = index > 0 ? cn.substring(0, index) : "";
+            if (pn.equals(getPackageName())) {
+                try {
+                    Class<?> valType = Class.forName(cn, false, getClassLoader());
+                    if (valType.isInlineClass()) {
+                        return valType;
+                    }
+                } catch (ClassNotFoundException e) {}
+            }
+        }
+        return null;
+    }
 
     /**
      * Creates a new instance of the class represented by this {@code Class}
      * object.  The class is instantiated as if by a {@code new}
      * expression with an empty argument list.  The class is initialized if it
diff a/test/jdk/valhalla/valuetypes/Reflection.java b/test/jdk/valhalla/valuetypes/Reflection.java
--- a/test/jdk/valhalla/valuetypes/Reflection.java
+++ b/test/jdk/valhalla/valuetypes/Reflection.java
@@ -23,11 +23,12 @@
 
 
 /*
  * @test
  * @summary test reflection on inline types
- * @run testng/othervm Reflection
+ * @compile --enable-preview --source ${jdk.version} Reflection.java
+ * @run testng/othervm --enable-preview Reflection
  */
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
@@ -35,10 +36,17 @@
 
 import org.testng.annotations.Test;
 import static org.testng.Assert.*;
 
 public class Reflection {
+    @Test
+    public static void sanityTest() {
+        assertTrue(Point.ref.class.permittedSubclasses().length == 1);
+        assertTrue(Line.ref.class.permittedSubclasses().length == 1);
+        assertTrue(NonFlattenValue.ref.class.permittedSubclasses().length == 1);
+    }
+
     @Test
     public static void testPointClass() throws Exception  {
         Point o = Point.makePoint(10, 20);
         Reflection test = new Reflection(Point.class, "Point", o);
         test.newInstance();
