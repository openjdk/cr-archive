diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorldProfiling.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorldProfiling.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorldProfiling.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorldProfiling.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -76,11 +76,11 @@
         TestLWorldProfiling test = new TestLWorldProfiling();
         test.run(args, MyValue1.class, MyValue2.class);
     }
 
     private static final MyValue1 testValue1 = MyValue1.createWithFieldsInline(rI, rL);
-    private static final MyValue2 testValue2 = MyValue2.createWithFieldsInline(rI, true);
+    private static final MyValue2 testValue2 = MyValue2.createWithFieldsInline(rI, rD);
     private static final MyValue1[] testValue1Array = new MyValue1[] {testValue1};
     private static final MyValue2[] testValue2Array = new MyValue2[] {testValue2};
     private static final Integer[] testIntegerArray = new Integer[] {42};
     private static final Long[] testLongArray = new Long[] {42L};
     private static final Double[] testDoubleArray = new Double[] {42.0D};
@@ -387,11 +387,14 @@
     @DontCompile
     public void test15_verifier(boolean warmup) {
         test15(testNotFlattenableArray, notFlattenable);
         try {
             test15(testNotFlattenableArray, null);
-        } catch (NullPointerException npe) {  }
+            throw new RuntimeException("NullPointerException expected");
+        } catch (NullPointerException npe) {
+            // Expected
+        }
     }
 
     @Warmup(10000)
     @Test(valid = ArrayLoadStoreProfileOn, match = { NULL_CHECK_TRAP }, matchCount = { 2 }, failOn = STORE_UNKNOWN_INLINE)
     @Test(match = { NULL_CHECK_TRAP, STORE_UNKNOWN_INLINE }, matchCount = { 3, 1 })
@@ -402,11 +405,14 @@
     @DontCompile
     public void test16_verifier(boolean warmup) {
         test16(testNotFlattenableArray, notFlattenable);
         try {
             test16(testNotFlattenableArray, null);
-        } catch (NullPointerException npe) {  }
+            throw new RuntimeException("NullPointerException expected");
+        } catch (NullPointerException npe) {
+            // Expected
+        }
         test16(testIntegerArray, 42);
     }
 
     @Warmup(10000)
     @Test(valid = ArrayLoadStoreProfileOn, match = { NULL_CHECK_TRAP }, matchCount = { 1 }, failOn = STORE_UNKNOWN_INLINE)
@@ -416,13 +422,12 @@
     }
 
     @DontCompile
     public void test17_verifier(boolean warmup) {
         test17(testIntegerArray, 42);
-        try {
-            test17(testIntegerArray, null);
-        } catch (NullPointerException npe) {  }
+        test17(testIntegerArray, null);
+        testIntegerArray[0] = 42;
         test17(testLongArray, 42L);
     }
 
     public void test18_helper(Object[] array, Object v) {
         array[0] = v;
@@ -439,13 +444,12 @@
 
     @DontCompile
     public void test18_verifier(boolean warmup) {
         test18_helper(testValue1Array, testValue1); // pollute profile
         test18(testIntegerArray, 42);
-        try {
-            test18(testIntegerArray, null);
-        } catch (NullPointerException npe) {  }
+        test18(testIntegerArray, null);
+        testIntegerArray[0] = 42;
         test18(testLongArray, 42L);
     }
 
     // maybe null free, not flat
 
