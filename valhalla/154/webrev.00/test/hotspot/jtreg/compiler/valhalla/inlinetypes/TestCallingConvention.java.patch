diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestCallingConvention.java
@@ -83,11 +83,11 @@
         return v.hash();
     }
 
     @DontCompile
     public void test1_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test1(v);
         Asserts.assertEQ(result, v.hashInterpreted());
     }
 
     @Test(failOn = ALLOC + STORE + TRAP)
@@ -95,11 +95,11 @@
         return v.hash() + i1 - i2;
     }
 
     @DontCompile
     public void test2_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test2(rI, v, 2*rI);
         Asserts.assertEQ(result, v.hashInterpreted() - rI);
     }
 
     @Test(failOn = ALLOC + STORE + TRAP)
@@ -107,11 +107,11 @@
         return v.hash() + l1 - l2;
     }
 
     @DontCompile
     public void test3_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test3(rL, v, 2*rL);
         Asserts.assertEQ(result, v.hashInterpreted() - rL);
     }
 
     @Test(failOn = ALLOC + STORE + TRAP)
@@ -119,11 +119,11 @@
         return v.hash() + i + l;
     }
 
     @DontCompile
     public void test4_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test4(rI, v, rL);
         Asserts.assertEQ(result, v.hashInterpreted() + rL + rI);
     }
 
     @Test(failOn = ALLOC + STORE + TRAP)
@@ -131,11 +131,11 @@
         return v.hash() + i + l;
     }
 
     @DontCompile
     public void test5_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test5(rL, v, rI);
         Asserts.assertEQ(result, v.hashInterpreted() + rL + rI);
     }
 
     @Test(failOn = ALLOC + STORE + TRAP)
@@ -144,11 +144,11 @@
     }
 
     @DontCompile
     public void test6_verifier(boolean warmup) {
         MyValue1 v1 = MyValue1.createWithFieldsDontInline(rI, rL);
-        MyValue2 v2 = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v2 = MyValue2.createWithFieldsInline(rI, rD);
         long result = test6(rL, v1, rI, v2);
         Asserts.assertEQ(result, v1.hashInterpreted() + rL + rI + v2.hashInterpreted());
     }
 
     // Test compiled code to interpreter with various signatures
@@ -162,11 +162,11 @@
         return test7_interp(v);
     }
 
     @DontCompile
     public void test7_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test7(v);
         Asserts.assertEQ(result, v.hashInterpreted());
     }
 
     @DontCompile
@@ -179,11 +179,11 @@
         return test8_interp(i1, v, i2);
     }
 
     @DontCompile
     public void test8_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test8(rI, v, 2*rI);
         Asserts.assertEQ(result, v.hashInterpreted() - rI);
     }
 
     @DontCompile
@@ -196,11 +196,11 @@
         return test9_interp(l1, v, l2);
     }
 
     @DontCompile
     public void test9_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test9(rL, v, 2*rL);
         Asserts.assertEQ(result, v.hashInterpreted() - rL);
     }
 
     @DontCompile
@@ -213,11 +213,11 @@
         return test10_interp(i, v, l);
     }
 
     @DontCompile
     public void test10_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test10(rI, v, rL);
         Asserts.assertEQ(result, v.hashInterpreted() + rL + rI);
     }
 
     @DontCompile
@@ -230,11 +230,11 @@
         return test11_interp(l, v, i);
     }
 
     @DontCompile
     public void test11_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         long result = test11(rL, v, rI);
         Asserts.assertEQ(result, v.hashInterpreted() + rL + rI);
     }
 
     @DontCompile
@@ -248,11 +248,11 @@
     }
 
     @DontCompile
     public void test12_verifier(boolean warmup) {
         MyValue1 v1 = MyValue1.createWithFieldsDontInline(rI, rL);
-        MyValue2 v2 = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v2 = MyValue2.createWithFieldsInline(rI, rD);
         long result = test12(rL, v1, rI, v2);
         Asserts.assertEQ(result, v1.hashInterpreted() + rL + rI + v2.hashInterpreted());
     }
 
     // Test that debug info at a call is correct
@@ -270,11 +270,11 @@
         return test13_interp(v, va, flag) + l;
     }
 
     @DontCompile
     public void test13_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         MyValue1[] va = new MyValue1[2];
         va[0] = MyValue1.createWithFieldsDontInline(rI, rL);
         va[1] = MyValue1.createWithFieldsDontInline(rI, rL);
         long result = test13(v, va, !warmup, rL);
         Asserts.assertEQ(result, v.hashInterpreted() + va[0].hash() + va[1].hash() + rL);
@@ -285,22 +285,22 @@
     public MyValue2 test14_interp(boolean deopt) {
         if (deopt) {
             // uncommon trap
             WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + "::test14"));
         }
-        return MyValue2.createWithFieldsInline(rI, true);
+        return MyValue2.createWithFieldsInline(rI, rD);
     }
 
     @Test()
     public MyValue2 test14(boolean flag) {
         return test14_interp(flag);
     }
 
     @DontCompile
     public void test14_verifier(boolean warmup) {
         MyValue2 result = test14(!warmup);
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         Asserts.assertEQ(result.hash(), v.hash());
     }
 
     // Return inline types in registers from interpreter -> compiled
     final MyValue3 test15_vt = MyValue3.create();
@@ -507,11 +507,11 @@
     @ForceInline
     public MyValue2.ref test26_callee(boolean b) {
         if (b) {
             return null;
         } else {
-            return MyValue2.createWithFieldsInline(rI, true);
+            return MyValue2.createWithFieldsInline(rI, rD);
         }
     }
 
     @Test
     public MyValue2.ref test26(boolean b) {
@@ -521,11 +521,11 @@
     @DontCompile
     public void test26_verifier(boolean warmup) {
         MyValue2.ref vt = test26(true);
         Asserts.assertEQ(vt, null);
         vt = test26(false);
-        Asserts.assertEQ(vt.hash(), MyValue2.createWithFieldsInline(rI, true).hash());
+        Asserts.assertEQ(vt.hash(), MyValue2.createWithFieldsInline(rI, rD).hash());
     }
 
     // Test calling convention with deep hierarchy of flattened fields
     final inline class Test27Value1 {
         final Test27Value2 valueField;
@@ -644,22 +644,22 @@
     public MyValue2 test32_interp(boolean deopt) {
         if (deopt) {
             // uncommon trap
             WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + "::test32"));
         }
-        return MyValue2.createWithFieldsInline(rI+32, true);
+        return MyValue2.createWithFieldsInline(rI+32, rD);
     }
 
     @Test()
     public MyValue2 test32(boolean flag) throws Throwable {
         return (MyValue2)test32_mh.invokeExact(this, flag);
     }
 
     @DontCompile
     public void test32_verifier(boolean warmup) throws Throwable {
         MyValue2 result = test32(!warmup);
-        MyValue2 v = MyValue2.createWithFieldsInline(rI+32, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI+32, rD);
         Asserts.assertEQ(result.hash(), v.hash());
     }
 
     // Same as test32, except the return type is not flattenable.
     static MethodHandle test33_mh;
@@ -668,11 +668,11 @@
     public Object test33_interp(boolean deopt) {
         if (deopt) {
             // uncommon trap
             WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + "::test33"));
         }
-        return MyValue2.createWithFieldsInline(rI+33, true);
+        return MyValue2.createWithFieldsInline(rI+33, rD);
     }
 
     @Test()
     public MyValue2 test33(boolean flag) throws Throwable {
         Object o = test33_mh.invokeExact(this, flag);
@@ -680,11 +680,11 @@
     }
 
     @DontCompile
     public void test33_verifier(boolean warmup) throws Throwable {
         MyValue2 result = test33(!warmup);
-        MyValue2 v = MyValue2.createWithFieldsInline(rI+33, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI+33, rD);
         Asserts.assertEQ(result.hash(), v.hash());
     }
 
     // Test selection of correct entry point in SharedRuntime::handle_wrong_method
     static boolean test34_deopt = false;
@@ -713,11 +713,11 @@
         return test34_callee(vt, i1, i2, i3, i4);
     }
 
     @DontCompile
     public void test34_verifier(boolean warmup) {
-        MyValue2 vt = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 vt = MyValue2.createWithFieldsInline(rI, rD);
         long result = test34(vt, rI, rI, rI, rI);
         Asserts.assertEQ(result, vt.hash()+4*rI);
         if (!warmup) {
             test34_deopt = true;
             for (int i = 0; i < 100; ++i) {
@@ -738,11 +738,11 @@
         return vt.hash() + i1 + i2 + i3 + i4 + result;
     }
 
     @DontCompile
     public void test35_verifier(boolean warmup) {
-        MyValue2 vt = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 vt = MyValue2.createWithFieldsInline(rI, rD);
         long result = test35(vt, rI, rI, rI, rI);
         Asserts.assertEQ(result, vt.hash()+10004*rI);
     }
 
     // Same as test31 but with GC in callee to verify that the
