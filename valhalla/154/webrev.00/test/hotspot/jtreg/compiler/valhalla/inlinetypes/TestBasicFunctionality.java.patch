diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java
@@ -184,12 +184,12 @@
         Asserts.assertEQ(test8(true), hash());
         Asserts.assertEQ(test8(false), hash(rI + 1, rL + 1));
     }
 
     // Merge inline types created from two branches
-    @Test(valid = InlineTypePassFieldsAsArgsOn, match = {LOAD}, matchCount = {12}, failOn = TRAP + ALLOC + STORE)
-    @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC, STORE}, matchCount = {1, 12}, failOn = LOAD + TRAP)
+    @Test(valid = InlineTypePassFieldsAsArgsOn, match = {LOAD}, matchCount = {14}, failOn = TRAP + ALLOC + STORE)
+    @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC, STORE}, matchCount = {1, 13}, failOn = LOAD + TRAP)
     public MyValue1 test9(boolean b, int localrI, long localrL) {
         MyValue1 v;
         if (b) {
             // Inline type is not allocated
             // Do not use rI/rL directly here as null values may cause
@@ -313,11 +313,11 @@
         Asserts.assertEQ(result, warmup ? rL + (1000 * rI) : ((Math.abs(rI) % 10) + 1) * hash());
     }
 
     // Create an inline type in a non-inlined method and then call a
     // non-inlined method on that inline type.
-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = (ALLOC + STORE + TRAP), match = {LOAD}, matchCount = {12})
+    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = (ALLOC + STORE + TRAP), match = {LOAD}, matchCount = {14})
     @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = (ALLOC + LOAD + STORE + TRAP))
     public long test14() {
         MyValue1 v = MyValue1.createWithFieldsDontInline(rI, rL);
         return v.hashInterpreted();
     }
@@ -445,11 +445,11 @@
     public long test21(int x, long y) {
         // Compute hash of inline type fields
         long result = val1.hash() + val2.hash() + val3.hash() + val4.hash() + val5.hash();
         // Update fields
         val1 = MyValue1.createWithFieldsInline(x, y);
-        val2 = MyValue2.createWithFieldsInline(x, true);
+        val2 = MyValue2.createWithFieldsInline(x, rD);
         val4 = MyValue1.createWithFieldsInline(x, y);
         return result;
     }
 
     @DontCompile
@@ -463,11 +463,11 @@
         long hash = val1.hash() + val2.hash() + val3.hash() + val4.hash() + val5.hash();
         long result = test21(rI + 1, rL + 1);
         Asserts.assertEQ(result, hash);
         // Check if inline type fields were updated
         Asserts.assertEQ(val1.hash(), hash(rI + 1, rL + 1));
-        Asserts.assertEQ(val2.hash(), MyValue2.createWithFieldsInline(rI + 1, true).hash());
+        Asserts.assertEQ(val2.hash(), MyValue2.createWithFieldsInline(rI + 1, rD).hash());
         Asserts.assertEQ(val4.hash(), hash(rI + 1, rL + 1));
     }
 
     // Test folding of constant inline type fields
     @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)
@@ -510,18 +510,18 @@
     }
 
     // Test withfield
     @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)
     public long test25() {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         return v.hash();
     }
 
     @DontCompile
     public void test25_verifier(boolean warmup) {
         long result = test25();
-        Asserts.assertEQ(result, MyValue2.createWithFieldsInline(rI, true).hash());
+        Asserts.assertEQ(result, MyValue2.createWithFieldsInline(rI, rD).hash());
     }
 
     // Test withfield
     @Test(failOn = ALLOC + STORE + LOOP + TRAP)
     public long test26() {
