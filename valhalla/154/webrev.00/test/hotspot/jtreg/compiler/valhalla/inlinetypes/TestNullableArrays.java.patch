diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
@@ -103,13 +103,11 @@
             Asserts.assertEQ(va[i].hash(), hash());
         }
     }
 
     // Test creation of an inline type array and element access
-    @Test
-    // TODO 8227588
-    // @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
+    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public long test2() {
         MyValue1.ref[] va = new MyValue1.ref[1];
         va[0] = MyValue1.createWithFieldsInline(rI, rL);
         return va[0].hash();
     }
@@ -607,17 +605,17 @@
         MyValue2.ref[] dst1 = new MyValue2.ref[len];
         MyValue2[]  dst2 = new MyValue2[len];
         MyValue2.ref[] dst3 = new MyValue2.ref[len];
         MyValue2[]  dst4 = new MyValue2[len];
         if (len > 0) {
-            src2[0] = MyValue2.createWithFieldsInline(rI, true);
+            src2[0] = MyValue2.createWithFieldsInline(rI, rD);
         }
         for (int i = 1; i < len; ++i) {
-            src1[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src2[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src3[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src4[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src1[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src2[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src3[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src4[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test21(src1, dst1);
         test21(src2, dst2);
         test21(src3, dst3);
         test21(src4, dst4);
@@ -753,16 +751,16 @@
         MyValue2[]  src4 = new MyValue2[8];
         MyValue2.ref[] dst1 = new MyValue2.ref[8];
         MyValue2[]  dst2 = new MyValue2[8];
         MyValue2.ref[] dst3 = new MyValue2.ref[8];
         MyValue2[]  dst4 = new MyValue2[8];
-        src2[0] = MyValue2.createWithFieldsInline(rI, true);
+        src2[0] = MyValue2.createWithFieldsInline(rI, rD);
         for (int i = 1; i < 8; ++i) {
-            src1[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src2[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src3[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src4[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src1[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src2[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src3[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src4[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test25(src1, dst1);
         test25(src2, dst2);
         test25(src3, dst3);
         test25(src4, dst4);
@@ -856,11 +854,11 @@
             Asserts.assertEQ(src4[i].hash(), dst4[i].hash());
         }
     }
 
     // non escaping allocations
-    // TODO ZGC does not support the clone intrinsic, remove this once JDK-8232896 is fixed
+    // TODO 8252027: Make sure this is optimized with ZGC
     @Test(valid = ZGCOff, failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     @Test(valid = ZGCOn)
     public MyValue2.ref test28() {
         MyValue2.ref[] src = new MyValue2.ref[10];
         src[0] = null;
@@ -868,11 +866,11 @@
         return dst[0];
     }
 
     @DontCompile
     public void test28_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, false);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         MyValue2.ref result = test28();
         Asserts.assertEQ(result, null);
     }
 
     // non escaping allocations
@@ -887,12 +885,12 @@
     @DontCompile
     public void test29_verifier(boolean warmup) {
         MyValue2.ref[] src1 = new MyValue2.ref[10];
         MyValue2.val[] src2 = new MyValue2.val[10];
         for (int i = 0; i < 10; ++i) {
-            src1[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src2[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src1[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src2[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         MyValue2.ref v = test29(src1);
         Asserts.assertEQ(src1[0].hash(), v.hash());
         if (!warmup) {
             v = test29(src2);
@@ -914,12 +912,12 @@
     @DontCompile
     public void test30_verifier(boolean warmup) {
         MyValue2.ref[] src1 = new MyValue2.ref[10];
         MyValue2.val[] src2 = new MyValue2.val[10];
         for (int i = 0; i < 10; ++i) {
-            src1[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
-            src2[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src1[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
+            src2[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         MyValue2.ref v = test30(src1, !warmup);
         Asserts.assertEQ(src1[0].hash(), v.hash());
         if (!warmup) {
             v = test30(src2, true);
@@ -932,27 +930,27 @@
     // TODO 8227588
     // @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public long test31(boolean b, boolean deopt) {
         MyValue2.ref[] src = new MyValue2.ref[1];
         if (b) {
-            src[0] = MyValue2.createWithFieldsInline(rI, true);
+            src[0] = MyValue2.createWithFieldsInline(rI, rD);
         } else {
-            src[0] = MyValue2.createWithFieldsInline(rI, false);
+            src[0] = MyValue2.createWithFieldsInline(rI+1, rD+1);
         }
         if (deopt) {
             // uncommon trap
             WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + "::test31"));
         }
         return src[0].hash();
     }
 
     @DontCompile
     public void test31_verifier(boolean warmup) {
-        MyValue2 v1 = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v1 = MyValue2.createWithFieldsInline(rI, rD);
         long result1 = test31(true, !warmup);
         Asserts.assertEQ(result1, v1.hash());
-        MyValue2 v2 = MyValue2.createWithFieldsInline(rI, false);
+        MyValue2 v2 = MyValue2.createWithFieldsInline(rI+1, rD+1);
         long result2 = test31(false, !warmup);
         Asserts.assertEQ(result2, v2.hash());
     }
 
     // Tests with Object arrays and clone/arraycopy
@@ -1133,11 +1131,11 @@
     public void test36_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2.ref[] src = new MyValue2.ref[len];
         MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test36(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test36")) {
             test36(src, dst);
@@ -1154,11 +1152,11 @@
     public void test37_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2.ref[] src = new MyValue2.ref[len];
         MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test37(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test37")) {
             test37(src, dst);
@@ -1176,11 +1174,11 @@
     public void test38_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
         MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test38(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestNullableArrays::test38");
@@ -1203,11 +1201,11 @@
     public void test39_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2.ref[] src = new MyValue2.ref[len];
         Object[] dst = new Object[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test39(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test39")) {
             test39(src, dst);
@@ -1225,11 +1223,11 @@
     public void test40_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
         MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test40(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestNullableArrays::test40");
@@ -1252,11 +1250,11 @@
     public void test41_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2.ref[] src = new MyValue2.ref[len];
         Object[] dst = new Object[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test41(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test41")) {
             test41(src, dst);
@@ -1273,11 +1271,11 @@
     public void test42_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
         Object[] dst = new Object[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test42(src, dst);
         verify(src, dst);
         if (!warmup) {
             Method m = tests.get("TestNullableArrays::test42");
@@ -1316,11 +1314,11 @@
     @DontCompile
     public void test44_verifier(boolean warmup) {
         MyValue2.ref[] src = new MyValue2.ref[8];
         MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test44(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test44")) {
             test44(src, dst);
@@ -1336,11 +1334,11 @@
     @DontCompile
     public void test45_verifier(boolean warmup) {
         MyValue2.ref[] src = new MyValue2.ref[8];
         MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test45(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test45")) {
             test45(src, dst);
@@ -1357,11 +1355,11 @@
     @DontCompile
     public void test46_verifier(boolean warmup) {
         Object[] src = new Object[8];
         MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test46(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestNullableArrays::test46");
@@ -1383,11 +1381,11 @@
     @DontCompile
     public void test47_verifier(boolean warmup) {
         MyValue2.ref[] src = new MyValue2.ref[8];
         Object[] dst = new Object[8];
         for (int i = 1; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test47(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test47")) {
             test47(src, dst);
@@ -1404,11 +1402,11 @@
     @DontCompile
     public void test48_verifier(boolean warmup) {
         Object[] src = new Object[8];
         MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test48(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestNullableArrays::test48");
@@ -1430,11 +1428,11 @@
     @DontCompile
     public void test49_verifier(boolean warmup) {
         MyValue2.ref[] src = new MyValue2.ref[8];
         Object[] dst = new Object[8];
         for (int i = 1; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test49(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test49")) {
             test49(src, dst);
@@ -1450,11 +1448,11 @@
     @DontCompile
     public void test50_verifier(boolean warmup) {
         Object[] src = new Object[8];
         Object[] dst = new Object[8];
         for (int i = 1; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test50(src, dst);
         verify(src, dst);
         if (!warmup) {
             Method m = tests.get("TestNullableArrays::test50");
@@ -1846,11 +1844,11 @@
     public void test71() {
         int len = 10;
         MyValue2.ref[] src = new MyValue2.ref[len];
         MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsDontInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsDontInline(rI+i, rD+i);
         }
         System.arraycopy(src, 0, dst, 0, src.length);
         for (int i = 0; i < len; ++i) {
             if (src[i] == null) {
                 Asserts.assertEQ(dst[i], null);
