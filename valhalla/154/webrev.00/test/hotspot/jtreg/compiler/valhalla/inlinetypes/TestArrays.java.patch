diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestArrays.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestArrays.java
@@ -103,13 +103,11 @@
             Asserts.assertEQ(va[i].hash(), hash());
         }
     }
 
     // Test creation of an inline type array and element access
-    // TODO 8227588
-    @Test(valid = InlineTypeArrayFlattenOn, failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
-    @Test(valid = InlineTypeArrayFlattenOff)
+    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public long test2() {
         MyValue1[] va = new MyValue1[1];
         va[0] = MyValue1.createWithFieldsInline(rI, rL);
         return va[0].hash();
     }
@@ -535,11 +533,11 @@
     public void test21_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2[] src = new MyValue2[len];
         MyValue2[] dst = new MyValue2[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test21(src, dst);
         for (int i = 0; i < len; ++i) {
             Asserts.assertEQ(src[i].hash(), dst[i].hash());
         }
@@ -618,11 +616,11 @@
     @DontCompile
     public void test25_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[8];
         MyValue2[] dst = new MyValue2[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test25(src, dst);
         for (int i = 0; i < 8; ++i) {
             Asserts.assertEQ(src[i].hash(), dst[i].hash());
         }
@@ -665,42 +663,43 @@
             Asserts.assertEQ(src[i-1].hash(), dst[i].hash());
         }
     }
 
     // non escaping allocations
-    // TODO ZGC does not support the clone intrinsic, remove this once JDK-8232896 is fixed
+    // TODO 8252027: Make sure this is optimized with ZGC
     @Test(valid = ZGCOff, failOn = ALLOCA + LOOP + LOAD + TRAP)
     @Test(valid = ZGCOn)
     public MyValue2 test28() {
         MyValue2[] src = new MyValue2[10];
-        src[0] = MyValue2.createWithFieldsInline(rI, false);
+        src[0] = MyValue2.createWithFieldsInline(rI, rD);
         MyValue2[] dst = (MyValue2[])src.clone();
         return dst[0];
     }
 
     @DontCompile
     public void test28_verifier(boolean warmup) {
-        MyValue2 v = MyValue2.createWithFieldsInline(rI, false);
+        MyValue2 v = MyValue2.createWithFieldsInline(rI, rD);
         MyValue2 result = test28();
         Asserts.assertEQ(result.hash(), v.hash());
     }
 
     // non escaping allocations
     // TODO 8227588: shouldn't this have the same IR matching rules as test6?
+    // @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     @Test(valid = InlineTypeArrayFlattenOn, failOn = ALLOCA + LOOP + LOAD + TRAP)
-    @Test(valid = InlineTypeArrayFlattenOff)
+    @Test(valid = InlineTypeArrayFlattenOff, failOn = ALLOCA + LOOP + TRAP)
     public MyValue2 test29(MyValue2[] src) {
         MyValue2[] dst = new MyValue2[10];
         System.arraycopy(src, 0, dst, 0, 10);
         return dst[0];
     }
 
     @DontCompile
     public void test29_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[10];
         for (int i = 0; i < 10; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         MyValue2 v = test29(src);
         Asserts.assertEQ(src[0].hash(), v.hash());
     }
 
@@ -717,40 +716,38 @@
 
     @DontCompile
     public void test30_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[10];
         for (int i = 0; i < 10; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         MyValue2 v = test30(src, !warmup);
         Asserts.assertEQ(src[0].hash(), v.hash());
     }
 
     // non escaping allocation with memory phi
-    // TODO 8227588
-    @Test(valid = InlineTypeArrayFlattenOn, failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
-    @Test(valid = InlineTypeArrayFlattenOff)
+    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public long test31(boolean b, boolean deopt) {
         MyValue2[] src = new MyValue2[1];
         if (b) {
-            src[0] = MyValue2.createWithFieldsInline(rI, true);
+            src[0] = MyValue2.createWithFieldsInline(rI, rD);
         } else {
-            src[0] = MyValue2.createWithFieldsInline(rI, false);
+            src[0] = MyValue2.createWithFieldsInline(rI+1, rD+1);
         }
         if (deopt) {
             // uncommon trap
             WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + "::test31"));
         }
         return src[0].hash();
     }
 
     @DontCompile
     public void test31_verifier(boolean warmup) {
-        MyValue2 v1 = MyValue2.createWithFieldsInline(rI, true);
+        MyValue2 v1 = MyValue2.createWithFieldsInline(rI, rD);
         long result1 = test31(true, !warmup);
         Asserts.assertEQ(result1, v1.hash());
-        MyValue2 v2 = MyValue2.createWithFieldsInline(rI, false);
+        MyValue2 v2 = MyValue2.createWithFieldsInline(rI+1, rD+1);
         long result2 = test31(false, !warmup);
         Asserts.assertEQ(result2, v2.hash());
     }
 
     // Tests with Object arrays and clone/arraycopy
@@ -919,11 +916,11 @@
     public void test36_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2[] src = new MyValue2[len];
         MyValue2[] dst = new MyValue2[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test36(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test36")) {
             test36(src, dst);
@@ -940,11 +937,11 @@
     public void test37_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2[] src = new MyValue2[len];
         MyValue2[] dst = new MyValue2[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test37(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test37")) {
             test37(src, dst);
@@ -962,11 +959,11 @@
     public void test38_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
         MyValue2[] dst = new MyValue2[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test38(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestArrays::test38");
@@ -989,11 +986,11 @@
     public void test39_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2[] src = new MyValue2[len];
         Object[] dst = new Object[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test39(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test39")) {
             test39(src, dst);
@@ -1011,11 +1008,11 @@
     public void test40_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
         MyValue2[] dst = new MyValue2[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test40(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestArrays::test40");
@@ -1038,11 +1035,11 @@
     public void test41_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         MyValue2[] src = new MyValue2[len];
         Object[] dst = new Object[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test41(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test41")) {
             test41(src, dst);
@@ -1059,11 +1056,11 @@
     public void test42_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
         Object[] dst = new Object[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test42(src, dst);
         verify(src, dst);
         if (!warmup) {
             Method m = tests.get("TestArrays::test42");
@@ -1102,11 +1099,11 @@
     @DontCompile
     public void test44_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[8];
         MyValue2[] dst = new MyValue2[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test44(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test44")) {
             test44(src, dst);
@@ -1122,11 +1119,11 @@
     @DontCompile
     public void test45_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[8];
         MyValue2[] dst = new MyValue2[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test45(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test45")) {
             test45(src, dst);
@@ -1143,11 +1140,11 @@
     @DontCompile
     public void test46_verifier(boolean warmup) {
         Object[] src = new Object[8];
         MyValue2[] dst = new MyValue2[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test46(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestArrays::test46");
@@ -1169,11 +1166,11 @@
     @DontCompile
     public void test47_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[8];
         Object[] dst = new Object[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test47(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test47")) {
             test47(src, dst);
@@ -1190,11 +1187,11 @@
     @DontCompile
     public void test48_verifier(boolean warmup) {
         Object[] src = new Object[8];
         MyValue2[] dst = new MyValue2[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test48(src, dst);
         verify(dst, src);
         if (!warmup) {
             Method m = tests.get("TestArrays::test48");
@@ -1216,11 +1213,11 @@
     @DontCompile
     public void test49_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[8];
         Object[] dst = new Object[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test49(src, dst);
         verify(src, dst);
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test49")) {
             test49(src, dst);
@@ -1236,11 +1233,11 @@
     @DontCompile
     public void test50_verifier(boolean warmup) {
         Object[] src = new Object[8];
         Object[] dst = new Object[8];
         for (int i = 0; i < 8; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         test50(src, dst);
         verify(src, dst);
         if (!warmup) {
             Method m = tests.get("TestArrays::test50");
@@ -1250,11 +1247,11 @@
         }
     }
 
     @Test
     public MyValue1[] test51(MyValue1[] va) {
-        // TODO Remove cast as workaround once javac is fixed
+        // TODO 8244562: Remove cast as workaround once javac is fixed
         return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test51_verifier(boolean warmup) {
@@ -1269,11 +1266,11 @@
 
     static final MyValue1[] test52_va = new MyValue1[8];
 
     @Test
     public MyValue1[] test52() {
-        // TODO Remove cast as workaround once javac is fixed
+        // TODO 8244562: Remove cast as workaround once javac is fixed
         return (MyValue1[])Arrays.copyOf(test52_va, 8, MyValue1[].class);
     }
 
     @DontCompile
     public void test52_verifier(boolean warmup) {
@@ -1284,11 +1281,11 @@
         verify(test52_va, result);
     }
 
     @Test
     public MyValue1[] test53(Object[] va) {
-        // TODO Remove cast as workaround once javac is fixed
+        // TODO 8244562: Remove cast as workaround once javac is fixed
         return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test53_verifier(boolean warmup) {
@@ -1333,11 +1330,11 @@
         verify(va, result);
     }
 
     @Test
     public MyValue1[] test56(Object[] va) {
-        // TODO Remove cast as workaround once javac is fixed
+        // TODO 8244562: Remove cast as workaround once javac is fixed
         return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test56_verifier(boolean warmup) {
@@ -1639,11 +1636,11 @@
     public void test71() {
         int len = 10;
         MyValue2[] src = new MyValue2[len];
         MyValue2[] dst = new MyValue2[len];
         for (int i = 0; i < len; ++i) {
-            src[i] = MyValue2.createWithFieldsDontInline(rI, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsDontInline(rI+i, rD+i);
         }
         System.arraycopy(src, 0, dst, 0, src.length);
         for (int i = 0; i < len; ++i) {
             Asserts.assertEQ(src[i].hash(), dst[i].hash());
         }
@@ -2243,11 +2240,11 @@
 
     @DontCompile
     public void test93_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[10];
         for (int i = 0; i < 10; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (rI % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         long res = test93(src, !warmup);
         long expected = 0;
         for (int i = 0; i < 10; ++i) {
             expected += src[i].hash();
@@ -2267,11 +2264,11 @@
 
     @DontCompile
     public void test94_verifier(boolean warmup) {
         MyValue2[] src = new MyValue2[10];
         for (int i = 0; i < 10; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(i, (i % 2) == 0);
+            src[i] = MyValue2.createWithFieldsInline(rI+i, rD+i);
         }
         for (int i = 0; i < 10; ++i) {
             long res = test94(src, i, !warmup);
             long expected = src[i].hash() + 9*MyValue2.default.hash();
             Asserts.assertEQ(res, expected);
