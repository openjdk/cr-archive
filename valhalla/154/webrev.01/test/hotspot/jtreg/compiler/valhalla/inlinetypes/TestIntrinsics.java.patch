diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
@@ -115,13 +115,13 @@
 
     // Verify that Class::getSuperclass checks with statically known classes are folded
     @Test(failOn = LOADK)
     public boolean test4() {
         boolean check1 = Object.class.getSuperclass() == null;
-        // TODO Remove cast as workaround once javac is fixed
+        // TODO 8244562: Remove cast as workaround once javac is fixed
         boolean check2 = (Class<?>)MyValue1.ref.class.getSuperclass() == MyAbstract.class;
-        // TODO Remove cast as workaround once javac is fixed
+        // TODO 8244562: Remove cast as workaround once javac is fixed
         boolean check3 = (Class<?>)MyValue1.val.class.getSuperclass() == MyValue1.ref.class;
         boolean check4 = Class.class.getSuperclass() == Object.class;
         return check1 && check2 && check3 && check4;
     }
 
@@ -435,14 +435,13 @@
 
     final Test25Value[] test25Array = new Test25Value[10];
 
     @Test
     public Test25Value[] test25(Test25Value element) {
-        // TODO Remove cast as workaround once javac is fixed
-        Test25Value[] newArray = (Test25Value[])Arrays.copyOf(test25Array, test25Array.length + 1);
+        Object[] newArray = Arrays.copyOf(test25Array, test25Array.length + 1);
         newArray[test25Array.length] = element;
-        return newArray;
+        return (Test25Value[]) newArray;
     }
 
     @DontCompile
     public void test25_verifier(boolean warmup) {
         Test25Value vt = new Test25Value();
