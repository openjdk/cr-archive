diff a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -5033,12 +5033,12 @@
   }
 
   if (has_src && has_dest && can_emit_guards) {
     BasicType src_elem  = top_src->klass()->as_array_klass()->element_type()->basic_type();
     BasicType dest_elem = top_dest->klass()->as_array_klass()->element_type()->basic_type();
-    if (src_elem  == T_ARRAY)  src_elem  = T_OBJECT;
-    if (dest_elem == T_ARRAY)  dest_elem = T_OBJECT;
+    if (is_reference_type(src_elem))   src_elem  = T_OBJECT;
+    if (is_reference_type(dest_elem))  dest_elem = T_OBJECT;
 
     if (src_elem == dest_elem && src_elem == T_OBJECT) {
       // If both arrays are object arrays then having the exact types
       // for both will remove the need for a subtype check at runtime
       // before the call and may make it possible to pick a faster copy
diff a/src/hotspot/share/opto/macro.hpp b/src/hotspot/share/opto/macro.hpp
--- a/src/hotspot/share/opto/macro.hpp
+++ b/src/hotspot/share/opto/macro.hpp
@@ -189,13 +189,13 @@
                                     BasicType basic_elem_type,
                                     bool disjoint_bases,
                                     Node* src,  Node* src_offset,
                                     Node* dest, Node* dest_offset,
                                     Node* copy_length, bool dest_uninitialized);
-  const TypePtr* adjust_parameters_for_vt(const TypeAryPtr* top_dest, Node*& src_offset,
-                                          Node*& dest_offset, Node*& length, BasicType& dest_elem,
-                                          Node*& dest_length);
+  const TypePtr* adjust_for_flat_array(const TypeAryPtr* top_dest, Node*& src_offset,
+                                       Node*& dest_offset, Node*& length, BasicType& dest_elem,
+                                       Node*& dest_length);
   void expand_arraycopy_node(ArrayCopyNode *ac);
 
   void expand_subtypecheck_node(SubTypeCheckNode *check);
 
   int replace_input(Node *use, Node *oldref, Node *newref);
diff a/src/hotspot/share/opto/macroArrayCopy.cpp b/src/hotspot/share/opto/macroArrayCopy.cpp
--- a/src/hotspot/share/opto/macroArrayCopy.cpp
+++ b/src/hotspot/share/opto/macroArrayCopy.cpp
@@ -1153,13 +1153,13 @@
                               src_start, dest_start, copy_length XTOP);
 
   finish_arraycopy_call(call, ctrl, mem, adr_type);
 }
 
-const TypePtr* PhaseMacroExpand::adjust_parameters_for_vt(const TypeAryPtr* top_dest, Node*& src_offset,
-                                                          Node*& dest_offset, Node*& length, BasicType& dest_elem,
-                                                          Node*& dest_length) {
+const TypePtr* PhaseMacroExpand::adjust_for_flat_array(const TypeAryPtr* top_dest, Node*& src_offset,
+                                                       Node*& dest_offset, Node*& length, BasicType& dest_elem,
+                                                       Node*& dest_length) {
   assert(top_dest->klass()->is_flat_array_klass(), "inconsistent");
   int elem_size = ((ciFlatArrayKlass*)top_dest->klass())->element_byte_size();
   if (elem_size >= 8) {
     if (elem_size > 8) {
       // treat as array of long but scale length, src offset and dest offset
@@ -1223,11 +1223,11 @@
     assert(dest_elem != T_INLINE_TYPE || alloc != NULL, "unsupported");
     Node* dest_length = (alloc != NULL) ? alloc->in(AllocateNode::ALength) : NULL;
 
     const TypePtr* adr_type = NULL;
     if (dest_elem == T_INLINE_TYPE) {
-      adr_type = adjust_parameters_for_vt(top_dest, src_offset, dest_offset, length, dest_elem, dest_length);
+      adr_type = adjust_for_flat_array(top_dest, src_offset, dest_offset, length, dest_elem, dest_length);
     } else {
       adr_type = dest_type->is_oopptr()->add_offset(Type::OffsetBot);
       if (ac->_dest_type != TypeOopPtr::BOTTOM) {
         adr_type = ac->_dest_type->add_offset(Type::OffsetBot)->is_ptr();
       }
@@ -1427,11 +1427,11 @@
   const TypePtr* adr_type = NULL;
 
   Node* dest_length = alloc != NULL ? alloc->in(AllocateNode::ALength) : NULL;
 
   if (dest_elem == T_INLINE_TYPE) {
-    adr_type = adjust_parameters_for_vt(top_dest, src_offset, dest_offset, length, dest_elem, dest_length);
+    adr_type = adjust_for_flat_array(top_dest, src_offset, dest_offset, length, dest_elem, dest_length);
   } else if (ac->_dest_type != TypeOopPtr::BOTTOM) {
     adr_type = ac->_dest_type->add_offset(Type::OffsetBot)->is_ptr();
   } else {
     adr_type = TypeAryPtr::get_array_body_type(dest_elem);
   }
diff a/src/hotspot/share/opto/memnode.cpp b/src/hotspot/share/opto/memnode.cpp
--- a/src/hotspot/share/opto/memnode.cpp
+++ b/src/hotspot/share/opto/memnode.cpp
@@ -220,10 +220,15 @@
            ->is_oopptr()->cast_to_ptr_type(t_oop->ptr())
             ->is_oopptr()->cast_to_instance_id(t_oop->instance_id()) == t_oop)) {
       // clone the Phi with our address type
       result = mphi->split_out_instance(t_adr, igvn);
     } else {
+      if (t->isa_aryptr()) {
+        // In the case of a flattened inline type array, each field has its own slice.
+        // TODO This should be re-evaluated with JDK-8251039
+        t = t->is_aryptr()->with_field_offset(t_adr->is_aryptr()->field_offset().get());
+      }
       assert(phase->C->get_alias_index(t) == phase->C->get_alias_index(t_adr), "correct memory chain");
     }
   }
   return result;
 }
@@ -960,11 +965,11 @@
       assert(addp->in(AddPNode::Base) == addp->in(AddPNode::Address), "should be");
       addp->set_req(AddPNode::Base, src);
       addp->set_req(AddPNode::Address, src);
 
       const TypeAryPtr* ary_t = phase->type(in(MemNode::Address))->isa_aryptr();
-      BasicType ary_elem  = ary_t->klass()->as_array_klass()->element_type()->basic_type();
+      BasicType ary_elem = ary_t->klass()->as_array_klass()->element_type()->basic_type();
       uint header = arrayOopDesc::base_offset_in_bytes(ary_elem);
       uint shift  = exact_log2(type2aelembytes(ary_elem));
       if (ary_t->klass()->is_flat_array_klass()) {
         ciFlatArrayKlass* vak = ary_t->klass()->as_flat_array_klass();
         shift = vak->log2_element_size();
diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
@@ -884,16 +884,22 @@
         return dst[0];
     }
 
     @DontCompile
     public void test29_verifier(boolean warmup) {
-        MyValue2.ref[] src = new MyValue2.ref[10];
+        MyValue2.ref[] src1 = new MyValue2.ref[10];
+        MyValue2.val[] src2 = new MyValue2.val[10];
         for (int i = 0; i < 10; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src1[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src2[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+        }
+        MyValue2.ref v = test29(src1);
+        Asserts.assertEQ(src1[0].hash(), v.hash());
+        if (!warmup) {
+            v = test29(src2);
+            Asserts.assertEQ(src2[0].hash(), v.hash());
         }
-        MyValue2.ref v = test29(src);
-        Asserts.assertEQ(src[0].hash(), v.hash());
     }
 
     // non escaping allocation with uncommon trap that needs
     // eliminated inline type array element as debug info
     @Test
@@ -905,16 +911,22 @@
         return dst[0];
     }
 
     @DontCompile
     public void test30_verifier(boolean warmup) {
-        MyValue2.ref[] src = new MyValue2.ref[10];
+        MyValue2.ref[] src1 = new MyValue2.ref[10];
+        MyValue2.val[] src2 = new MyValue2.val[10];
         for (int i = 0; i < 10; ++i) {
-            src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src1[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+            src2[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
+        }
+        MyValue2.ref v = test30(src1, !warmup);
+        Asserts.assertEQ(src1[0].hash(), v.hash());
+        if (!warmup) {
+            v = test30(src2, true);
+            Asserts.assertEQ(src2[0].hash(), v.hash());
         }
-        MyValue2.ref v = test30(src, !warmup);
-        Asserts.assertEQ(src[0].hash(), v.hash());
     }
 
     // non escaping allocation with memory phi
     @Test()
     // TODO 8227588
@@ -2810,11 +2822,10 @@
     @DontCompile
     public void test107_verifier(boolean warmup) {
         test107();
     }
 
-
     @Test
     @Warmup(10000)
     public Object test108(MyValue1.ref[] src, boolean flag) {
         MyValue1.ref[] dst = new MyValue1.ref[8];
         System.arraycopy(src, 1, dst, 2, 6);
@@ -2826,6 +2837,35 @@
     public void test108_verifier(boolean warmup) {
         MyValue1.ref[] src = new MyValue1.ref[8];
         test108(src, !warmup);
     }
 
+    // Test LoadNode::can_see_arraycopy_value optimization
+    @Test()
+    public static void test109() {
+        MyValue1[] src = new MyValue1[1];
+        MyValue1.ref[] dst = new MyValue1.ref[1];
+        src[0] = testValue1;
+        System.arraycopy(src, 0, dst, 0, 1);
+        Asserts.assertEquals(src[0], dst[0]);
+    }
+
+    @DontCompile
+    public void test109_verifier(boolean warmup) {
+        test109();
+    }
+
+    // Same as test109 but with Object destination array
+    @Test()
+    public static void test110() {
+        MyValue1[] src = new MyValue1[1];
+        Object[] dst = new Object[1];
+        src[0] = testValue1;
+        System.arraycopy(src, 0, dst, 0, 1);
+        Asserts.assertEquals(src[0], dst[0]);
+    }
+
+    @DontCompile
+    public void test110_verifier(boolean warmup) {
+        test110();
+    }
 }
